
u8m2.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	4a c6       	rjmp	.+3220   	; 0xc96 <__ctors_end>
       2:	00 00       	nop
       4:	63 c6       	rjmp	.+3270   	; 0xccc <__bad_interrupt>
       6:	00 00       	nop
       8:	61 c6       	rjmp	.+3266   	; 0xccc <__bad_interrupt>
       a:	00 00       	nop
       c:	5f c6       	rjmp	.+3262   	; 0xccc <__bad_interrupt>
       e:	00 00       	nop
      10:	5d c6       	rjmp	.+3258   	; 0xccc <__bad_interrupt>
      12:	00 00       	nop
      14:	5b c6       	rjmp	.+3254   	; 0xccc <__bad_interrupt>
      16:	00 00       	nop
      18:	59 c6       	rjmp	.+3250   	; 0xccc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	57 c6       	rjmp	.+3246   	; 0xccc <__bad_interrupt>
      1e:	00 00       	nop
      20:	55 c6       	rjmp	.+3242   	; 0xccc <__bad_interrupt>
      22:	00 00       	nop
      24:	53 c6       	rjmp	.+3238   	; 0xccc <__bad_interrupt>
      26:	00 00       	nop
      28:	51 c6       	rjmp	.+3234   	; 0xccc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4f c6       	rjmp	.+3230   	; 0xccc <__bad_interrupt>
      2e:	00 00       	nop
      30:	4d c6       	rjmp	.+3226   	; 0xccc <__bad_interrupt>
      32:	00 00       	nop
      34:	4b c6       	rjmp	.+3222   	; 0xccc <__bad_interrupt>
      36:	00 00       	nop
      38:	49 c6       	rjmp	.+3218   	; 0xccc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	47 c6       	rjmp	.+3214   	; 0xccc <__bad_interrupt>
      3e:	00 00       	nop
      40:	45 c6       	rjmp	.+3210   	; 0xccc <__bad_interrupt>
      42:	00 00       	nop
      44:	43 c6       	rjmp	.+3206   	; 0xccc <__bad_interrupt>
      46:	00 00       	nop
      48:	41 c6       	rjmp	.+3202   	; 0xccc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3f c6       	rjmp	.+3198   	; 0xccc <__bad_interrupt>
      4e:	00 00       	nop
      50:	3d c6       	rjmp	.+3194   	; 0xccc <__bad_interrupt>
      52:	00 00       	nop
      54:	3b c6       	rjmp	.+3190   	; 0xccc <__bad_interrupt>
      56:	00 00       	nop
      58:	39 c6       	rjmp	.+3186   	; 0xccc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	37 c6       	rjmp	.+3182   	; 0xccc <__bad_interrupt>
      5e:	00 00       	nop
      60:	35 c6       	rjmp	.+3178   	; 0xccc <__bad_interrupt>
      62:	00 00       	nop
      64:	33 c6       	rjmp	.+3174   	; 0xccc <__bad_interrupt>
	...

00000068 <u8g_dev_ssd13xx_sleep_off>:
      68:	ff e0 ff d1 af ff 32 ff d0 ff fe                    ......2....

00000073 <u8g_dev_ssd13xx_sleep_on>:
      73:	ff e0 ff d1 ae ff d0 ff fe                          .........

0000007c <u8g_dev_ssd1306_128x64_data_start>:
      7c:	ff e0 ff d1 10 00 ff fe                             ........

00000084 <u8g_dev_ssd1306_128x64_adafruit2_init_seq>:
      84:	ff d0 ff e0 ff c1 ff d1 ae d5 80 a8 3f d3 00 40     ............?..@
      94:	8d 14 20 00 a1 c8 da 12 81 cf d9 f1 db 40 2e a4     .. ..........@..
      a4:	a6 af ff d0 ff fe                                   ......

000000aa <u8g_font_courR10>:
      aa:	00 0e 14 fd fb 09 01 e0 03 dc 20 ff fd 0c fd 0a     .......... .....
      ba:	fd 00 00 00 09 00 01 01 09 09 09 03 00 80 80 80     ................
      ca:	80 80 80 00 80 80 04 04 04 09 02 06 90 90 90 90     ................
      da:	05 0a 0a 09 02 ff 50 50 50 f8 50 50 f8 50 50 50     ......PPP.PP.PPP
      ea:	05 0d 0d 09 02 fe 20 20 78 88 80 c0 30 08 88 f0     ......  x...0...
      fa:	20 20 20 08 0a 0a 09 00 00 60 90 90 73 0c 30 cc        ......`..s.0.
     10a:	12 12 0c 06 08 08 09 01 00 38 40 40 40 a8 90 98     .........8@@@...
     11a:	64 01 04 04 09 03 05 80 80 80 80 03 0c 0c 09 03     d...............
     12a:	fe 20 40 40 80 80 80 80 80 80 40 40 20 03 0c 0c     . @@......@@ ...
     13a:	09 02 fe 80 40 40 20 20 20 20 20 20 40 40 80 05     ....@@      @@..
     14a:	06 06 09 01 03 20 20 f8 20 50 88 07 07 07 09 01     .....  . P......
     15a:	01 10 10 10 fe 10 10 10 03 04 04 09 02 fe 60 60     ..............``
     16a:	c0 80 06 01 01 09 01 04 fc 02 02 02 09 03 00 c0     ................
     17a:	c0 06 0b 0b 09 01 ff 04 08 08 10 10 20 20 40 40     ............  @@
     18a:	80 80 06 0a 0a 09 01 00 30 48 84 84 84 84 84 84     ........0H......
     19a:	48 30 05 0a 0a 09 01 00 20 60 a0 20 20 20 20 20     H0...... `.     
     1aa:	20 f8 05 0a 0a 09 01 00 70 88 88 08 10 20 40 80      .......p.... @.
     1ba:	88 f8 06 0a 0a 09 01 00 38 44 04 04 18 04 04 04     ........8D......
     1ca:	84 78 06 0a 0a 09 01 00 18 28 28 48 48 88 88 fc     .x.......((HH...
     1da:	08 1c 06 0a 0a 09 01 00 7c 40 40 40 78 04 04 04     ........|@@@x...
     1ea:	84 78 06 0a 0a 09 01 00 38 40 80 80 b8 c4 84 84     .x......8@......
     1fa:	44 38 06 0a 0a 09 01 00 fc 84 04 08 08 08 10 10     D8..............
     20a:	10 10 05 0a 0a 09 02 00 70 88 88 88 70 88 88 88     ........p...p...
     21a:	88 70 06 0a 0a 09 01 00 70 88 84 84 8c 74 04 04     .p......p....t..
     22a:	08 70 02 07 07 09 03 00 c0 c0 00 00 00 c0 c0 03     .p..............
     23a:	09 09 09 02 fe 60 60 00 00 00 60 60 c0 80 07 07     .....``...``....
     24a:	07 09 00 01 06 18 60 80 60 18 06 07 03 03 09 01     ......`.`.......
     25a:	03 fe 00 fe 07 07 07 09 01 01 c0 30 0c 02 0c 30     ...........0...0
     26a:	c0 05 09 09 09 01 00 70 88 08 08 30 20 00 20 20     .......p...0 .  
     27a:	07 0a 0a 09 01 ff 38 44 84 9c a4 a4 9e 80 40 38     ......8D......@8
     28a:	09 09 12 09 ff 00 38 00 08 00 14 00 14 00 22 00     ......8.......".
     29a:	3e 00 41 00 41 00 f7 80 07 09 09 09 00 00 fc 42     >.A.A..........B
     2aa:	42 42 7c 42 42 42 fc 07 09 09 09 01 00 3a 46 82     BB|BBB.......:F.
     2ba:	80 80 80 80 42 3c 08 09 09 09 00 00 fc 42 41 41     ....B<.......BAA
     2ca:	41 41 41 42 fc 07 09 09 09 01 00 fe 42 42 48 78     AAAB........BBHx
     2da:	48 42 42 fe 07 09 09 09 01 00 fe 42 42 48 78 48     HBB........BBHxH
     2ea:	40 40 f0 08 09 09 09 00 00 3a 46 82 80 80 8f 82     @@.......:F.....
     2fa:	42 3c 08 09 09 09 00 00 e7 42 42 42 7e 42 42 42     B<.......BBB~BBB
     30a:	e7 05 09 09 09 02 00 f8 20 20 20 20 20 20 20 f8     ........       .
     31a:	07 09 09 09 01 00 3e 08 08 08 08 88 88 88 70 08     ......>.......p.
     32a:	09 09 09 00 00 ee 44 48 50 70 48 44 44 e3 08 09     ......DHPpHDD...
     33a:	09 09 00 00 f8 20 20 20 20 21 21 21 ff 09 09 12     .....    !!!....
     34a:	09 00 00 e3 80 63 00 55 00 55 00 49 00 49 00 41     .....c.U.U.I.I.A
     35a:	00 41 00 e3 80 08 09 09 09 00 00 e7 62 52 52 4a     .A..........bRRJ
     36a:	4a 46 46 e2 08 09 09 09 00 00 3c 42 81 81 81 81     JFF.......<B....
     37a:	81 42 3c 07 09 09 09 01 00 fc 42 42 42 42 7c 40     .B<.......BBBB|@
     38a:	40 f0 08 0b 0b 09 00 fe 3c 42 81 81 81 81 81 42     @.......<B.....B
     39a:	3c 31 5e 08 09 09 09 00 00 fc 42 42 42 44 78 44     <1^.......BBBDxD
     3aa:	42 e1 06 09 09 09 01 00 74 8c 84 80 78 04 84 c4     B.......t...x...
     3ba:	b8 07 09 09 09 01 00 fe 92 92 10 10 10 10 10 7c     ...............|
     3ca:	08 09 09 09 00 00 e7 42 42 42 42 42 42 42 3c 09     .......BBBBBBB<.
     3da:	09 12 09 00 00 e3 80 41 00 41 00 22 00 22 00 14     .......A.A."."..
     3ea:	00 14 00 08 00 08 00 09 09 12 09 00 00 e3 80 41     ...............A
     3fa:	00 49 00 49 00 55 00 55 00 22 00 22 00 22 00 08     .I.I.U.U."."."..
     40a:	09 09 09 00 00 e7 42 24 24 18 24 24 42 e7 07 09     ......B$$.$$B...
     41a:	09 09 00 00 ee 44 44 28 28 10 10 10 7c 06 09 09     .....DD((...|...
     42a:	09 01 00 fc 84 88 10 20 20 44 84 fc 03 0c 0c 09     .......  D......
     43a:	03 fe e0 80 80 80 80 80 80 80 80 80 80 e0 06 0b     ................
     44a:	0b 09 01 ff 80 40 40 20 20 10 10 08 08 04 04 03     .....@@  .......
     45a:	0c 0c 09 02 fe e0 20 20 20 20 20 20 20 20 20 20     ......          
     46a:	e0 05 05 05 09 02 04 20 50 50 88 88 09 01 02 09     ....... PP......
     47a:	00 fd ff 80 04 02 02 09 02 08 c0 30 07 07 07 09     ...........0....
     48a:	01 00 78 84 04 7c 84 84 7a 08 0a 0a 09 00 00 c0     ..x..|..z.......
     49a:	40 40 5c 62 41 41 41 62 dc 07 07 07 09 01 00 3a     @@\bAAAb.......:
     4aa:	46 82 80 80 42 3c 08 0a 0a 09 00 00 06 02 02 3a     F...B<.........:
     4ba:	46 82 82 82 46 3b 07 07 07 09 01 00 38 44 82 fe     F...F;......8D..
     4ca:	80 42 3c 07 0a 0a 09 01 00 1e 20 20 fc 20 20 20     .B<.......  .   
     4da:	20 20 f8 08 0a 0a 09 00 fd 3b 46 82 82 82 46 3a       .......;F...F:
     4ea:	02 04 78 08 0a 0a 09 00 00 c0 40 40 5c 62 42 42     ..x.......@@\bBB
     4fa:	42 42 e7 05 0a 0a 09 02 00 20 20 00 e0 20 20 20     BB.......  ..   
     50a:	20 20 f8 05 0d 0d 09 01 fd 08 08 00 f8 08 08 08       ..............
     51a:	08 08 08 08 10 e0 07 0a 0a 09 01 00 c0 40 40 4e     .............@@N
     52a:	48 50 60 50 48 ce 05 0a 0a 09 02 00 e0 20 20 20     HP`PH........   
     53a:	20 20 20 20 20 f8 09 07 0e 09 00 00 db 00 6d 00          .........m.
     54a:	49 00 49 00 49 00 49 00 ed 80 08 07 07 09 00 00     I.I.I.I.........
     55a:	dc 62 42 42 42 42 e7 08 07 07 09 00 00 3c 42 81     .bBBBB.......<B.
     56a:	81 81 42 3c 08 0a 0a 09 00 fd dc 62 41 41 41 62     ..B<.......bAAAb
     57a:	5c 40 40 f0 08 0a 0a 09 00 fd 3b 46 82 82 82 46     \@@.......;F...F
     58a:	3a 02 02 0f 07 07 07 09 01 00 cc 52 60 40 40 40     :..........R`@@@
     59a:	f8 06 07 07 09 01 00 7c 84 80 78 04 84 f8 07 09     .......|..x.....
     5aa:	09 09 00 00 20 20 fc 20 20 20 20 22 1c 08 07 07     ....  .    "....
     5ba:	09 00 00 c6 42 42 42 42 46 3b 08 07 07 09 00 00     ....BBBBF;......
     5ca:	e7 42 42 24 24 18 18 09 07 0e 09 00 00 e3 80 41     .BB$$..........A
     5da:	00 49 00 49 00 2a 00 36 00 22 00 07 07 07 09 00     .I.I.*.6."......
     5ea:	00 ee 44 28 10 28 44 ee 08 0a 0a 09 00 fd e7 42     ..D(.(D........B
     5fa:	42 24 24 18 08 10 10 78 05 07 07 09 02 00 f8 88     B$$....x........
     60a:	10 20 40 88 f8 03 0c 0c 09 02 fe 20 40 40 40 40     . @........ @@@@
     61a:	80 40 40 40 40 40 20 01 0b 0b 09 03 fe 80 80 80     .@@@@@ .........
     62a:	80 80 80 80 80 80 80 80 03 0c 0c 09 02 fe 80 40     ...............@
     63a:	40 40 40 20 40 40 40 40 40 80 06 02 02 09 01 03     @@@ @@@@@.......
     64a:	64 98 ff ff ff ff ff ff ff ff ff ff ff ff ff ff     d...............
     65a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     66a:	ff ff ff 00 00 00 09 00 01 01 09 09 09 04 fe 80     ................
     67a:	80 00 80 80 80 80 80 80 05 09 09 09 02 00 20 20     ..............  
     68a:	78 88 80 88 70 20 20 07 09 09 09 01 00 18 24 20     x...p  .......$ 
     69a:	20 78 20 20 42 fc 06 06 06 09 01 01 b4 48 84 84      x  B........H..
     6aa:	48 b4 07 09 09 09 01 00 ee 44 44 28 7c 10 7c 10     H........DD(|.|.
     6ba:	38 01 0b 0b 09 03 fe 80 80 80 80 00 00 80 80 80     8...............
     6ca:	80 80 06 0a 0a 09 01 ff 3c 44 40 f0 88 44 3c 08     ........<D@..D<.
     6da:	88 f0 05 01 01 09 02 08 d8 08 09 09 09 00 00 3c     ...............<
     6ea:	42 99 a5 a1 a5 99 42 3c 04 06 06 09 02 03 c0 20     B.....B<....... 
     6fa:	e0 b0 00 f0 08 07 07 09 00 00 11 22 44 cc 44 22     ..........."D.D"
     70a:	11 07 03 03 09 01 03 fe 02 02 06 01 01 09 01 04     ................
     71a:	fc 08 09 09 09 00 00 3c 42 b9 a5 b9 a9 a5 42 3c     .......<B.....B<
     72a:	04 01 01 09 02 08 f0 04 04 04 09 02 06 60 90 90     .............`..
     73a:	60 07 07 07 09 01 01 10 10 fe 10 10 00 fe 04 06     `...............
     74a:	06 09 02 04 60 90 10 20 40 f0 04 06 06 09 02 04     ....`.. @.......
     75a:	60 90 60 10 90 60 04 02 02 09 02 08 30 c0 08 0a     `.`..`......0...
     76a:	0a 09 00 fd c6 42 42 42 42 46 7b 40 40 40 07 0a     .....BBBBF{@@@..
     77a:	0a 09 01 ff 7e 94 94 94 74 14 14 14 14 3e 02 02     ....~...t....>..
     78a:	02 09 03 03 c0 c0 03 03 03 09 02 fd 40 20 e0 03     ............@ ..
     79a:	06 06 09 03 04 40 c0 40 40 40 e0 04 06 06 09 02     .....@.@@@......
     7aa:	03 60 90 90 60 00 f0 08 07 07 09 00 00 88 44 22     .`..`.........D"
     7ba:	33 22 44 88 0a 0a 14 09 ff 00 40 00 c1 00 42 00     3"D.......@...B.
     7ca:	44 00 44 80 e9 80 12 80 14 80 27 c0 40 80 0a 0a     D.D.......'.@...
     7da:	14 09 ff 00 40 00 c1 00 42 00 44 00 45 80 ea 40     ....@...B.D.E..@
     7ea:	10 40 10 80 21 00 43 c0 0a 0a 14 09 ff 00 60 00     .@..!.C.......`.
     7fa:	91 00 62 00 14 00 94 80 69 80 12 80 14 80 27 c0     ..b.....i.....'.
     80a:	40 80 05 09 09 09 02 fe 20 20 00 20 60 80 80 88     @.......  . `...
     81a:	70 09 0c 18 09 00 00 30 00 0c 00 00 00 38 00 08     p......0.....8..
     82a:	00 14 00 14 00 22 00 3e 00 41 00 41 00 f7 80 09     .....".>.A.A....
     83a:	0c 18 09 00 00 0c 00 30 00 00 00 38 00 08 00 14     .......0...8....
     84a:	00 14 00 22 00 3e 00 41 00 41 00 f7 80 09 0c 18     ...".>.A.A......
     85a:	09 00 00 08 00 14 00 00 00 38 00 08 00 14 00 14     .........8......
     86a:	00 22 00 3e 00 41 00 41 00 f7 80 09 0c 18 09 00     .".>.A.A........
     87a:	00 1a 00 2c 00 00 00 38 00 08 00 14 00 14 00 22     ...,...8......."
     88a:	00 3e 00 41 00 41 00 f7 80 09 0b 16 09 00 00 36     .>.A.A.........6
     89a:	00 00 00 38 00 08 00 14 00 14 00 22 00 3e 00 41     ...8.......".>.A
     8aa:	00 41 00 f7 80 09 0c 18 09 00 00 18 00 24 00 18     .A...........$..
     8ba:	00 38 00 08 00 14 00 14 00 22 00 3e 00 41 00 41     .8.......".>.A.A
     8ca:	00 f7 80 09 09 12 09 ff 00 1f 80 0c 80 14 00 14     ................
     8da:	80 27 80 3c 80 44 00 44 80 ef 80 07 0c 0c 09 01     .'.<.D.D........
     8ea:	fd 3a 46 82 80 80 80 80 42 3c 10 08 38 07 0c 0c     .:F.....B<..8...
     8fa:	09 01 00 60 18 00 fe 42 42 48 78 48 42 42 fe 07     ...`...BBHxHBB..
     90a:	0c 0c 09 01 00 0c 30 00 fe 42 42 48 78 48 42 42     ......0..BBHxHBB
     91a:	fe 07 0c 0c 09 01 00 10 28 00 fe 42 42 48 78 48     ........(..BBHxH
     92a:	42 42 fe 07 0b 0b 09 01 00 6c 00 fe 42 42 48 78     BB.......l..BBHx
     93a:	48 42 42 fe 05 0c 0c 09 02 00 c0 30 00 f8 20 20     HBB........0..  
     94a:	20 20 20 20 20 f8 05 0c 0c 09 02 00 18 60 00 f8          ........`..
     95a:	20 20 20 20 20 20 20 f8 05 0c 0c 09 02 00 20 50            ....... P
     96a:	00 f8 20 20 20 20 20 20 20 f8 05 0b 0b 09 02 00     ..       .......
     97a:	d8 00 f8 20 20 20 20 20 20 20 f8 08 09 09 09 00     ...       ......
     98a:	00 fc 42 41 41 f1 41 41 42 fc 08 0c 0c 09 00 00     ..BAA.AAB.......
     99a:	1a 2c 00 e7 62 52 52 4a 4a 46 46 e2 08 0c 0c 09     .,..bRRJJFF.....
     9aa:	00 00 30 0c 00 3c 42 81 81 81 81 81 42 3c 08 0c     ..0..<B.....B<..
     9ba:	0c 09 00 00 0c 30 00 3c 42 81 81 81 81 81 42 3c     .....0.<B.....B<
     9ca:	08 0c 0c 09 00 00 10 28 00 3c 42 81 81 81 81 81     .......(.<B.....
     9da:	42 3c 08 0c 0c 09 00 00 1a 2c 00 3c 42 81 81 81     B<.......,.<B...
     9ea:	81 81 42 3c 08 0b 0b 09 00 00 66 00 3c 42 81 81     ..B<......f.<B..
     9fa:	81 81 81 42 3c 07 07 07 09 01 01 82 44 28 10 28     ...B<.......D(.(
     a0a:	44 82 09 09 12 09 ff 00 1e 80 21 00 42 80 44 80     D.........!.B.D.
     a1a:	48 80 50 80 20 80 61 00 9e 00 08 0c 0c 09 00 00     H.P. .a.........
     a2a:	30 0c 00 e7 42 42 42 42 42 42 42 3c 08 0c 0c 09     0...BBBBBBB<....
     a3a:	00 00 0c 30 00 e7 42 42 42 42 42 42 42 3c 08 0c     ...0..BBBBBBB<..
     a4a:	0c 09 00 00 10 28 00 e7 42 42 42 42 42 42 42 3c     .....(..BBBBBBB<
     a5a:	08 0b 0b 09 00 00 66 00 e7 42 42 42 42 42 42 42     ......f..BBBBBBB
     a6a:	3c 07 0c 0c 09 01 00 0c 30 00 ee 44 44 28 28 10     <.......0..DD((.
     a7a:	10 10 7c 07 09 09 09 00 00 e0 40 7c 42 42 42 7c     ..|.......@|BBB|
     a8a:	40 e0 07 09 09 09 00 00 38 44 44 58 44 42 42 52     @.......8DDXDBBR
     a9a:	cc 07 0a 0a 09 01 00 60 18 00 78 84 04 7c 84 8c     .......`..x..|..
     aaa:	76 07 0a 0a 09 01 00 18 60 00 78 84 04 7c 84 8c     v.......`.x..|..
     aba:	76 07 0a 0a 09 01 00 10 28 00 78 84 04 7c 84 8c     v.......(.x..|..
     aca:	76 07 0a 0a 09 01 00 34 58 00 78 84 04 7c 84 8c     v......4X.x..|..
     ada:	76 07 09 09 09 01 00 6c 00 78 84 04 7c 84 8c 76     v......l.x..|..v
     aea:	07 0a 0a 09 01 00 30 48 30 78 84 04 7c 84 8c 76     ......0H0x..|..v
     afa:	08 07 07 09 00 00 76 89 09 7f 88 89 76 07 0a 0a     ......v.....v...
     b0a:	09 01 fd 3a 46 82 80 80 42 3c 10 08 38 07 0a 0a     ...:F...B<..8...
     b1a:	09 01 00 60 18 00 38 44 82 fe 80 42 3c 07 0a 0a     ...`..8D...B<...
     b2a:	09 01 00 0c 30 00 38 44 82 fe 80 42 3c 07 0a 0a     ....0.8D...B<...
     b3a:	09 01 00 10 28 00 38 44 82 fe 80 42 3c 07 09 09     ....(.8D...B<...
     b4a:	09 01 00 6c 00 38 44 82 fe 80 42 3c 05 0a 0a 09     ...l.8D...B<....
     b5a:	02 00 c0 30 00 e0 20 20 20 20 20 f8 05 0a 0a 09     ...0..     .....
     b6a:	02 00 30 c0 00 e0 20 20 20 20 20 f8 05 0a 0a 09     ..0...     .....
     b7a:	02 00 20 50 00 e0 20 20 20 20 20 f8 05 09 09 09     .. P..     .....
     b8a:	02 00 d8 00 e0 20 20 20 20 20 f8 08 0c 0c 09 00     .....     ......
     b9a:	00 02 e4 18 28 44 3c 42 81 81 81 42 3c 08 0a 0a     ....(D<B...B<...
     baa:	09 00 00 1a 2c 00 dc 62 42 42 42 42 e7 08 0a 0a     ....,..bBBBB....
     bba:	09 00 00 30 0c 00 3c 42 81 81 81 42 3c 08 0a 0a     ...0..<B...B<...
     bca:	09 00 00 0c 30 00 3c 42 81 81 81 42 3c 08 0a 0a     ....0.<B...B<...
     bda:	09 00 00 10 28 00 3c 42 81 81 81 42 3c 08 0a 0a     ....(.<B...B<...
     bea:	09 00 00 1a 2c 00 3c 42 81 81 81 42 3c 08 09 09     ....,.<B...B<...
     bfa:	09 00 00 6c 00 3c 42 81 81 81 42 3c 08 07 07 09     ...l.<B...B<....
     c0a:	00 01 18 18 00 ff 00 18 18 08 07 07 09 00 00 3d     ...............=
     c1a:	46 89 91 a1 42 bc 08 0a 0a 09 00 00 30 0c 00 c6     F...B.......0...
     c2a:	42 42 42 42 46 3b 08 0a 0a 09 00 00 0c 30 00 c6     BBBBF;.......0..
     c3a:	42 42 42 42 46 3b 08 0a 0a 09 00 00 10 28 00 c6     BBBBF;.......(..
     c4a:	42 42 42 42 46 3b 08 09 09 09 00 00 6c 00 c6 42     BBBBF;......l..B
     c5a:	42 42 42 46 3b 08 0d 0d 09 00 fd 06 18 00 e7 42     BBBF;..........B
     c6a:	42 24 24 18 08 10 10 78 08 0c 0c 09 00 fd c0 40     B$$....x.......@
     c7a:	5c 62 41 41 41 62 5c 40 40 f0 08 0c 0c 09 00 fd     \bAAAb\@@.......
     c8a:	36 00 e7 42 42 24 24 18 08 10 10 78                 6..BB$$....x

00000c96 <__ctors_end>:
     c96:	11 24       	eor	r1, r1
     c98:	1f be       	out	0x3f, r1	; 63
     c9a:	cf ef       	ldi	r28, 0xFF	; 255
     c9c:	d8 e0       	ldi	r29, 0x08	; 8
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	cd bf       	out	0x3d, r28	; 61

00000ca2 <__do_copy_data>:
     ca2:	11 e0       	ldi	r17, 0x01	; 1
     ca4:	a0 e0       	ldi	r26, 0x00	; 0
     ca6:	b1 e0       	ldi	r27, 0x01	; 1
     ca8:	e6 e6       	ldi	r30, 0x66	; 102
     caa:	f8 e1       	ldi	r31, 0x18	; 24
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <__do_copy_data+0x10>
     cae:	05 90       	lpm	r0, Z+
     cb0:	0d 92       	st	X+, r0
     cb2:	ae 30       	cpi	r26, 0x0E	; 14
     cb4:	b1 07       	cpc	r27, r17
     cb6:	d9 f7       	brne	.-10     	; 0xcae <__do_copy_data+0xc>

00000cb8 <__do_clear_bss>:
     cb8:	11 e0       	ldi	r17, 0x01	; 1
     cba:	ae e0       	ldi	r26, 0x0E	; 14
     cbc:	b1 e0       	ldi	r27, 0x01	; 1
     cbe:	01 c0       	rjmp	.+2      	; 0xcc2 <.do_clear_bss_start>

00000cc0 <.do_clear_bss_loop>:
     cc0:	1d 92       	st	X+, r1

00000cc2 <.do_clear_bss_start>:
     cc2:	a8 3c       	cpi	r26, 0xC8	; 200
     cc4:	b1 07       	cpc	r27, r17
     cc6:	e1 f7       	brne	.-8      	; 0xcc0 <.do_clear_bss_loop>
     cc8:	bf d0       	rcall	.+382    	; 0xe48 <main>
     cca:	cb c5       	rjmp	.+2966   	; 0x1862 <_exit>

00000ccc <__bad_interrupt>:
     ccc:	99 c9       	rjmp	.-3278   	; 0x0 <__vectors>

00000cce <u8g_i2c_set_error>:

#if defined(__AVR__)

static void u8g_i2c_set_error(uint8_t code, uint8_t pos)
{
  if ( u8g_i2c_err_code > 0 )
     cce:	90 91 10 01 	lds	r25, 0x0110
     cd2:	91 11       	cpse	r25, r1
     cd4:	04 c0       	rjmp	.+8      	; 0xcde <u8g_i2c_set_error+0x10>
    return;
  u8g_i2c_err_code |= code;
     cd6:	80 93 10 01 	sts	0x0110, r24
  u8g_i2c_err_pos = pos;
     cda:	60 93 0e 01 	sts	0x010E, r22
     cde:	08 95       	ret

00000ce0 <u8g_i2c_clear_error>:
static uint8_t u8g_i2c_err_pos;


void u8g_i2c_clear_error(void)
{
  u8g_i2c_err_code = U8G_I2C_ERR_NONE;
     ce0:	10 92 10 01 	sts	0x0110, r1
  u8g_i2c_err_pos = 0;
     ce4:	10 92 0e 01 	sts	0x010E, r1
     ce8:	08 95       	ret

00000cea <u8g_i2c_init>:
    TWSR = 0;
	--> 400KHz

    F_CPU/(2*100000)-8  --> calculate TWBR value for 100KHz
*/
  u8g_i2c_opt = options;
     cea:	80 93 0f 01 	sts	0x010F, r24
  TWSR = 0;
     cee:	10 92 b9 00 	sts	0x00B9, r1
  if ( options & U8G_I2C_OPT_FAST )
     cf2:	84 ff       	sbrs	r24, 4
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <u8g_i2c_init+0x10>
  {
    TWBR = F_CPU/(2*400000)-8;
     cf6:	8c e0       	ldi	r24, 0x0C	; 12
     cf8:	01 c0       	rjmp	.+2      	; 0xcfc <u8g_i2c_init+0x12>
  }
  else
  {  
    TWBR = F_CPU/(2*100000)-8;
     cfa:	88 e4       	ldi	r24, 0x48	; 72
     cfc:	80 93 b8 00 	sts	0x00B8, r24
  }
  u8g_i2c_clear_error();
     d00:	ef cf       	rjmp	.-34     	; 0xce0 <u8g_i2c_clear_error>

00000d02 <u8g_i2c_wait>:
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
     d02:	a2 e0       	ldi	r26, 0x02	; 2
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e6 e8       	ldi	r30, 0x86	; 134
     d08:	f6 e0       	ldi	r31, 0x06	; 6
     d0a:	84 c5       	rjmp	.+2824   	; 0x1814 <__prologue_saves__+0x20>
     d0c:	20 ed       	ldi	r18, 0xD0	; 208
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
     d0e:	37 e0       	ldi	r19, 0x07	; 7
     d10:	3a 83       	std	Y+2, r19	; 0x02
	{
	  u8g_i2c_set_error(U8G_I2C_ERR_TIMEOUT, pos);
	  return 0; /* error */
	}
      }
      cnt--;
     d12:	29 83       	std	Y+1, r18	; 0x01
     d14:	90 91 bc 00 	lds	r25, 0x00BC
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
  while( !(TWCR & mask) )
     d18:	98 23       	and	r25, r24
     d1a:	89 f4       	brne	.+34     	; 0xd3e <u8g_i2c_wait+0x3c>
     d1c:	29 81       	ldd	r18, Y+1	; 0x01
  {
      if ( cnt == 0 )
     d1e:	3a 81       	ldd	r19, Y+2	; 0x02
     d20:	23 2b       	or	r18, r19
     d22:	41 f4       	brne	.+16     	; 0xd34 <u8g_i2c_wait+0x32>
     d24:	80 91 0f 01 	lds	r24, 0x010F
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
     d28:	81 fd       	sbrc	r24, 1
     d2a:	09 c0       	rjmp	.+18     	; 0xd3e <u8g_i2c_wait+0x3c>
     d2c:	81 e0       	ldi	r24, 0x01	; 1
	{
	  return 1;	/* all ok */
	}
	else
	{
	  u8g_i2c_set_error(U8G_I2C_ERR_TIMEOUT, pos);
     d2e:	cf df       	rcall	.-98     	; 0xcce <u8g_i2c_set_error>
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	06 c0       	rjmp	.+12     	; 0xd40 <u8g_i2c_wait+0x3e>
	  return 0; /* error */
     d34:	29 81       	ldd	r18, Y+1	; 0x01
     d36:	3a 81       	ldd	r19, Y+2	; 0x02
	}
      }
      cnt--;
     d38:	21 50       	subi	r18, 0x01	; 1
     d3a:	31 09       	sbc	r19, r1
     d3c:	e9 cf       	rjmp	.-46     	; 0xd10 <u8g_i2c_wait+0xe>
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	22 96       	adiw	r28, 0x02	; 2
  {
      if ( cnt == 0 )
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
	{
	  return 1;	/* all ok */
     d42:	e2 e0       	ldi	r30, 0x02	; 2
	}
      }
      cnt--;
    }
  return 1;	/* all ok */
}
     d44:	83 c5       	rjmp	.+2822   	; 0x184c <__epilogue_restores__+0x20>

00000d46 <u8g_i2c_start>:

/* sla includes all 8 bits (with r/w bit), assums master transmit */
uint8_t u8g_i2c_start(uint8_t sla)
{
     d46:	cf 93       	push	r28
     d48:	c8 2f       	mov	r28, r24
  register uint8_t status;
  
  /* send start */
  TWCR = _BV(TWINT) |  _BV(TWSTA)  |  _BV(TWEN);
     d4a:	84 ea       	ldi	r24, 0xA4	; 164
     d4c:	80 93 bc 00 	sts	0x00BC, r24
   
  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 1) == 0 )
     d50:	61 e0       	ldi	r22, 0x01	; 1
     d52:	80 e8       	ldi	r24, 0x80	; 128
     d54:	d6 df       	rcall	.-84     	; 0xd02 <u8g_i2c_wait>
     d56:	88 23       	and	r24, r24
     d58:	f9 f0       	breq	.+62     	; 0xd98 <u8g_i2c_start+0x52>
     d5a:	90 91 b9 00 	lds	r25, 0x00B9
    return 0;
  
  status = TW_STATUS;
     d5e:	98 7f       	andi	r25, 0xF8	; 248
     d60:	98 30       	cpi	r25, 0x08	; 8
 
  /* check status after start */  
  if ( status != TW_START && status != TW_REP_START )
     d62:	21 f0       	breq	.+8      	; 0xd6c <u8g_i2c_start+0x26>
     d64:	90 31       	cpi	r25, 0x10	; 16
     d66:	11 f0       	breq	.+4      	; 0xd6c <u8g_i2c_start+0x26>
     d68:	61 e0       	ldi	r22, 0x01	; 1
  {
    u8g_i2c_set_error(U8G_I2C_ERR_BUS, 1);
     d6a:	14 c0       	rjmp	.+40     	; 0xd94 <u8g_i2c_start+0x4e>
     d6c:	c0 93 bb 00 	sts	0x00BB, r28
    return 0;
  }

  /* set slave address */  
  TWDR = sla;
     d70:	84 e8       	ldi	r24, 0x84	; 132
  
  /* enable sla transfer */
  TWCR = _BV(TWINT)  |  _BV(TWEN);
     d72:	80 93 bc 00 	sts	0x00BC, r24
     d76:	62 e0       	ldi	r22, 0x02	; 2

  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 2) == 0 )
     d78:	80 e8       	ldi	r24, 0x80	; 128
     d7a:	c3 df       	rcall	.-122    	; 0xd02 <u8g_i2c_wait>
     d7c:	88 23       	and	r24, r24
     d7e:	61 f0       	breq	.+24     	; 0xd98 <u8g_i2c_start+0x52>
     d80:	80 91 0f 01 	lds	r24, 0x010F
    return 0;

  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
     d84:	81 fd       	sbrc	r24, 1
     d86:	0a c0       	rjmp	.+20     	; 0xd9c <u8g_i2c_start+0x56>
     d88:	80 91 b9 00 	lds	r24, 0x00B9
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;
     d8c:	88 7f       	andi	r24, 0xF8	; 248
     d8e:	88 31       	cpi	r24, 0x18	; 24
     d90:	29 f0       	breq	.+10     	; 0xd9c <u8g_i2c_start+0x56>
    /* check status after sla */  
    if ( status != TW_MT_SLA_ACK )
     d92:	62 e0       	ldi	r22, 0x02	; 2
     d94:	82 e0       	ldi	r24, 0x02	; 2
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 2);
     d96:	9b df       	rcall	.-202    	; 0xcce <u8g_i2c_set_error>
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	01 c0       	rjmp	.+2      	; 0xd9e <u8g_i2c_start+0x58>
     d9c:	81 e0       	ldi	r24, 0x01	; 1
      return 0;
     d9e:	cf 91       	pop	r28
     da0:	08 95       	ret

00000da2 <u8g_i2c_send_byte>:
}

uint8_t u8g_i2c_send_byte(uint8_t data)
{
  register uint8_t status;
  TWDR = data;
     da2:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = _BV(TWINT)  |  _BV(TWEN);
     da6:	84 e8       	ldi	r24, 0x84	; 132
     da8:	80 93 bc 00 	sts	0x00BC, r24
  if ( u8g_i2c_wait(_BV(TWINT), 3) == 0 )
     dac:	63 e0       	ldi	r22, 0x03	; 3
     dae:	80 e8       	ldi	r24, 0x80	; 128
     db0:	a8 df       	rcall	.-176    	; 0xd02 <u8g_i2c_wait>
     db2:	88 23       	and	r24, r24
     db4:	61 f0       	breq	.+24     	; 0xdce <u8g_i2c_send_byte+0x2c>
     db6:	80 91 0f 01 	lds	r24, 0x010F
    return 0;
    
  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
     dba:	81 fd       	sbrc	r24, 1
     dbc:	0a c0       	rjmp	.+20     	; 0xdd2 <u8g_i2c_send_byte+0x30>
     dbe:	80 91 b9 00 	lds	r24, 0x00B9
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;  
     dc2:	88 7f       	andi	r24, 0xF8	; 248
     dc4:	88 32       	cpi	r24, 0x28	; 40
    if ( status != TW_MT_DATA_ACK )
     dc6:	29 f0       	breq	.+10     	; 0xdd2 <u8g_i2c_send_byte+0x30>
     dc8:	63 e0       	ldi	r22, 0x03	; 3
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 3);
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	80 df       	rcall	.-256    	; 0xcce <u8g_i2c_set_error>
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	08 95       	ret
{
  register uint8_t status;
  TWDR = data;
  TWCR = _BV(TWINT)  |  _BV(TWEN);
  if ( u8g_i2c_wait(_BV(TWINT), 3) == 0 )
    return 0;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	08 95       	ret

00000dd6 <u8g_i2c_stop>:
}

void u8g_i2c_stop(void)
{
  /* write stop */
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
     dd6:	84 e9       	ldi	r24, 0x94	; 148
     dd8:	80 93 bc 00 	sts	0x00BC, r24

  /* no error is checked for the stop condition */  
  u8g_i2c_wait(_BV(TWSTO), 4);
     ddc:	64 e0       	ldi	r22, 0x04	; 4
     dde:	80 e1       	ldi	r24, 0x10	; 16
     de0:	90 cf       	rjmp	.-224    	; 0xd02 <u8g_i2c_wait>

00000de2 <u8g_setup>:

u8g_t u8g;
 
void u8g_setup(void)
{
    u8g_InitI2C(&u8g, &u8g_dev_ssd1306_128x64_i2c, U8G_I2C_OPT_NONE);
     de2:	40 e0       	ldi	r20, 0x00	; 0
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	71 e0       	ldi	r23, 0x01	; 1
     de8:	81 e9       	ldi	r24, 0x91	; 145
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	1e d2       	rcall	.+1084   	; 0x122a <u8g_InitI2C>
     dee:	61 e0       	ldi	r22, 0x01	; 1
    u8g_SetColorIndex(&u8g, 1);
     df0:	81 e9       	ldi	r24, 0x91	; 145
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	51 c2       	rjmp	.+1186   	; 0x1298 <u8g_SetColorIndex>

00000df6 <adc_init>:
}

void adc_init(void){
    ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
     df6:	ea e7       	ldi	r30, 0x7A	; 122
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	87 60       	ori	r24, 0x07	; 7
     dfe:	80 83       	st	Z, r24
    ADMUX |= (1<<REFS0);                //Voltage reference from Avcc (5v)
     e00:	ac e7       	ldi	r26, 0x7C	; 124
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	8c 91       	ld	r24, X
     e06:	80 64       	ori	r24, 0x40	; 64
     e08:	8c 93       	st	X, r24
    ADCSRA |= (1<<ADEN);                //Turn on ADC
     e0a:	80 81       	ld	r24, Z
     e0c:	80 68       	ori	r24, 0x80	; 128
     e0e:	80 83       	st	Z, r24
    ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
     e10:	80 81       	ld	r24, Z
     e12:	80 64       	ori	r24, 0x40	; 64
     e14:	80 83       	st	Z, r24
     e16:	08 95       	ret

00000e18 <read_adc>:
}

uint16_t read_adc(uint8_t channel){
    ADMUX &= 0xF0;                    //Clear the older channel that was read
     e18:	90 91 7c 00 	lds	r25, 0x007C
     e1c:	90 7f       	andi	r25, 0xF0	; 240
     e1e:	90 93 7c 00 	sts	0x007C, r25
    ADMUX |= channel;                //Defines the new ADC channel to be read
     e22:	90 91 7c 00 	lds	r25, 0x007C
     e26:	98 2b       	or	r25, r24
     e28:	90 93 7c 00 	sts	0x007C, r25
    ADCSRA |= (1<<ADSC);                //Starts a new conversion
     e2c:	80 91 7a 00 	lds	r24, 0x007A
     e30:	80 64       	ori	r24, 0x40	; 64
     e32:	80 93 7a 00 	sts	0x007A, r24
    while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done
     e36:	80 91 7a 00 	lds	r24, 0x007A
     e3a:	86 fd       	sbrc	r24, 6
     e3c:	fc cf       	rjmp	.-8      	; 0xe36 <read_adc+0x1e>
    return ADCW;                    //Returns the ADC value of the chosen channel
     e3e:	80 91 78 00 	lds	r24, 0x0078
     e42:	90 91 79 00 	lds	r25, 0x0079
}
     e46:	08 95       	ret

00000e48 <main>:

int main(void)
{
    CLKPR=0x80;
     e48:	80 e8       	ldi	r24, 0x80	; 128
     e4a:	80 93 61 00 	sts	0x0061, r24
    uint16_t acc_y_val = 0;
    int x_coor = 60;
    int y_coor = 30;
    int draw = 0;

    adc_init();
     e4e:	d3 df       	rcall	.-90     	; 0xdf6 <adc_init>
     e50:	c8 df       	rcall	.-112    	; 0xde2 <u8g_setup>
    u8g_setup();
     e52:	6a ea       	ldi	r22, 0xAA	; 170
     e54:	70 e0       	ldi	r23, 0x00	; 0
    u8g_SetFont(&u8g, u8g_font_courR10);
     e56:	81 e9       	ldi	r24, 0x91	; 145
     e58:	91 e0       	ldi	r25, 0x01	; 1
     e5a:	da d0       	rcall	.+436    	; 0x1010 <u8g_SetFont>
     e5c:	00 e0       	ldi	r16, 0x00	; 0
     e5e:	10 e0       	ldi	r17, 0x00	; 0
     e60:	8e e1       	ldi	r24, 0x1E	; 30
    CLKPR=0x80;
    uint16_t acc_x_val = 0;
    uint16_t acc_y_val = 0;
    int x_coor = 60;
    int y_coor = 30;
    int draw = 0;
     e62:	e8 2e       	mov	r14, r24
     e64:	f1 2c       	mov	r15, r1
{
    CLKPR=0x80;
    uint16_t acc_x_val = 0;
    uint16_t acc_y_val = 0;
    int x_coor = 60;
    int y_coor = 30;
     e66:	cc e3       	ldi	r28, 0x3C	; 60
     e68:	d0 e0       	ldi	r29, 0x00	; 0
     e6a:	87 e0       	ldi	r24, 0x07	; 7
int main(void)
{
    CLKPR=0x80;
    uint16_t acc_x_val = 0;
    uint16_t acc_y_val = 0;
    int x_coor = 60;
     e6c:	d5 df       	rcall	.-86     	; 0xe18 <read_adc>
     e6e:	89 30       	cpi	r24, 0x09	; 9
    u8g_setup();
    u8g_SetFont(&u8g, u8g_font_courR10);

    while(1)
    {
        acc_x_val = read_adc(7);
     e70:	22 e0       	ldi	r18, 0x02	; 2
     e72:	92 07       	cpc	r25, r18
     e74:	10 f0       	brcs	.+4      	; 0xe7a <main+0x32>
        if (acc_x_val > 520)
     e76:	21 97       	sbiw	r28, 0x01	; 1
     e78:	04 c0       	rjmp	.+8      	; 0xe82 <main+0x3a>
     e7a:	8a 3e       	cpi	r24, 0xEA	; 234
     e7c:	91 40       	sbci	r25, 0x01	; 1
            x_coor--;
     e7e:	08 f4       	brcc	.+2      	; 0xe82 <main+0x3a>
     e80:	21 96       	adiw	r28, 0x01	; 1
        else if (acc_x_val < 490)
     e82:	86 e0       	ldi	r24, 0x06	; 6
     e84:	c9 df       	rcall	.-110    	; 0xe18 <read_adc>
     e86:	89 30       	cpi	r24, 0x09	; 9
            x_coor++;
     e88:	22 e0       	ldi	r18, 0x02	; 2
        acc_y_val = read_adc(6);
     e8a:	92 07       	cpc	r25, r18
     e8c:	20 f0       	brcs	.+8      	; 0xe96 <main+0x4e>
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
        if (acc_y_val > 520)
     e90:	e8 1a       	sub	r14, r24
     e92:	f8 0a       	sbc	r15, r24
     e94:	06 c0       	rjmp	.+12     	; 0xea2 <main+0x5a>
     e96:	8a 3e       	cpi	r24, 0xEA	; 234
            y_coor++;
     e98:	91 40       	sbci	r25, 0x01	; 1
     e9a:	18 f4       	brcc	.+6      	; 0xea2 <main+0x5a>
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	e8 1a       	sub	r14, r24
        else if (acc_y_val < 490)
     ea0:	f1 08       	sbc	r15, r1
     ea2:	81 e9       	ldi	r24, 0x91	; 145
     ea4:	91 e0       	ldi	r25, 0x01	; 1
            y_coor--;
     ea6:	d4 d1       	rcall	.+936    	; 0x1250 <u8g_FirstPage>
     ea8:	03 30       	cpi	r16, 0x03	; 3
     eaa:	11 05       	cpc	r17, r1
        u8g_FirstPage(&u8g);
     eac:	71 f4       	brne	.+28     	; 0xeca <main+0x82>
     eae:	03 e0       	ldi	r16, 0x03	; 3
     eb0:	23 e0       	ldi	r18, 0x03	; 3
     eb2:	4e 2d       	mov	r20, r14
        if (draw == 3){
     eb4:	6c 2f       	mov	r22, r28
     eb6:	81 e9       	ldi	r24, 0x91	; 145
     eb8:	91 e0       	ldi	r25, 0x01	; 1
        do
        {
            u8g_DrawBox(&u8g, x_coor,y_coor, 3,3);
     eba:	40 d3       	rcall	.+1664   	; 0x153c <u8g_DrawBox>
     ebc:	81 e9       	ldi	r24, 0x91	; 145
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	cb d1       	rcall	.+918    	; 0x1258 <u8g_NextPage>
     ec2:	81 11       	cpse	r24, r1
     ec4:	f4 cf       	rjmp	.-24     	; 0xeae <main+0x66>
     ec6:	00 e0       	ldi	r16, 0x00	; 0
     ec8:	10 e0       	ldi	r17, 0x00	; 0
        }while(u8g_NextPage(&u8g));
     eca:	0f 5f       	subi	r16, 0xFF	; 255
     ecc:	1f 4f       	sbci	r17, 0xFF	; 255
     ece:	cd cf       	rjmp	.-102    	; 0xe6a <main+0x22>

00000ed0 <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
     ed0:	a0 e0       	ldi	r26, 0x00	; 0
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	ed e6       	ldi	r30, 0x6D	; 109
     ed6:	f7 e0       	ldi	r31, 0x07	; 7
     ed8:	96 c4       	rjmp	.+2348   	; 0x1806 <__prologue_saves__+0x12>
     eda:	8c 01       	movw	r16, r24
     edc:	eb 01       	movw	r28, r22
     ede:	b4 2e       	mov	r11, r20
     ee0:	69 01       	movw	r12, r18
     ee2:	80 e1       	ldi	r24, 0x10	; 16
  switch(msg)
     ee4:	48 17       	cp	r20, r24
     ee6:	79 f1       	breq	.+94     	; 0xf46 <u8g_dev_ssd1306_128x64_fn+0x76>
     ee8:	84 17       	cp	r24, r20
     eea:	60 f0       	brcs	.+24     	; 0xf04 <u8g_dev_ssd1306_128x64_fn+0x34>
     eec:	ea e0       	ldi	r30, 0x0A	; 10
     eee:	4e 13       	cpse	r20, r30
     ef0:	34 c0       	rjmp	.+104    	; 0xf5a <u8g_dev_ssd1306_128x64_fn+0x8a>
     ef2:	42 e0       	ldi	r20, 0x02	; 2
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
     ef4:	c8 01       	movw	r24, r16
     ef6:	5b d3       	rcall	.+1718   	; 0x15ae <u8g_InitCom>
     ef8:	44 e8       	ldi	r20, 0x84	; 132
     efa:	50 e0       	ldi	r21, 0x00	; 0
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
     efc:	be 01       	movw	r22, r28
     efe:	c8 01       	movw	r24, r16
     f00:	9c d3       	rcall	.+1848   	; 0x163a <u8g_WriteEscSeqP>
     f02:	2b c0       	rjmp	.+86     	; 0xf5a <u8g_dev_ssd1306_128x64_fn+0x8a>
     f04:	f1 e1       	ldi	r31, 0x11	; 17
     f06:	4f 17       	cp	r20, r31
      break;
     f08:	09 f1       	breq	.+66     	; 0xf4c <u8g_dev_ssd1306_128x64_fn+0x7c>
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
     f0a:	85 e1       	ldi	r24, 0x15	; 21
     f0c:	48 13       	cpse	r20, r24
     f0e:	25 c0       	rjmp	.+74     	; 0xf5a <u8g_dev_ssd1306_128x64_fn+0x8a>
     f10:	ea 80       	ldd	r14, Y+2	; 0x02
     f12:	fb 80       	ldd	r15, Y+3	; 0x03
     f14:	4c e7       	ldi	r20, 0x7C	; 124
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	c8 01       	movw	r24, r16
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
     f1a:	8f d3       	rcall	.+1822   	; 0x163a <u8g_WriteEscSeqP>
     f1c:	f7 01       	movw	r30, r14
     f1e:	44 81       	ldd	r20, Z+4	; 0x04
     f20:	40 6b       	ori	r20, 0xB0	; 176
     f22:	be 01       	movw	r22, r28
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
     f24:	c8 01       	movw	r24, r16
     f26:	77 d3       	rcall	.+1774   	; 0x1616 <u8g_WriteByte>
     f28:	41 e0       	ldi	r20, 0x01	; 1
     f2a:	be 01       	movw	r22, r28
     f2c:	c8 01       	movw	r24, r16
     f2e:	69 d3       	rcall	.+1746   	; 0x1602 <u8g_SetAddress>
     f30:	ae 01       	movw	r20, r28
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
     f32:	b8 01       	movw	r22, r16
     f34:	c7 01       	movw	r24, r14
     f36:	a6 d2       	rcall	.+1356   	; 0x1484 <u8g_pb_WriteBuffer>
     f38:	88 23       	and	r24, r24
     f3a:	a9 f0       	breq	.+42     	; 0xf66 <u8g_dev_ssd1306_128x64_fn+0x96>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
     f3c:	40 e0       	ldi	r20, 0x00	; 0
     f3e:	be 01       	movw	r22, r28
     f40:	c8 01       	movw	r24, r16
     f42:	3f d3       	rcall	.+1662   	; 0x15c2 <u8g_SetChipSelect>
     f44:	0a c0       	rjmp	.+20     	; 0xf5a <u8g_dev_ssd1306_128x64_fn+0x8a>
     f46:	43 e7       	ldi	r20, 0x73	; 115
     f48:	50 e0       	ldi	r21, 0x00	; 0
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <u8g_dev_ssd1306_128x64_fn+0x80>
     f4c:	48 e6       	ldi	r20, 0x68	; 104
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	be 01       	movw	r22, r28
     f52:	c8 01       	movw	r24, r16
      }
      break;
     f54:	72 d3       	rcall	.+1764   	; 0x163a <u8g_WriteEscSeqP>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	07 c0       	rjmp	.+14     	; 0xf68 <u8g_dev_ssd1306_128x64_fn+0x98>
     f5a:	96 01       	movw	r18, r12
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
     f5c:	4b 2d       	mov	r20, r11
     f5e:	be 01       	movw	r22, r28
     f60:	c8 01       	movw	r24, r16
     f62:	0b d2       	rcall	.+1046   	; 0x137a <u8g_dev_pb8v1_base_fn>
     f64:	01 c0       	rjmp	.+2      	; 0xf68 <u8g_dev_ssd1306_128x64_fn+0x98>
     f66:	80 e0       	ldi	r24, 0x00	; 0
      return 1;
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
     f6c:	e9 e0       	ldi	r30, 0x09	; 9
     f6e:	67 c4       	rjmp	.+2254   	; 0x183e <__epilogue_restores__+0x12>

00000f70 <u8g_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
  return 0;
}
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	08 95       	ret

00000f74 <u8g_UpdateRefHeight>:

/*========================================================================*/
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
     f74:	dc 01       	movw	r26, r24
  uint16_t ls;
  if ( u8g->font == NULL )
     f76:	14 96       	adiw	r26, 0x04	; 4
     f78:	8d 91       	ld	r24, X+
     f7a:	9c 91       	ld	r25, X
     f7c:	15 97       	sbiw	r26, 0x05	; 5
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	09 f4       	brne	.+2      	; 0xf84 <u8g_UpdateRefHeight+0x10>
     f82:	3f c0       	rjmp	.+126    	; 0x1002 <u8g_UpdateRefHeight+0x8e>
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
     f84:	57 96       	adiw	r26, 0x17	; 23
     f86:	2c 91       	ld	r18, X
     f88:	57 97       	sbiw	r26, 0x17	; 23

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
     f8a:	fc 01       	movw	r30, r24
void u8g_UpdateRefHeight(u8g_t *u8g)
{
  uint16_t ls;
  if ( u8g->font == NULL )
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
     f8c:	21 11       	cpse	r18, r1
     f8e:	08 c0       	rjmp	.+16     	; 0xfa0 <u8g_UpdateRefHeight+0x2c>

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
     f90:	35 96       	adiw	r30, 0x05	; 5
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
     f92:	e4 91       	lpm	r30, Z
  uint16_t ls;
  if ( u8g->font == NULL )
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
     f94:	58 96       	adiw	r26, 0x18	; 24
     f96:	ec 93       	st	X, r30
     f98:	58 97       	sbiw	r26, 0x18	; 24

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
     f9a:	fc 01       	movw	r30, r24
     f9c:	3c 96       	adiw	r30, 0x0c	; 12
     f9e:	11 c0       	rjmp	.+34     	; 0xfc2 <u8g_UpdateRefHeight+0x4e>
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
     fa0:	21 30       	cpi	r18, 0x01	; 1
     fa2:	41 f4       	brne	.+16     	; 0xfb4 <u8g_UpdateRefHeight+0x40>

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
     fa4:	3f 96       	adiw	r30, 0x0f	; 15
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
     fa6:	e4 91       	lpm	r30, Z
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
     fa8:	58 96       	adiw	r26, 0x18	; 24
     faa:	ec 93       	st	X, r30
     fac:	58 97       	sbiw	r26, 0x18	; 24

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
     fae:	fc 01       	movw	r30, r24
     fb0:	70 96       	adiw	r30, 0x10	; 16
     fb2:	07 c0       	rjmp	.+14     	; 0xfc2 <u8g_UpdateRefHeight+0x4e>
     fb4:	3d 96       	adiw	r30, 0x0d	; 13
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
     fb6:	e4 91       	lpm	r30, Z
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
     fb8:	58 96       	adiw	r26, 0x18	; 24
     fba:	ec 93       	st	X, r30
     fbc:	58 97       	sbiw	r26, 0x18	; 24

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
     fbe:	fc 01       	movw	r30, r24
     fc0:	3e 96       	adiw	r30, 0x0e	; 14
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
     fc2:	84 91       	lpm	r24, Z
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
     fc4:	59 96       	adiw	r26, 0x19	; 25
     fc6:	8c 93       	st	X, r24
     fc8:	59 97       	sbiw	r26, 0x19	; 25
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
     fca:	58 96       	adiw	r26, 0x18	; 24
     fcc:	8c 91       	ld	r24, X
     fce:	58 97       	sbiw	r26, 0x18	; 24
     fd0:	99 27       	eor	r25, r25
     fd2:	87 fd       	sbrc	r24, 7
     fd4:	90 95       	com	r25
     fd6:	59 96       	adiw	r26, 0x19	; 25
     fd8:	2c 91       	ld	r18, X
     fda:	59 97       	sbiw	r26, 0x19	; 25
     fdc:	82 1b       	sub	r24, r18
     fde:	91 09       	sbc	r25, r1
     fe0:	27 fd       	sbrc	r18, 7
     fe2:	93 95       	inc	r25
  if ( u8g->font_line_spacing_factor != 64 )
     fe4:	5a 96       	adiw	r26, 0x1a	; 26
     fe6:	2c 91       	ld	r18, X
     fe8:	5a 97       	sbiw	r26, 0x1a	; 26
     fea:	20 34       	cpi	r18, 0x40	; 64
     fec:	41 f0       	breq	.+16     	; 0xffe <u8g_UpdateRefHeight+0x8a>
  {
    ls &= 255;
    ls *= u8g->font_line_spacing_factor;
     fee:	82 9f       	mul	r24, r18
     ff0:	c0 01       	movw	r24, r0
     ff2:	11 24       	eor	r1, r1
    ls >>= 6;
     ff4:	f6 e0       	ldi	r31, 0x06	; 6
     ff6:	96 95       	lsr	r25
     ff8:	87 95       	ror	r24
     ffa:	fa 95       	dec	r31
     ffc:	e1 f7       	brne	.-8      	; 0xff6 <u8g_UpdateRefHeight+0x82>
  }
  u8g->line_spacing = ls;
     ffe:	5b 96       	adiw	r26, 0x1b	; 27
    1000:	8c 93       	st	X, r24
    1002:	08 95       	ret

00001004 <u8g_SetFontPosBaseline>:
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
    1004:	28 eb       	ldi	r18, 0xB8	; 184
    1006:	37 e0       	ldi	r19, 0x07	; 7
    1008:	fc 01       	movw	r30, r24
    100a:	36 8b       	std	Z+22, r19	; 0x16
    100c:	25 8b       	std	Z+21, r18	; 0x15
    100e:	08 95       	ret

00001010 <u8g_SetFont>:
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	ec 01       	movw	r28, r24
  if ( u8g->font != font )
    1016:	8c 81       	ldd	r24, Y+4	; 0x04
    1018:	9d 81       	ldd	r25, Y+5	; 0x05
    101a:	86 17       	cp	r24, r22
    101c:	97 07       	cpc	r25, r23
    101e:	41 f0       	breq	.+16     	; 0x1030 <u8g_SetFont+0x20>
  {
    u8g->font = font;
    1020:	7d 83       	std	Y+5, r23	; 0x05
    1022:	6c 83       	std	Y+4, r22	; 0x04
    u8g_UpdateRefHeight(u8g);
    1024:	ce 01       	movw	r24, r28
    1026:	a6 df       	rcall	.-180    	; 0xf74 <u8g_UpdateRefHeight>
    1028:	88 eb       	ldi	r24, 0xB8	; 184
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
    102a:	97 e0       	ldi	r25, 0x07	; 7
    102c:	9e 8b       	std	Y+22, r25	; 0x16
    102e:	8d 8b       	std	Y+21, r24	; 0x15
    1030:	df 91       	pop	r29
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
    u8g_SetFontPosBaseline(u8g);
  }
}
    1032:	cf 91       	pop	r28
    1034:	08 95       	ret

00001036 <u8g_init_data>:
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
}

static void u8g_init_data(u8g_t *u8g)
{
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	ec 01       	movw	r28, r24
  u8g->font = NULL;
    103e:	1d 82       	std	Y+5, r1	; 0x05
    1040:	1c 82       	std	Y+4, r1	; 0x04
  u8g->cursor_font = NULL;
    1042:	1f 82       	std	Y+7, r1	; 0x07
    1044:	1e 82       	std	Y+6, r1	; 0x06
  u8g->cursor_bg_color = 0;
    1046:	19 86       	std	Y+9, r1	; 0x09
  u8g->cursor_fg_color = 1;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	88 87       	std	Y+8, r24	; 0x08
  u8g->cursor_encoding = 34;
    104c:	82 e2       	ldi	r24, 0x22	; 34
    104e:	8a 87       	std	Y+10, r24	; 0x0a
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
    1050:	1f 86       	std	Y+15, r1	; 0x0f
    1052:	1e 86       	std	Y+14, r1	; 0x0e
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	90 e0       	ldi	r25, 0x00	; 0

#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_NONE;
    1058:	2f ef       	ldi	r18, 0xFF	; 255
    105a:	fe 01       	movw	r30, r28
    105c:	e8 0f       	add	r30, r24
    105e:	f9 1f       	adc	r31, r25
    1060:	23 a3       	std	Z+35, r18	; 0x23
    1062:	01 96       	adiw	r24, 0x01	; 1
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;

#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
    1064:	8e 30       	cpi	r24, 0x0E	; 14
    1066:	91 05       	cpc	r25, r1
    1068:	c1 f7       	brne	.-16     	; 0x105a <u8g_init_data+0x24>
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
    106a:	11 e0       	ldi	r17, 0x01	; 1
    106c:	18 a3       	std	Y+32, r17	; 0x20
  }
#endif
  
  u8g_SetColorIndex(u8g, 1);

  u8g_SetFontPosBaseline(u8g);
    106e:	ce 01       	movw	r24, r28
    1070:	c9 df       	rcall	.-110    	; 0x1004 <u8g_SetFontPosBaseline>
    1072:	1f 8b       	std	Y+23, r17	; 0x17
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
    1074:	18 8e       	std	Y+24, r1	; 0x18
  u8g->font_ref_ascent = 0;
    1076:	19 8e       	std	Y+25, r1	; 0x19
  u8g->font_ref_descent = 0;
    1078:	80 e4       	ldi	r24, 0x40	; 64
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
    107a:	8a 8f       	std	Y+26, r24	; 0x1a
    107c:	1b 8e       	std	Y+27, r1	; 0x1b
  u8g->line_spacing = 0;
    107e:	84 eb       	ldi	r24, 0xB4	; 180
  
  u8g->state_cb = u8g_state_dummy_cb;
    1080:	9a e0       	ldi	r25, 0x0A	; 10
    1082:	9a ab       	std	Y+50, r25	; 0x32
    1084:	89 ab       	std	Y+49, r24	; 0x31
    1086:	df 91       	pop	r29

}
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	08 95       	ret

0000108e <u8g_call_dev_fn>:
#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  return dev->dev_fn(u8g, dev, msg, arg); 
    108e:	db 01       	movw	r26, r22
    1090:	ed 91       	ld	r30, X+
    1092:	fc 91       	ld	r31, X
    1094:	09 95       	icall
}
    1096:	08 95       	ret

00001098 <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
    1098:	ef 92       	push	r14
    109a:	ff 92       	push	r15
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <u8g_InitLL+0xc>
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	7c 01       	movw	r14, r24
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
    10aa:	dc 01       	movw	r26, r24
    10ac:	d1 96       	adiw	r26, 0x31	; 49
    10ae:	ed 91       	ld	r30, X+
    10b0:	fc 91       	ld	r31, X
    10b2:	d2 97       	sbiw	r26, 0x32	; 50
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	69 83       	std	Y+1, r22	; 0x01
    10b8:	7a 83       	std	Y+2, r23	; 0x02
    10ba:	09 95       	icall
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	4a e0       	ldi	r20, 0x0A	; 10
    10c2:	69 81       	ldd	r22, Y+1	; 0x01
    10c4:	7a 81       	ldd	r23, Y+2	; 0x02
    10c6:	c7 01       	movw	r24, r14
    10c8:	e2 df       	rcall	.-60     	; 0x108e <u8g_call_dev_fn>
    10ca:	18 2f       	mov	r17, r24
    10cc:	d7 01       	movw	r26, r14
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
    10ce:	d1 96       	adiw	r26, 0x31	; 49
    10d0:	ed 91       	ld	r30, X+
    10d2:	fc 91       	ld	r31, X
    10d4:	d2 97       	sbiw	r26, 0x32	; 50
    10d6:	83 e0       	ldi	r24, 0x03	; 3
    10d8:	09 95       	icall
    10da:	d7 01       	movw	r26, r14
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
    10dc:	d1 96       	adiw	r26, 0x31	; 49
    10de:	ed 91       	ld	r30, X+
    10e0:	fc 91       	ld	r31, X
    10e2:	d2 97       	sbiw	r26, 0x32	; 50
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	09 95       	icall
    10e8:	81 2f       	mov	r24, r17
  return r;
}
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	1f 91       	pop	r17
    10f4:	ff 90       	pop	r15
    10f6:	ef 90       	pop	r14
    10f8:	08 95       	ret

000010fa <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
    10fa:	0f 93       	push	r16
    10fc:	1f 93       	push	r17
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	ec 01       	movw	r28, r24
    1104:	8b 01       	movw	r16, r22
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
    1106:	e9 a9       	ldd	r30, Y+49	; 0x31
    1108:	fa a9       	ldd	r31, Y+50	; 0x32
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	09 95       	icall
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
    110e:	e9 a9       	ldd	r30, Y+49	; 0x31
    1110:	fa a9       	ldd	r31, Y+50	; 0x32
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	09 95       	icall
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	44 e1       	ldi	r20, 0x14	; 20
    111c:	b8 01       	movw	r22, r16
    111e:	ce 01       	movw	r24, r28
    1120:	b6 df       	rcall	.-148    	; 0x108e <u8g_call_dev_fn>
    1122:	9e 01       	movw	r18, r28
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
    1124:	2d 5c       	subi	r18, 0xCD	; 205
    1126:	3f 4f       	sbci	r19, 0xFF	; 255
    1128:	47 e1       	ldi	r20, 0x17	; 23
    112a:	b8 01       	movw	r22, r16
    112c:	ce 01       	movw	r24, r28
    112e:	af df       	rcall	.-162    	; 0x108e <u8g_call_dev_fn>
    1130:	e9 a9       	ldd	r30, Y+49	; 0x31
    1132:	fa a9       	ldd	r31, Y+50	; 0x32
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	09 95       	icall
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
}
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	08 95       	ret

00001142 <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
    1142:	ff 92       	push	r15
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	ec 01       	movw	r28, r24
    114e:	8b 01       	movw	r16, r22
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
    1150:	e9 a9       	ldd	r30, Y+49	; 0x31
    1152:	fa a9       	ldd	r31, Y+50	; 0x32
    1154:	82 e0       	ldi	r24, 0x02	; 2
    1156:	09 95       	icall
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
    1158:	e9 a9       	ldd	r30, Y+49	; 0x31
    115a:	fa a9       	ldd	r31, Y+50	; 0x32
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	09 95       	icall
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	45 e1       	ldi	r20, 0x15	; 21
    1166:	b8 01       	movw	r22, r16
    1168:	ce 01       	movw	r24, r28
    116a:	91 df       	rcall	.-222    	; 0x108e <u8g_call_dev_fn>
    116c:	f8 2e       	mov	r15, r24
    116e:	88 23       	and	r24, r24
  if ( r != 0 )
    1170:	39 f0       	breq	.+14     	; 0x1180 <u8g_NextPageLL+0x3e>
    1172:	9e 01       	movw	r18, r28
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
    1174:	2d 5c       	subi	r18, 0xCD	; 205
    1176:	3f 4f       	sbci	r19, 0xFF	; 255
    1178:	47 e1       	ldi	r20, 0x17	; 23
    117a:	b8 01       	movw	r22, r16
    117c:	ce 01       	movw	r24, r28
    117e:	87 df       	rcall	.-242    	; 0x108e <u8g_call_dev_fn>
    1180:	e9 a9       	ldd	r30, Y+49	; 0x31
    1182:	fa a9       	ldd	r31, Y+50	; 0x32
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	09 95       	icall
    1188:	8f 2d       	mov	r24, r15
    118a:	cd b7       	in	r28, 0x3d	; 61
  return r;
}
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	e5 e0       	ldi	r30, 0x05	; 5
    1190:	5a c3       	rjmp	.+1716   	; 0x1846 <__epilogue_restores__+0x1a>

00001192 <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
    1192:	a1 e0       	ldi	r26, 0x01	; 1
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	ee ec       	ldi	r30, 0xCE	; 206
    1198:	f8 e0       	ldi	r31, 0x08	; 8
    119a:	3c c3       	rjmp	.+1656   	; 0x1814 <__prologue_saves__+0x20>
    119c:	9e 01       	movw	r18, r28
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
    119e:	2f 5f       	subi	r18, 0xFF	; 255
    11a0:	3f 4f       	sbci	r19, 0xFF	; 255
    11a2:	46 e4       	ldi	r20, 0x46	; 70
    11a4:	74 df       	rcall	.-280    	; 0x108e <u8g_call_dev_fn>
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	21 96       	adiw	r28, 0x01	; 1
  return r;
}
    11aa:	e2 e0       	ldi	r30, 0x02	; 2
    11ac:	4f c3       	rjmp	.+1694   	; 0x184c <__epilogue_restores__+0x20>

000011ae <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
    11ae:	a1 e0       	ldi	r26, 0x01	; 1
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	ec ed       	ldi	r30, 0xDC	; 220
    11b4:	f8 e0       	ldi	r31, 0x08	; 8
    11b6:	2e c3       	rjmp	.+1628   	; 0x1814 <__prologue_saves__+0x20>
    11b8:	9e 01       	movw	r18, r28
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
    11ba:	2f 5f       	subi	r18, 0xFF	; 255
    11bc:	3f 4f       	sbci	r19, 0xFF	; 255
    11be:	47 e4       	ldi	r20, 0x47	; 71
    11c0:	66 df       	rcall	.-308    	; 0x108e <u8g_call_dev_fn>
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	21 96       	adiw	r28, 0x01	; 1
  return r;
}
    11c6:	e2 e0       	ldi	r30, 0x02	; 2
    11c8:	41 c3       	rjmp	.+1666   	; 0x184c <__epilogue_restores__+0x20>

000011ca <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	48 e4       	ldi	r20, 0x48	; 72
    11d0:	5e cf       	rjmp	.-324    	; 0x108e <u8g_call_dev_fn>

000011d2 <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	ec 01       	movw	r28, r24
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
    11d8:	6a 81       	ldd	r22, Y+2	; 0x02
    11da:	7b 81       	ldd	r23, Y+3	; 0x03
    11dc:	da df       	rcall	.-76     	; 0x1192 <u8g_GetWidthLL>
    11de:	88 83       	st	Y, r24
    11e0:	6a 81       	ldd	r22, Y+2	; 0x02
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
    11e2:	7b 81       	ldd	r23, Y+3	; 0x03
    11e4:	ce 01       	movw	r24, r28
    11e6:	e3 df       	rcall	.-58     	; 0x11ae <u8g_GetHeightLL>
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	6a 81       	ldd	r22, Y+2	; 0x02
    11ec:	7b 81       	ldd	r23, Y+3	; 0x03
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
    11ee:	ce 01       	movw	r24, r28
    11f0:	ec df       	rcall	.-40     	; 0x11ca <u8g_GetModeLL>
    11f2:	8b 87       	std	Y+11, r24	; 0x0b
    11f4:	9e 01       	movw	r18, r28
    11f6:	2d 5c       	subi	r18, 0xCD	; 205
    11f8:	3f 4f       	sbci	r19, 0xFF	; 255
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
    11fa:	6a 81       	ldd	r22, Y+2	; 0x02
    11fc:	7b 81       	ldd	r23, Y+3	; 0x03
    11fe:	47 e1       	ldi	r20, 0x17	; 23
    1200:	ce 01       	movw	r24, r28
    1202:	45 df       	rcall	.-374    	; 0x108e <u8g_call_dev_fn>
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	08 95       	ret

0000120a <u8g_Begin>:
  u8g->state_cb = u8g_state_dummy_cb;

}

uint8_t u8g_Begin(u8g_t *u8g)
{
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	ec 01       	movw	r28, r24
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
    1210:	6a 81       	ldd	r22, Y+2	; 0x02
    1212:	7b 81       	ldd	r23, Y+3	; 0x03
    1214:	41 df       	rcall	.-382    	; 0x1098 <u8g_InitLL>
    1216:	88 23       	and	r24, r24
    1218:	21 f0       	breq	.+8      	; 0x1222 <u8g_Begin+0x18>
    121a:	ce 01       	movw	r24, r28
    return 0;
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
    121c:	da df       	rcall	.-76     	; 0x11d2 <u8g_UpdateDimension>
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	01 c0       	rjmp	.+2      	; 0x1224 <u8g_Begin+0x1a>
  return 1;
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	df 91       	pop	r29

uint8_t u8g_Begin(u8g_t *u8g)
{
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
    return 0;
    1226:	cf 91       	pop	r28
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
  return 1;
}
    1228:	08 95       	ret

0000122a <u8g_InitI2C>:
  
  return u8g_Begin(u8g);
}

uint8_t u8g_InitI2C(u8g_t *u8g, u8g_dev_t *dev, uint8_t options)
{
    122a:	a1 e0       	ldi	r26, 0x01	; 1
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	ea e1       	ldi	r30, 0x1A	; 26
    1230:	f9 e0       	ldi	r31, 0x09	; 9
    1232:	ec c2       	rjmp	.+1496   	; 0x180c <__prologue_saves__+0x18>
    1234:	7c 01       	movw	r14, r24
    1236:	8b 01       	movw	r16, r22
    1238:	49 83       	std	Y+1, r20	; 0x01
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
    123a:	fd de       	rcall	.-518    	; 0x1036 <u8g_init_data>
    123c:	f7 01       	movw	r30, r14
    123e:	13 83       	std	Z+3, r17	; 0x03
  u8g->dev = dev;
    1240:	02 83       	std	Z+2, r16	; 0x02
    1242:	49 81       	ldd	r20, Y+1	; 0x01
    1244:	46 a7       	std	Z+46, r20	; 0x2e
    
  u8g->pin_list[U8G_PI_I2C_OPTION] = options;
    1246:	c7 01       	movw	r24, r14
    1248:	e0 df       	rcall	.-64     	; 0x120a <u8g_Begin>
  
  return u8g_Begin(u8g);
    124a:	21 96       	adiw	r28, 0x01	; 1
    124c:	e6 e0       	ldi	r30, 0x06	; 6
    124e:	fa c2       	rjmp	.+1524   	; 0x1844 <__epilogue_restores__+0x18>

00001250 <u8g_FirstPage>:
}
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
  u8g_FirstPageLL(u8g, u8g->dev);
    1250:	fc 01       	movw	r30, r24
    1252:	62 81       	ldd	r22, Z+2	; 0x02
    1254:	73 81       	ldd	r23, Z+3	; 0x03
    1256:	51 cf       	rjmp	.-350    	; 0x10fa <u8g_FirstPageLL>

00001258 <u8g_NextPage>:
}

uint8_t u8g_NextPage(u8g_t *u8g)
{
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	ec 01       	movw	r28, r24
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
    125e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1260:	ff 85       	ldd	r31, Y+15	; 0x0f
    1262:	30 97       	sbiw	r30, 0x00	; 0
    1264:	09 f0       	breq	.+2      	; 0x1268 <u8g_NextPage+0x10>
  {
    u8g->cursor_fn(u8g);
    1266:	09 95       	icall
  }
  return u8g_NextPageLL(u8g, u8g->dev);
    1268:	6a 81       	ldd	r22, Y+2	; 0x02
    126a:	7b 81       	ldd	r23, Y+3	; 0x03
    126c:	ce 01       	movw	r24, r28
    126e:	69 df       	rcall	.-302    	; 0x1142 <u8g_NextPageLL>
    1270:	df 91       	pop	r29
}
    1272:	cf 91       	pop	r28
    1274:	08 95       	ret

00001276 <u8g_Draw8Pixel>:
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
    1276:	0f 93       	push	r16
    1278:	fc 01       	movw	r30, r24
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
    127a:	82 81       	ldd	r24, Z+2	; 0x02
    127c:	93 81       	ldd	r25, Z+3	; 0x03
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
    127e:	64 8f       	std	Z+28, r22	; 0x1c
  arg->y = y;
    1280:	45 8f       	std	Z+29, r20	; 0x1d
  arg->dir = dir;
    1282:	27 8f       	std	Z+31, r18	; 0x1f
  arg->pixel = pixel;
    1284:	06 8f       	std	Z+30, r16	; 0x1e
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
    1286:	9f 01       	movw	r18, r30
    1288:	24 5e       	subi	r18, 0xE4	; 228
    128a:	3f 4f       	sbci	r19, 0xFF	; 255
  arg->x = x;
  arg->y = y;
  arg->dir = dir;
  arg->pixel = pixel;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
    128c:	4b e3       	ldi	r20, 0x3B	; 59
    128e:	bc 01       	movw	r22, r24
    1290:	cf 01       	movw	r24, r30
    1292:	fd de       	rcall	.-518    	; 0x108e <u8g_call_dev_fn>
    1294:	0f 91       	pop	r16
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}
    1296:	08 95       	ret

00001298 <u8g_SetColorIndex>:
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
    1298:	fc 01       	movw	r30, r24
    129a:	60 a3       	std	Z+32, r22	; 0x20
    129c:	08 95       	ret

0000129e <u8g_pb8v1_set_pixel>:
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
  register uint8_t mask;
  uint8_t *ptr = b->buf;
    129e:	dc 01       	movw	r26, r24
    12a0:	16 96       	adiw	r26, 0x06	; 6
    12a2:	ed 91       	ld	r30, X+
    12a4:	fc 91       	ld	r31, X
    12a6:	17 97       	sbiw	r26, 0x07	; 7
  
  y -= b->p.page_y0;
    12a8:	12 96       	adiw	r26, 0x02	; 2
    12aa:	8c 91       	ld	r24, X
    12ac:	48 1b       	sub	r20, r24
  mask = 1;
  y &= 0x07;
    12ae:	47 70       	andi	r20, 0x07	; 7
  mask <<= y;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	04 2e       	mov	r0, r20
    12b6:	01 c0       	rjmp	.+2      	; 0x12ba <u8g_pb8v1_set_pixel+0x1c>
    12b8:	88 0f       	add	r24, r24
    12ba:	0a 94       	dec	r0
    12bc:	ea f7       	brpl	.-6      	; 0x12b8 <u8g_pb8v1_set_pixel+0x1a>
  ptr += x;
    12be:	e6 0f       	add	r30, r22
    12c0:	f1 1d       	adc	r31, r1
    12c2:	30 81       	ld	r19, Z
  if ( color_index )
    12c4:	22 23       	and	r18, r18
    12c6:	11 f0       	breq	.+4      	; 0x12cc <u8g_pb8v1_set_pixel+0x2e>
  {
    *ptr |= mask;
    12c8:	83 2b       	or	r24, r19
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <u8g_pb8v1_set_pixel+0x32>
  }
  else
  {
    mask ^=0xff;
    12cc:	80 95       	com	r24
    *ptr &= mask;
    12ce:	83 23       	and	r24, r19
    12d0:	80 83       	st	Z, r24
    12d2:	08 95       	ret

000012d4 <u8g_pb8v1_SetPixel>:
  }
}


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
    12d4:	fb 01       	movw	r30, r22
  if ( arg_pixel->y < b->p.page_y0 )
    12d6:	41 81       	ldd	r20, Z+1	; 0x01
    12d8:	dc 01       	movw	r26, r24
    12da:	12 96       	adiw	r26, 0x02	; 2
    12dc:	2c 91       	ld	r18, X
    12de:	12 97       	sbiw	r26, 0x02	; 2
    12e0:	42 17       	cp	r20, r18
    12e2:	60 f0       	brcs	.+24     	; 0x12fc <u8g_pb8v1_SetPixel+0x28>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
    12e4:	13 96       	adiw	r26, 0x03	; 3
    12e6:	2c 91       	ld	r18, X
    12e8:	13 97       	sbiw	r26, 0x03	; 3
    12ea:	24 17       	cp	r18, r20
    12ec:	38 f0       	brcs	.+14     	; 0x12fc <u8g_pb8v1_SetPixel+0x28>
    return;
  if ( arg_pixel->x >= b->width )
    12ee:	60 81       	ld	r22, Z
    12f0:	15 96       	adiw	r26, 0x05	; 5
    12f2:	2c 91       	ld	r18, X
    12f4:	62 17       	cp	r22, r18
    12f6:	10 f4       	brcc	.+4      	; 0x12fc <u8g_pb8v1_SetPixel+0x28>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
    12f8:	24 81       	ldd	r18, Z+4	; 0x04
    12fa:	d1 cf       	rjmp	.-94     	; 0x129e <u8g_pb8v1_set_pixel>
    12fc:	08 95       	ret

000012fe <u8g_pb8v1_Set8PixelOpt2>:
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    12fe:	cf 92       	push	r12
    1300:	df 92       	push	r13
    1302:	ff 92       	push	r15
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	00 d0       	rcall	.+0      	; 0x130e <u8g_pb8v1_Set8PixelOpt2+0x10>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	8c 01       	movw	r16, r24
    1314:	6b 01       	movw	r12, r22
  register uint8_t pixel = arg_pixel->pixel;
    1316:	fb 01       	movw	r30, r22
    1318:	f2 80       	ldd	r15, Z+2	; 0x02
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
    131a:	83 81       	ldd	r24, Z+3	; 0x03
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	39 f0       	breq	.+14     	; 0x132e <u8g_pb8v1_Set8PixelOpt2+0x30>
    1320:	70 f0       	brcs	.+28     	; 0x133e <u8g_pb8v1_Set8PixelOpt2+0x40>
    1322:	82 30       	cpi	r24, 0x02	; 2
    1324:	39 f0       	breq	.+14     	; 0x1334 <u8g_pb8v1_Set8PixelOpt2+0x36>
    1326:	83 30       	cpi	r24, 0x03	; 3
    1328:	41 f0       	breq	.+16     	; 0x133a <u8g_pb8v1_Set8PixelOpt2+0x3c>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <u8g_pb8v1_Set8PixelOpt2+0x32>
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    132e:	21 e0       	ldi	r18, 0x01	; 1


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    1330:	30 e0       	ldi	r19, 0x00	; 0
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    1332:	07 c0       	rjmp	.+14     	; 0x1342 <u8g_pb8v1_Set8PixelOpt2+0x44>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    1334:	20 e0       	ldi	r18, 0x00	; 0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    1336:	3f ef       	ldi	r19, 0xFF	; 255
    1338:	04 c0       	rjmp	.+8      	; 0x1342 <u8g_pb8v1_Set8PixelOpt2+0x44>
    case 3: dy--; break;
    133a:	2f ef       	ldi	r18, 0xFF	; 255
    133c:	f9 cf       	rjmp	.-14     	; 0x1330 <u8g_pb8v1_Set8PixelOpt2+0x32>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    133e:	20 e0       	ldi	r18, 0x00	; 0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    1340:	31 e0       	ldi	r19, 0x01	; 1
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
    1342:	f7 fe       	sbrs	r15, 7
    1344:	07 c0       	rjmp	.+14     	; 0x1354 <u8g_pb8v1_Set8PixelOpt2+0x56>
      u8g_pb8v1_SetPixel(b, arg_pixel);
    1346:	b6 01       	movw	r22, r12
    1348:	c8 01       	movw	r24, r16
    134a:	29 83       	std	Y+1, r18	; 0x01
    134c:	3a 83       	std	Y+2, r19	; 0x02
    134e:	c2 df       	rcall	.-124    	; 0x12d4 <u8g_pb8v1_SetPixel>
    1350:	3a 81       	ldd	r19, Y+2	; 0x02
    1352:	29 81       	ldd	r18, Y+1	; 0x01
    1354:	f6 01       	movw	r30, r12
    arg_pixel->x += dx;
    1356:	80 81       	ld	r24, Z
    1358:	83 0f       	add	r24, r19
    135a:	80 83       	st	Z, r24
    135c:	81 81       	ldd	r24, Z+1	; 0x01
    arg_pixel->y += dy;
    135e:	82 0f       	add	r24, r18
    1360:	81 83       	std	Z+1, r24	; 0x01
    1362:	ff 0c       	add	r15, r15
    pixel <<= 1;
    1364:	71 f7       	brne	.-36     	; 0x1342 <u8g_pb8v1_Set8PixelOpt2+0x44>
  } while( pixel != 0  );
    1366:	0f 90       	pop	r0
  
}
    1368:	0f 90       	pop	r0
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	1f 91       	pop	r17
    1370:	0f 91       	pop	r16
    1372:	ff 90       	pop	r15
    1374:	df 90       	pop	r13
    1376:	cf 90       	pop	r12
    1378:	08 95       	ret

0000137a <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	89 01       	movw	r16, r18
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    1384:	fb 01       	movw	r30, r22
    1386:	c2 81       	ldd	r28, Z+2	; 0x02
    1388:	d3 81       	ldd	r29, Z+3	; 0x03
  switch(msg)
    138a:	42 33       	cpi	r20, 0x32	; 50
    138c:	d9 f0       	breq	.+54     	; 0x13c4 <u8g_dev_pb8v1_base_fn+0x4a>
    138e:	58 f4       	brcc	.+22     	; 0x13a6 <u8g_dev_pb8v1_base_fn+0x2c>
    1390:	45 31       	cpi	r20, 0x15	; 21
    1392:	e1 f0       	breq	.+56     	; 0x13cc <u8g_dev_pb8v1_base_fn+0x52>
    1394:	47 31       	cpi	r20, 0x17	; 23
    1396:	09 f1       	breq	.+66     	; 0x13da <u8g_dev_pb8v1_base_fn+0x60>
    1398:	44 31       	cpi	r20, 0x14	; 20
    139a:	41 f5       	brne	.+80     	; 0x13ec <u8g_dev_pb8v1_base_fn+0x72>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
    139c:	ce 01       	movw	r24, r28
    139e:	2e d0       	rcall	.+92     	; 0x13fc <u8g_pb_Clear>
    13a0:	ce 01       	movw	r24, r28
      u8g_page_First(&(pb->p));
    13a2:	0b d2       	rcall	.+1046   	; 0x17ba <u8g_page_First>
    13a4:	23 c0       	rjmp	.+70     	; 0x13ec <u8g_dev_pb8v1_base_fn+0x72>
    13a6:	46 34       	cpi	r20, 0x46	; 70
    13a8:	e1 f0       	breq	.+56     	; 0x13e2 <u8g_dev_pb8v1_base_fn+0x68>
}

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
    13aa:	47 34       	cpi	r20, 0x47	; 71
    13ac:	e1 f0       	breq	.+56     	; 0x13e6 <u8g_dev_pb8v1_base_fn+0x6c>
    13ae:	4b 33       	cpi	r20, 0x3B	; 59
    13b0:	e9 f4       	brne	.+58     	; 0x13ec <u8g_dev_pb8v1_base_fn+0x72>
    13b2:	b9 01       	movw	r22, r18
    13b4:	ce 01       	movw	r24, r28
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
    13b6:	57 d0       	rcall	.+174    	; 0x1466 <u8g_pb_Is8PixelVisible>
    13b8:	88 23       	and	r24, r24
    13ba:	c1 f0       	breq	.+48     	; 0x13ec <u8g_dev_pb8v1_base_fn+0x72>
    13bc:	b8 01       	movw	r22, r16
    13be:	ce 01       	movw	r24, r28
    13c0:	9e df       	rcall	.-196    	; 0x12fe <u8g_pb8v1_Set8PixelOpt2>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
    13c2:	14 c0       	rjmp	.+40     	; 0x13ec <u8g_dev_pb8v1_base_fn+0x72>
    13c4:	b9 01       	movw	r22, r18
    13c6:	ce 01       	movw	r24, r28
    13c8:	85 df       	rcall	.-246    	; 0x12d4 <u8g_pb8v1_SetPixel>
    13ca:	10 c0       	rjmp	.+32     	; 0x13ec <u8g_dev_pb8v1_base_fn+0x72>
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    13cc:	ce 01       	movw	r24, r28
    13ce:	fc d1       	rcall	.+1016   	; 0x17c8 <u8g_page_Next>
    13d0:	88 23       	and	r24, r24
    13d2:	71 f0       	breq	.+28     	; 0x13f0 <u8g_dev_pb8v1_base_fn+0x76>
    13d4:	ce 01       	movw	r24, r28
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
    13d6:	12 d0       	rcall	.+36     	; 0x13fc <u8g_pb_Clear>
    13d8:	09 c0       	rjmp	.+18     	; 0x13ec <u8g_dev_pb8v1_base_fn+0x72>
    13da:	b9 01       	movw	r22, r18
    13dc:	ce 01       	movw	r24, r28
    13de:	33 d0       	rcall	.+102    	; 0x1446 <u8g_pb_GetPageBox>
        return 0;
      u8g_pb_Clear(pb);
    13e0:	05 c0       	rjmp	.+10     	; 0x13ec <u8g_dev_pb8v1_base_fn+0x72>
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <u8g_dev_pb8v1_base_fn+0x6e>
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    13e8:	f8 01       	movw	r30, r16
    13ea:	80 83       	st	Z, r24
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	01 c0       	rjmp	.+2      	; 0x13f2 <u8g_dev_pb8v1_base_fn+0x78>
    13f0:	80 e0       	ldi	r24, 0x00	; 0
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
    13f6:	1f 91       	pop	r17
    13f8:	0f 91       	pop	r16
    13fa:	08 95       	ret

000013fc <u8g_pb_Clear>:

#include "u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
  uint8_t *ptr = (uint8_t *)b->buf;
    13fc:	dc 01       	movw	r26, r24
    13fe:	16 96       	adiw	r26, 0x06	; 6
    1400:	ed 91       	ld	r30, X+
    1402:	fc 91       	ld	r31, X
    1404:	17 97       	sbiw	r26, 0x07	; 7
  uint8_t *end_ptr = ptr;
  end_ptr += b->width;
    1406:	15 96       	adiw	r26, 0x05	; 5
    1408:	8c 91       	ld	r24, X
    140a:	9f 01       	movw	r18, r30
    140c:	28 0f       	add	r18, r24
    140e:	31 1d       	adc	r19, r1
    1410:	c9 01       	movw	r24, r18
  do
  {
    *ptr++ = 0;
    1412:	11 92       	st	Z+, r1
  } while( ptr != end_ptr );
    1414:	e8 17       	cp	r30, r24
    1416:	f9 07       	cpc	r31, r25
    1418:	e1 f7       	brne	.-8      	; 0x1412 <u8g_pb_Clear+0x16>
}
    141a:	08 95       	ret

0000141c <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
    141c:	fc 01       	movw	r30, r24
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
    141e:	91 e0       	ldi	r25, 0x01	; 1
    1420:	83 81       	ldd	r24, Z+3	; 0x03
    1422:	86 17       	cp	r24, r22
    1424:	08 f4       	brcc	.+2      	; 0x1428 <u8g_pb_IsYIntersection+0xc>
    1426:	90 e0       	ldi	r25, 0x00	; 0
  c2 = v1 >= pb->p.page_y0;
  c3 = v0 > v1;
    1428:	21 e0       	ldi	r18, 0x01	; 1
    142a:	46 17       	cp	r20, r22
    142c:	08 f0       	brcs	.+2      	; 0x1430 <u8g_pb_IsYIntersection+0x14>
    142e:	20 e0       	ldi	r18, 0x00	; 0
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
    1430:	32 2f       	mov	r19, r18
    1432:	39 2b       	or	r19, r25

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
  c2 = v1 >= pb->p.page_y0;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	52 81       	ldd	r21, Z+2	; 0x02
    1438:	45 17       	cp	r20, r21
    143a:	08 f4       	brcc	.+2      	; 0x143e <u8g_pb_IsYIntersection+0x22>
    143c:	80 e0       	ldi	r24, 0x00	; 0
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
    143e:	83 23       	and	r24, r19
  */
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
    1440:	92 23       	and	r25, r18
  c1 |= c2;
  c1 |= c3;
  return c1 & 1;
}
    1442:	89 2b       	or	r24, r25
    1444:	08 95       	ret

00001446 <u8g_pb_GetPageBox>:
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
    1446:	dc 01       	movw	r26, r24
    1448:	fb 01       	movw	r30, r22
  box->x0 = 0;
    144a:	10 82       	st	Z, r1
  box->y0 = pb->p.page_y0;
    144c:	12 96       	adiw	r26, 0x02	; 2
    144e:	8c 91       	ld	r24, X
    1450:	12 97       	sbiw	r26, 0x02	; 2
    1452:	81 83       	std	Z+1, r24	; 0x01
  box->x1 = pb->width;
  box->x1--;
    1454:	15 96       	adiw	r26, 0x05	; 5
    1456:	8c 91       	ld	r24, X
    1458:	15 97       	sbiw	r26, 0x05	; 5
    145a:	81 50       	subi	r24, 0x01	; 1
    145c:	82 83       	std	Z+2, r24	; 0x02
  box->y1 = pb->p.page_y1;
    145e:	13 96       	adiw	r26, 0x03	; 3
    1460:	8c 91       	ld	r24, X
    1462:	83 83       	std	Z+3, r24	; 0x03
    1464:	08 95       	ret

00001466 <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    1466:	fb 01       	movw	r30, r22
    1468:	41 81       	ldd	r20, Z+1	; 0x01
  v1 = v0;
  switch( arg_pixel->dir )
    146a:	23 81       	ldd	r18, Z+3	; 0x03
    146c:	21 30       	cpi	r18, 0x01	; 1
    146e:	29 f0       	breq	.+10     	; 0x147a <u8g_pb_Is8PixelVisible+0x14>
    1470:	23 30       	cpi	r18, 0x03	; 3
    1472:	31 f4       	brne	.+12     	; 0x1480 <u8g_pb_Is8PixelVisible+0x1a>
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
    1474:	68 ef       	ldi	r22, 0xF8	; 248
    1476:	64 0f       	add	r22, r20
      break;
    1478:	04 c0       	rjmp	.+8      	; 0x1482 <u8g_pb_Is8PixelVisible+0x1c>


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    147a:	64 2f       	mov	r22, r20
  switch( arg_pixel->dir )
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
    147c:	48 5f       	subi	r20, 0xF8	; 248
      break;
    147e:	01 c0       	rjmp	.+2      	; 0x1482 <u8g_pb_Is8PixelVisible+0x1c>


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    1480:	64 2f       	mov	r22, r20
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
    1482:	cc cf       	rjmp	.-104    	; 0x141c <u8g_pb_IsYIntersection>

00001484 <u8g_pb_WriteBuffer>:
}



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
    1484:	fc 01       	movw	r30, r24
    1486:	cb 01       	movw	r24, r22
    1488:	ba 01       	movw	r22, r20
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
    148a:	26 81       	ldd	r18, Z+6	; 0x06
    148c:	37 81       	ldd	r19, Z+7	; 0x07
    148e:	45 81       	ldd	r20, Z+5	; 0x05
    1490:	cc c0       	rjmp	.+408    	; 0x162a <u8g_WriteSequence>

00001492 <u8g_draw_hline>:
*/

#include "u8g.h"

void u8g_draw_hline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
{
    1492:	af 92       	push	r10
    1494:	bf 92       	push	r11
    1496:	df 92       	push	r13
    1498:	ef 92       	push	r14
    149a:	ff 92       	push	r15
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	1f 92       	push	r1
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	5c 01       	movw	r10, r24
    14ac:	e6 2e       	mov	r14, r22
    14ae:	f4 2e       	mov	r15, r20
    14b0:	12 2f       	mov	r17, r18
  uint8_t pixel = 0x0ff;
  while( w >= 8 )
    14b2:	32 2f       	mov	r19, r18
    14b4:	d6 2e       	mov	r13, r22
    14b6:	d2 0e       	add	r13, r18
    14b8:	6d 2d       	mov	r22, r13
    14ba:	63 1b       	sub	r22, r19
    14bc:	38 30       	cpi	r19, 0x08	; 8
    14be:	48 f0       	brcs	.+18     	; 0x14d2 <u8g_draw_hline+0x40>
  {
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
    14c0:	0f ef       	ldi	r16, 0xFF	; 255
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	4f 2d       	mov	r20, r15
    14c6:	c5 01       	movw	r24, r10
    14c8:	39 83       	std	Y+1, r19	; 0x01
    14ca:	d5 de       	rcall	.-598    	; 0x1276 <u8g_Draw8Pixel>
    14cc:	39 81       	ldd	r19, Y+1	; 0x01
    w-=8;
    14ce:	38 50       	subi	r19, 0x08	; 8
    14d0:	f3 cf       	rjmp	.-26     	; 0x14b8 <u8g_draw_hline+0x26>
    14d2:	61 2f       	mov	r22, r17
    14d4:	68 7f       	andi	r22, 0xF8	; 248
    14d6:	6e 0d       	add	r22, r14
    14d8:	17 70       	andi	r17, 0x07	; 7
    14da:	71 f0       	breq	.+28     	; 0x14f8 <u8g_draw_hline+0x66>
    x+=8;
  }
  if ( w != 0 )
    14dc:	87 e0       	ldi	r24, 0x07	; 7
  {
    w ^=7;
    14de:	81 27       	eor	r24, r17
    14e0:	8f 5f       	subi	r24, 0xFF	; 255
    w++;
    14e2:	87 70       	andi	r24, 0x07	; 7
    pixel <<= w&7;
    14e4:	0f ef       	ldi	r16, 0xFF	; 255
    14e6:	10 e0       	ldi	r17, 0x00	; 0
    14e8:	01 c0       	rjmp	.+2      	; 0x14ec <u8g_draw_hline+0x5a>
    14ea:	00 0f       	add	r16, r16
    14ec:	8a 95       	dec	r24
    14ee:	ea f7       	brpl	.-6      	; 0x14ea <u8g_draw_hline+0x58>
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
    14f2:	4f 2d       	mov	r20, r15
    14f4:	c5 01       	movw	r24, r10
    14f6:	bf de       	rcall	.-642    	; 0x1276 <u8g_Draw8Pixel>
    14f8:	0f 90       	pop	r0
    14fa:	df 91       	pop	r29
  }
}
    14fc:	cf 91       	pop	r28
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	ff 90       	pop	r15
    1504:	ef 90       	pop	r14
    1506:	df 90       	pop	r13
    1508:	bf 90       	pop	r11
    150a:	af 90       	pop	r10
    150c:	08 95       	ret

0000150e <u8g_draw_box>:
  y--;
  u8g_draw_hline(u8g, xtmp, y, w);
}

void u8g_draw_box(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    150e:	ef 92       	push	r14
    1510:	ff 92       	push	r15
    1512:	0f 93       	push	r16
    1514:	1f 93       	push	r17
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	ec 01       	movw	r28, r24
    151c:	f6 2e       	mov	r15, r22
    151e:	e2 2e       	mov	r14, r18
    1520:	14 2f       	mov	r17, r20
    1522:	04 0f       	add	r16, r20
  do
  { 
    u8g_draw_hline(u8g, x, y, w);
    1524:	2e 2d       	mov	r18, r14
    1526:	41 2f       	mov	r20, r17
    1528:	6f 2d       	mov	r22, r15
    152a:	ce 01       	movw	r24, r28
    152c:	b2 df       	rcall	.-156    	; 0x1492 <u8g_draw_hline>
    152e:	1f 5f       	subi	r17, 0xFF	; 255
    y++;    
    1530:	01 13       	cpse	r16, r17
    h--;
  } while( h != 0 );
    1532:	f8 cf       	rjmp	.-16     	; 0x1524 <u8g_draw_box+0x16>
    1534:	cd b7       	in	r28, 0x3d	; 61
}
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	e6 e0       	ldi	r30, 0x06	; 6
    153a:	84 c1       	rjmp	.+776    	; 0x1844 <__epilogue_restores__+0x18>

0000153c <u8g_DrawBox>:

/* restrictions: h > 0 */
void u8g_DrawBox(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    153c:	a0 e0       	ldi	r26, 0x00	; 0
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e3 ea       	ldi	r30, 0xA3	; 163
    1542:	fa e0       	ldi	r31, 0x0A	; 10
    1544:	62 c1       	rjmp	.+708    	; 0x180a <__prologue_saves__+0x16>
    1546:	ec 01       	movw	r28, r24
    1548:	16 2f       	mov	r17, r22
    154a:	f4 2e       	mov	r15, r20
    154c:	e2 2e       	mov	r14, r18
    154e:	d0 2e       	mov	r13, r16
    1550:	0c d0       	rcall	.+24     	; 0x156a <u8g_IsBBXIntersection>
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    1552:	88 23       	and	r24, r24
    1554:	29 f0       	breq	.+10     	; 0x1560 <u8g_DrawBox+0x24>
    1556:	2e 2d       	mov	r18, r14
    1558:	4f 2d       	mov	r20, r15
    return;
  u8g_draw_box(u8g, x, y, w, h);
    155a:	61 2f       	mov	r22, r17
    155c:	ce 01       	movw	r24, r28
    155e:	d7 df       	rcall	.-82     	; 0x150e <u8g_draw_box>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	e7 e0       	ldi	r30, 0x07	; 7
}
    1566:	6d c1       	rjmp	.+730    	; 0x1842 <__epilogue_restores__+0x16>

00001568 <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
    1568:	08 95       	ret

0000156a <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    156a:	0f 93       	push	r16
    156c:	fc 01       	movw	r30, r24
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
    156e:	01 50       	subi	r16, 0x01	; 1
  tmp--;
    1570:	04 0f       	add	r16, r20
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    1572:	84 a9       	ldd	r24, Z+52	; 0x34
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    1574:	96 a9       	ldd	r25, Z+54	; 0x36
    1576:	94 17       	cp	r25, r20
    1578:	18 f0       	brcs	.+6      	; 0x1580 <u8g_IsBBXIntersection+0x16>
  {
    if ( v1 >= a0 )
    157a:	08 17       	cp	r16, r24
    157c:	28 f4       	brcc	.+10     	; 0x1588 <u8g_IsBBXIntersection+0x1e>
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <u8g_IsBBXIntersection+0x1a>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    1580:	08 17       	cp	r16, r24
    1582:	50 f0       	brcs	.+20     	; 0x1598 <u8g_IsBBXIntersection+0x2e>
    {
      if ( v0 > v1 )
    1584:	04 17       	cp	r16, r20
    1586:	40 f4       	brcc	.+16     	; 0x1598 <u8g_IsBBXIntersection+0x2e>
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
  
  tmp = x;
  tmp += w;
    1588:	21 50       	subi	r18, 0x01	; 1
  tmp--;
    158a:	26 0f       	add	r18, r22
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
    158c:	83 a9       	ldd	r24, Z+51	; 0x33
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    158e:	95 a9       	ldd	r25, Z+53	; 0x35
    1590:	96 17       	cp	r25, r22
    1592:	20 f4       	brcc	.+8      	; 0x159c <u8g_IsBBXIntersection+0x32>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    1594:	28 17       	cp	r18, r24
    1596:	20 f4       	brcc	.+8      	; 0x15a0 <u8g_IsBBXIntersection+0x36>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	07 c0       	rjmp	.+14     	; 0x15aa <u8g_IsBBXIntersection+0x40>
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    159c:	28 17       	cp	r18, r24
    159e:	20 f4       	brcc	.+8      	; 0x15a8 <u8g_IsBBXIntersection+0x3e>
  }
  else
  {
    if ( v1 >= a0 )
    {
      if ( v0 > v1 )
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	26 17       	cp	r18, r22
    15a4:	10 f0       	brcs	.+4      	; 0x15aa <u8g_IsBBXIntersection+0x40>
    15a6:	f8 cf       	rjmp	.-16     	; 0x1598 <u8g_IsBBXIntersection+0x2e>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
    15aa:	0f 91       	pop	r16
    15ac:	08 95       	ret

000015ae <u8g_InitCom>:

#include "u8g.h"

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
    15ae:	db 01       	movw	r26, r22
    15b0:	14 96       	adiw	r26, 0x04	; 4
    15b2:	ed 91       	ld	r30, X+
    15b4:	fc 91       	ld	r31, X
    15b6:	15 97       	sbiw	r26, 0x05	; 5
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	61 e0       	ldi	r22, 0x01	; 1
    15be:	09 95       	icall
}
    15c0:	08 95       	ret

000015c2 <u8g_SetChipSelect>:
}

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
    15c2:	db 01       	movw	r26, r22
    15c4:	14 96       	adiw	r26, 0x04	; 4
    15c6:	ed 91       	ld	r30, X+
    15c8:	fc 91       	ld	r31, X
    15ca:	15 97       	sbiw	r26, 0x05	; 5
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	63 e0       	ldi	r22, 0x03	; 3
    15d2:	09 95       	icall
    15d4:	08 95       	ret

000015d6 <u8g_SetResetLow>:
}

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
    15d6:	db 01       	movw	r26, r22
    15d8:	14 96       	adiw	r26, 0x04	; 4
    15da:	ed 91       	ld	r30, X+
    15dc:	fc 91       	ld	r31, X
    15de:	15 97       	sbiw	r26, 0x05	; 5
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	40 e0       	ldi	r20, 0x00	; 0
    15e6:	64 e0       	ldi	r22, 0x04	; 4
    15e8:	09 95       	icall
    15ea:	08 95       	ret

000015ec <u8g_SetResetHigh>:
}

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
    15ec:	db 01       	movw	r26, r22
    15ee:	14 96       	adiw	r26, 0x04	; 4
    15f0:	ed 91       	ld	r30, X+
    15f2:	fc 91       	ld	r31, X
    15f4:	15 97       	sbiw	r26, 0x05	; 5
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	41 e0       	ldi	r20, 0x01	; 1
    15fc:	64 e0       	ldi	r22, 0x04	; 4
    15fe:	09 95       	icall
    1600:	08 95       	ret

00001602 <u8g_SetAddress>:
}


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
    1602:	db 01       	movw	r26, r22
    1604:	14 96       	adiw	r26, 0x04	; 4
    1606:	ed 91       	ld	r30, X+
    1608:	fc 91       	ld	r31, X
    160a:	15 97       	sbiw	r26, 0x05	; 5
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	62 e0       	ldi	r22, 0x02	; 2
    1612:	09 95       	icall
    1614:	08 95       	ret

00001616 <u8g_WriteByte>:
}

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
    1616:	db 01       	movw	r26, r22
    1618:	14 96       	adiw	r26, 0x04	; 4
    161a:	ed 91       	ld	r30, X+
    161c:	fc 91       	ld	r31, X
    161e:	15 97       	sbiw	r26, 0x05	; 5
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	65 e0       	ldi	r22, 0x05	; 5
    1626:	09 95       	icall
}
    1628:	08 95       	ret

0000162a <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
    162a:	db 01       	movw	r26, r22
    162c:	14 96       	adiw	r26, 0x04	; 4
    162e:	ed 91       	ld	r30, X+
    1630:	fc 91       	ld	r31, X
    1632:	15 97       	sbiw	r26, 0x05	; 5
    1634:	66 e0       	ldi	r22, 0x06	; 6
    1636:	09 95       	icall
}
    1638:	08 95       	ret

0000163a <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
    163a:	a1 e0       	ldi	r26, 0x01	; 1
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e2 e2       	ldi	r30, 0x22	; 34
    1640:	fb e0       	ldi	r31, 0x0B	; 11
    1642:	e0 c0       	rjmp	.+448    	; 0x1804 <__prologue_saves__+0x10>
    1644:	5c 01       	movw	r10, r24
    1646:	8b 01       	movw	r16, r22
    1648:	7a 01       	movw	r14, r20
    164a:	80 e0       	ldi	r24, 0x00	; 0
  uint8_t is_escape = 0;
    164c:	f7 01       	movw	r30, r14
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
    164e:	44 91       	lpm	r20, Z
    1650:	81 11       	cpse	r24, r1
    if ( is_escape == 0 )
    1652:	08 c0       	rjmp	.+16     	; 0x1664 <u8g_WriteEscSeqP+0x2a>
    1654:	4f 3f       	cpi	r20, 0xFF	; 255
    {
      if ( value != 255 )
    1656:	a1 f1       	breq	.+104    	; 0x16c0 <u8g_WriteEscSeqP+0x86>
    1658:	b8 01       	movw	r22, r16
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    165a:	c5 01       	movw	r24, r10
    165c:	dc df       	rcall	.-72     	; 0x1616 <u8g_WriteByte>
    165e:	81 11       	cpse	r24, r1
    1660:	28 c0       	rjmp	.+80     	; 0x16b2 <u8g_WriteEscSeqP+0x78>
    1662:	33 c0       	rjmp	.+102    	; 0x16ca <u8g_WriteEscSeqP+0x90>
    1664:	4f 3f       	cpi	r20, 0xFF	; 255
    1666:	c1 f3       	breq	.-16     	; 0x1658 <u8g_WriteEscSeqP+0x1e>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
    1668:	4e 3f       	cpi	r20, 0xFE	; 254
    166a:	89 f1       	breq	.+98     	; 0x16ce <u8g_WriteEscSeqP+0x94>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else if ( value == 254 )
    166c:	40 3f       	cpi	r20, 0xF0	; 240
    166e:	08 f5       	brcc	.+66     	; 0x16b2 <u8g_WriteEscSeqP+0x78>
      {
        break;
      }
      else if ( value >= 0x0f0 )
    1670:	40 3e       	cpi	r20, 0xE0	; 224
    1672:	28 f0       	brcs	.+10     	; 0x167e <u8g_WriteEscSeqP+0x44>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
    1674:	4f 70       	andi	r20, 0x0F	; 15
    1676:	b8 01       	movw	r22, r16
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
    1678:	c5 01       	movw	r24, r10
    167a:	c3 df       	rcall	.-122    	; 0x1602 <u8g_SetAddress>
    167c:	1a c0       	rjmp	.+52     	; 0x16b2 <u8g_WriteEscSeqP+0x78>
    167e:	40 3d       	cpi	r20, 0xD0	; 208
    1680:	28 f0       	brcs	.+10     	; 0x168c <u8g_WriteEscSeqP+0x52>
    1682:	4f 70       	andi	r20, 0x0F	; 15
      }
      else if ( value >= 0xd0 )
    1684:	b8 01       	movw	r22, r16
    1686:	c5 01       	movw	r24, r10
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
    1688:	9c df       	rcall	.-200    	; 0x15c2 <u8g_SetChipSelect>
    168a:	13 c0       	rjmp	.+38     	; 0x16b2 <u8g_WriteEscSeqP+0x78>
    168c:	40 3c       	cpi	r20, 0xC0	; 192
    168e:	98 f0       	brcs	.+38     	; 0x16b6 <u8g_WriteEscSeqP+0x7c>
    1690:	b8 01       	movw	r22, r16
    1692:	c5 01       	movw	r24, r10
      }
      else if ( value >= 0xc0 )
    1694:	49 83       	std	Y+1, r20	; 0x01
    1696:	9f df       	rcall	.-194    	; 0x15d6 <u8g_SetResetLow>
      {
        u8g_SetResetLow(u8g, dev);
    1698:	49 81       	ldd	r20, Y+1	; 0x01
    169a:	42 95       	swap	r20
    169c:	40 7f       	andi	r20, 0xF0	; 240
    169e:	4e 5f       	subi	r20, 0xFE	; 254
    16a0:	c4 2e       	mov	r12, r20
        value &= 0x0f;
        value <<= 4;
    16a2:	d1 2c       	mov	r13, r1
    16a4:	c6 01       	movw	r24, r12
    16a6:	7f d0       	rcall	.+254    	; 0x17a6 <u8g_Delay>
        value+=2;
    16a8:	b8 01       	movw	r22, r16
        u8g_Delay(value);
    16aa:	c5 01       	movw	r24, r10
    16ac:	9f df       	rcall	.-194    	; 0x15ec <u8g_SetResetHigh>
    16ae:	c6 01       	movw	r24, r12
    16b0:	7a d0       	rcall	.+244    	; 0x17a6 <u8g_Delay>
    16b2:	80 e0       	ldi	r24, 0x00	; 0
        u8g_SetResetHigh(u8g, dev);
    16b4:	06 c0       	rjmp	.+12     	; 0x16c2 <u8g_WriteEscSeqP+0x88>
    16b6:	47 fd       	sbrc	r20, 7
    16b8:	fc cf       	rjmp	.-8      	; 0x16b2 <u8g_WriteEscSeqP+0x78>
    16ba:	84 2f       	mov	r24, r20
        u8g_Delay(value);
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	f8 cf       	rjmp	.-16     	; 0x16b0 <u8g_WriteEscSeqP+0x76>
    16c0:	81 e0       	ldi	r24, 0x01	; 1
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    16c2:	ff ef       	ldi	r31, 0xFF	; 255
    16c4:	ef 1a       	sub	r14, r31
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
    16c6:	ff 0a       	sbc	r15, r31
    16c8:	c1 cf       	rjmp	.-126    	; 0x164c <u8g_WriteEscSeqP+0x12>
      {
        u8g_Delay(value);
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	01 c0       	rjmp	.+2      	; 0x16d0 <u8g_WriteEscSeqP+0x96>
    16ce:	81 e0       	ldi	r24, 0x01	; 1
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    16d0:	21 96       	adiw	r28, 0x01	; 1
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    }
    esc_seq++;
    16d2:	ea e0       	ldi	r30, 0x0A	; 10
    16d4:	b3 c0       	rjmp	.+358    	; 0x183c <__epilogue_restores__+0x10>

000016d6 <u8g_com_arduino_ssd_start_sequence>:
//#define I2C_CMD_MODE  0x080
#define I2C_CMD_MODE    0x000
#define I2C_DATA_MODE   0x040

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	ec 01       	movw	r28, r24
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    16dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    16de:	88 23       	and	r24, r24
    16e0:	71 f0       	breq	.+28     	; 0x16fe <u8g_com_arduino_ssd_start_sequence+0x28>
    return 1;

  /* setup bus, might be a repeated start */
  if ( u8g_i2c_start(I2C_SLA) == 0 )
    16e2:	88 e7       	ldi	r24, 0x78	; 120
    16e4:	30 db       	rcall	.-2464   	; 0xd46 <u8g_i2c_start>
    16e6:	88 23       	and	r24, r24
    16e8:	61 f0       	breq	.+24     	; 0x1702 <u8g_com_arduino_ssd_start_sequence+0x2c>
    16ea:	8e a1       	ldd	r24, Y+38	; 0x26
    return 0;
  if ( u8g->pin_list[U8G_PI_A0_STATE] == 0 )
    16ec:	81 11       	cpse	r24, r1
    16ee:	05 c0       	rjmp	.+10     	; 0x16fa <u8g_com_arduino_ssd_start_sequence+0x24>
    16f0:	58 db       	rcall	.-2384   	; 0xda2 <u8g_i2c_send_byte>
  {
    if ( u8g_i2c_send_byte(I2C_CMD_MODE) == 0 )
    16f2:	88 23       	and	r24, r24
    16f4:	31 f0       	breq	.+12     	; 0x1702 <u8g_com_arduino_ssd_start_sequence+0x2c>
    16f6:	1b a6       	std	Y+43, r1	; 0x2b
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <u8g_com_arduino_ssd_start_sequence+0x28>
  {
    if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
    16fa:	80 e4       	ldi	r24, 0x40	; 64
    16fc:	f9 cf       	rjmp	.-14     	; 0x16f0 <u8g_com_arduino_ssd_start_sequence+0x1a>
    if ( u8g_i2c_send_byte(I2C_CMD_MODE) == 0 )
      return 0;
  }
  else
  {
    if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <u8g_com_arduino_ssd_start_sequence+0x2e>

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    return 1;
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	df 91       	pop	r29

  /* setup bus, might be a repeated start */
  if ( u8g_i2c_start(I2C_SLA) == 0 )
    return 0;
    1706:	cf 91       	pop	r28
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
  return 1;
}
    1708:	08 95       	ret

0000170a <u8g_com_arduino_ssd_i2c_fn>:

uint8_t u8g_com_arduino_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
    170a:	1f 93       	push	r17
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	14 2f       	mov	r17, r20
    1712:	e9 01       	movw	r28, r18
  switch(msg)
    1714:	63 30       	cpi	r22, 0x03	; 3
    1716:	b1 f0       	breq	.+44     	; 0x1744 <u8g_com_arduino_ssd_i2c_fn+0x3a>
    1718:	50 f4       	brcc	.+20     	; 0x172e <u8g_com_arduino_ssd_i2c_fn+0x24>
    171a:	61 30       	cpi	r22, 0x01	; 1
    171c:	79 f0       	breq	.+30     	; 0x173c <u8g_com_arduino_ssd_i2c_fn+0x32>
    171e:	62 30       	cpi	r22, 0x02	; 2
    1720:	09 f0       	breq	.+2      	; 0x1724 <u8g_com_arduino_ssd_i2c_fn+0x1a>
    1722:	3a c0       	rjmp	.+116    	; 0x1798 <u8g_com_arduino_ssd_i2c_fn+0x8e>
      }
      // u8g_i2c_stop();
      break;
      
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g->pin_list[U8G_PI_A0_STATE] = arg_val;
    1724:	fc 01       	movw	r30, r24
    1726:	46 a3       	std	Z+38, r20	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again */
    1728:	21 e0       	ldi	r18, 0x01	; 1
    172a:	23 a7       	std	Z+43, r18	; 0x2b
    172c:	35 c0       	rjmp	.+106    	; 0x1798 <u8g_com_arduino_ssd_i2c_fn+0x8e>
  return 1;
}

uint8_t u8g_com_arduino_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  switch(msg)
    172e:	66 30       	cpi	r22, 0x06	; 6
    1730:	d9 f0       	breq	.+54     	; 0x1768 <u8g_com_arduino_ssd_i2c_fn+0x5e>
    1732:	67 30       	cpi	r22, 0x07	; 7
    1734:	21 f1       	breq	.+72     	; 0x177e <u8g_com_arduino_ssd_i2c_fn+0x74>
    1736:	65 30       	cpi	r22, 0x05	; 5
    1738:	79 f5       	brne	.+94     	; 0x1798 <u8g_com_arduino_ssd_i2c_fn+0x8e>
    173a:	0c c0       	rjmp	.+24     	; 0x1754 <u8g_com_arduino_ssd_i2c_fn+0x4a>
    case U8G_COM_MSG_INIT:
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SCL, HIGH);
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);
    173c:	fc 01       	movw	r30, r24
    173e:	86 a5       	ldd	r24, Z+46	; 0x2e
    1740:	d4 da       	rcall	.-2648   	; 0xcea <u8g_i2c_init>
    1742:	2a c0       	rjmp	.+84     	; 0x1798 <u8g_com_arduino_ssd_i2c_fn+0x8e>
    1744:	fc 01       	movw	r30, r24
      /* Currently disabled, but it could be enable. Previous restrictions have been removed */
      /* u8g_com_arduino_digital_write(u8g, U8G_PI_RESET, arg_val); */
      break;
      
    case U8G_COM_MSG_CHIP_SELECT:
      u8g->pin_list[U8G_PI_A0_STATE] = 0;
    1746:	16 a2       	std	Z+38, r1	; 0x26
    1748:	21 e0       	ldi	r18, 0x01	; 1
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again, also forces start condition */
    174a:	23 a7       	std	Z+43, r18	; 0x2b
    174c:	41 11       	cpse	r20, r1
      if ( arg_val == 0 )
    174e:	24 c0       	rjmp	.+72     	; 0x1798 <u8g_com_arduino_ssd_i2c_fn+0x8e>
    1750:	42 db       	rcall	.-2428   	; 0xdd6 <u8g_i2c_stop>
      {
        /* disable chip, send stop condition */
	u8g_i2c_stop();
    1752:	22 c0       	rjmp	.+68     	; 0x1798 <u8g_com_arduino_ssd_i2c_fn+0x8e>
    1754:	c0 df       	rcall	.-128    	; 0x16d6 <u8g_com_arduino_ssd_start_sequence>
    1756:	81 11       	cpse	r24, r1
      }
      break;

    case U8G_COM_MSG_WRITE_BYTE:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    1758:	02 c0       	rjmp	.+4      	; 0x175e <u8g_com_arduino_ssd_i2c_fn+0x54>
    175a:	3d db       	rcall	.-2438   	; 0xdd6 <u8g_i2c_stop>
    175c:	1f c0       	rjmp	.+62     	; 0x179c <u8g_com_arduino_ssd_i2c_fn+0x92>
    175e:	81 2f       	mov	r24, r17
	return u8g_i2c_stop(), 0;
    1760:	20 db       	rcall	.-2496   	; 0xda2 <u8g_i2c_send_byte>
    1762:	81 11       	cpse	r24, r1
    1764:	19 c0       	rjmp	.+50     	; 0x1798 <u8g_com_arduino_ssd_i2c_fn+0x8e>
      if ( u8g_i2c_send_byte(arg_val) == 0 )
    1766:	f9 cf       	rjmp	.-14     	; 0x175a <u8g_com_arduino_ssd_i2c_fn+0x50>
    1768:	b6 df       	rcall	.-148    	; 0x16d6 <u8g_com_arduino_ssd_start_sequence>
    176a:	88 23       	and	r24, r24
    176c:	b1 f3       	breq	.-20     	; 0x175a <u8g_com_arduino_ssd_i2c_fn+0x50>
    176e:	11 23       	and	r17, r17
    1770:	99 f0       	breq	.+38     	; 0x1798 <u8g_com_arduino_ssd_i2c_fn+0x8e>
      // u8g_i2c_stop();
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    1772:	89 91       	ld	r24, Y+
    1774:	16 db       	rcall	.-2516   	; 0xda2 <u8g_i2c_send_byte>
    1776:	88 23       	and	r24, r24
    1778:	81 f3       	breq	.-32     	; 0x175a <u8g_com_arduino_ssd_i2c_fn+0x50>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    177a:	11 50       	subi	r17, 0x01	; 1
    177c:	f8 cf       	rjmp	.-16     	; 0x176e <u8g_com_arduino_ssd_i2c_fn+0x64>
        {
	  if ( u8g_i2c_send_byte(*ptr++) == 0 )
    177e:	ab df       	rcall	.-170    	; 0x16d6 <u8g_com_arduino_ssd_start_sequence>
    1780:	88 23       	and	r24, r24
    1782:	59 f3       	breq	.-42     	; 0x175a <u8g_com_arduino_ssd_i2c_fn+0x50>
    1784:	11 23       	and	r17, r17
    1786:	41 f0       	breq	.+16     	; 0x1798 <u8g_com_arduino_ssd_i2c_fn+0x8e>
	    return u8g_i2c_stop(), 0;
          arg_val--;
    1788:	fe 01       	movw	r30, r28
    178a:	84 91       	lpm	r24, Z
      // u8g_i2c_stop();
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    178c:	0a db       	rcall	.-2540   	; 0xda2 <u8g_i2c_send_byte>
    178e:	88 23       	and	r24, r24
    1790:	29 f0       	breq	.+10     	; 0x179c <u8g_com_arduino_ssd_i2c_fn+0x92>
    1792:	21 96       	adiw	r28, 0x01	; 1
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1794:	11 50       	subi	r17, 0x01	; 1
    1796:	f6 cf       	rjmp	.-20     	; 0x1784 <u8g_com_arduino_ssd_i2c_fn+0x7a>
        {
	  if ( u8g_i2c_send_byte(u8g_pgm_read(ptr)) == 0 )
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	01 c0       	rjmp	.+2      	; 0x179e <u8g_com_arduino_ssd_i2c_fn+0x94>
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	1f 91       	pop	r17
	    return 0;
          ptr++;
    17a4:	08 95       	ret

000017a6 <u8g_Delay>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17a6:	2e e9       	ldi	r18, 0x9E	; 158
    17a8:	3f e0       	ldi	r19, 0x0F	; 15
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	29 f0       	breq	.+10     	; 0x17b8 <u8g_Delay+0x12>
    17ae:	f9 01       	movw	r30, r18
    17b0:	31 97       	sbiw	r30, 0x01	; 1
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <u8g_Delay+0xa>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f9 cf       	rjmp	.-14     	; 0x17aa <u8g_Delay+0x4>
  }
}
    17b8:	08 95       	ret

000017ba <u8g_page_First>:
  p->page = 0;
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
    17ba:	fc 01       	movw	r30, r24
  p->page_y0 = 0;
    17bc:	12 82       	std	Z+2, r1	; 0x02
  p->page_y1 = p->page_height;
  p->page_y1--;
    17be:	80 81       	ld	r24, Z
    17c0:	81 50       	subi	r24, 0x01	; 1
    17c2:	83 83       	std	Z+3, r24	; 0x03
  p->page = 0;
    17c4:	14 82       	std	Z+4, r1	; 0x04
    17c6:	08 95       	ret

000017c8 <u8g_page_Next>:
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
    17c8:	fc 01       	movw	r30, r24
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
    17ca:	20 81       	ld	r18, Z
    17cc:	82 81       	ldd	r24, Z+2	; 0x02
    17ce:	82 0f       	add	r24, r18
    17d0:	82 83       	std	Z+2, r24	; 0x02
  if ( p->page_y0 >= p->total_height )
    17d2:	91 81       	ldd	r25, Z+1	; 0x01
    17d4:	89 17       	cp	r24, r25
    17d6:	60 f4       	brcc	.+24     	; 0x17f0 <u8g_page_Next+0x28>
    return 0;
  p->page++;
    17d8:	84 81       	ldd	r24, Z+4	; 0x04
    17da:	8f 5f       	subi	r24, 0xFF	; 255
    17dc:	84 83       	std	Z+4, r24	; 0x04
  y1 = p->page_y1;
    17de:	83 81       	ldd	r24, Z+3	; 0x03
  y1 += p->page_height;
    17e0:	82 0f       	add	r24, r18
  if ( y1 >= p->total_height )
    17e2:	89 17       	cp	r24, r25
    17e4:	10 f0       	brcs	.+4      	; 0x17ea <u8g_page_Next+0x22>
  {
    y1 = p->total_height;
    y1--;
    17e6:	8f ef       	ldi	r24, 0xFF	; 255
    17e8:	89 0f       	add	r24, r25
  }
  p->page_y1 = y1;
    17ea:	83 83       	std	Z+3, r24	; 0x03
  
  return 1;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	08 95       	ret
uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
    return 0;
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    y1--;
  }
  p->page_y1 = y1;
  
  return 1;
}
    17f2:	08 95       	ret

000017f4 <__prologue_saves__>:
    17f4:	2f 92       	push	r2
    17f6:	3f 92       	push	r3
    17f8:	4f 92       	push	r4
    17fa:	5f 92       	push	r5
    17fc:	6f 92       	push	r6
    17fe:	7f 92       	push	r7
    1800:	8f 92       	push	r8
    1802:	9f 92       	push	r9
    1804:	af 92       	push	r10
    1806:	bf 92       	push	r11
    1808:	cf 92       	push	r12
    180a:	df 92       	push	r13
    180c:	ef 92       	push	r14
    180e:	ff 92       	push	r15
    1810:	0f 93       	push	r16
    1812:	1f 93       	push	r17
    1814:	cf 93       	push	r28
    1816:	df 93       	push	r29
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	ca 1b       	sub	r28, r26
    181e:	db 0b       	sbc	r29, r27
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	09 94       	ijmp

0000182c <__epilogue_restores__>:
    182c:	2a 88       	ldd	r2, Y+18	; 0x12
    182e:	39 88       	ldd	r3, Y+17	; 0x11
    1830:	48 88       	ldd	r4, Y+16	; 0x10
    1832:	5f 84       	ldd	r5, Y+15	; 0x0f
    1834:	6e 84       	ldd	r6, Y+14	; 0x0e
    1836:	7d 84       	ldd	r7, Y+13	; 0x0d
    1838:	8c 84       	ldd	r8, Y+12	; 0x0c
    183a:	9b 84       	ldd	r9, Y+11	; 0x0b
    183c:	aa 84       	ldd	r10, Y+10	; 0x0a
    183e:	b9 84       	ldd	r11, Y+9	; 0x09
    1840:	c8 84       	ldd	r12, Y+8	; 0x08
    1842:	df 80       	ldd	r13, Y+7	; 0x07
    1844:	ee 80       	ldd	r14, Y+6	; 0x06
    1846:	fd 80       	ldd	r15, Y+5	; 0x05
    1848:	0c 81       	ldd	r16, Y+4	; 0x04
    184a:	1b 81       	ldd	r17, Y+3	; 0x03
    184c:	aa 81       	ldd	r26, Y+2	; 0x02
    184e:	b9 81       	ldd	r27, Y+1	; 0x01
    1850:	ce 0f       	add	r28, r30
    1852:	d1 1d       	adc	r29, r1
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	ed 01       	movw	r28, r26
    1860:	08 95       	ret

00001862 <_exit>:
    1862:	f8 94       	cli

00001864 <__stop_program>:
    1864:	ff cf       	rjmp	.-2      	; 0x1864 <__stop_program>
