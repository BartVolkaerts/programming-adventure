
out/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 00 02 20 31 0c 00 08 4d 02 00 08 59 02 00 08     ... 1...M...Y...
 8000010:	61 02 00 08 69 02 00 08 71 02 00 08 00 00 00 00     a...i...q.......
	...
 800002c:	79 02 00 08 85 02 00 08 00 00 00 00 91 02 00 08     y...............
 800003c:	9d 02 00 08 8d 0c 00 08 8d 0c 00 08 8d 0c 00 08     ................
 800004c:	8d 0c 00 08 8d 0c 00 08 8d 0c 00 08 8d 0c 00 08     ................
 800005c:	8d 0c 00 08 8d 0c 00 08 8d 0c 00 08 8d 0c 00 08     ................
 800006c:	8d 0c 00 08 8d 0c 00 08 8d 0c 00 08 8d 0c 00 08     ................
 800007c:	8d 0c 00 08 8d 0c 00 08 8d 0c 00 08 8d 0c 00 08     ................
 800008c:	8d 0c 00 08 8d 0c 00 08 8d 0c 00 08 8d 0c 00 08     ................
 800009c:	8d 0c 00 08 8d 0c 00 08 8d 0c 00 08 8d 0c 00 08     ................
 80000ac:	8d 0c 00 08 8d 0c 00 08 8d 0c 00 08 8d 0c 00 08     ................
 80000bc:	8d 0c 00 08 8d 0c 00 08 8d 0c 00 08 8d 0c 00 08     ................
 80000cc:	8d 0c 00 08 8d 0c 00 08 8d 0c 00 08 8d 0c 00 08     ................
 80000dc:	8d 0c 00 08 8d 0c 00 08 8d 0c 00 08 8d 0c 00 08     ................
 80000ec:	8d 0c 00 08 8d 0c 00 08 8d 0c 00 08 8d 0c 00 08     ................
 80000fc:	8d 0c 00 08 8d 0c 00 08 8d 0c 00 08 8d 0c 00 08     ................
 800010c:	8d 0c 00 08 8d 0c 00 08 8d 0c 00 08 8d 0c 00 08     ................
 800011c:	8d 0c 00 08 8d 0c 00 08 8d 0c 00 08 8d 0c 00 08     ................
 800012c:	8d 0c 00 08 8d 0c 00 08 8d 0c 00 08 8d 0c 00 08     ................
 800013c:	8d 0c 00 08 8d 0c 00 08 8d 0c 00 08 8d 0c 00 08     ................
 800014c:	8d 0c 00 08 8d 0c 00 08 8d 0c 00 08 8d 0c 00 08     ................
 800015c:	8d 0c 00 08 8d 0c 00 08 8d 0c 00 08 8d 0c 00 08     ................
 800016c:	8d 0c 00 08 8d 0c 00 08 8d 0c 00 08 8d 0c 00 08     ................
 800017c:	8d 0c 00 08 8d 0c 00 08 8d 0c 00 08                 ............

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b110      	cbz	r0, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2101      	movs	r1, #1
 800019c:	7021      	strb	r1, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000454 	.word	0x20000454
 80001a4:	00000000 	.word	0x00000000
 80001a8:	200004fc 	.word	0x200004fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6801      	ldr	r1, [r0, #0]
 80001be:	b111      	cbz	r1, 80001c6 <frame_dummy+0x1a>
 80001c0:	4a05      	ldr	r2, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b102      	cbz	r2, 80001c6 <frame_dummy+0x1a>
 80001c4:	4790      	blx	r2
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200004fc 	.word	0x200004fc
 80001d0:	20000458 	.word	0x20000458
 80001d4:	2000044c 	.word	0x2000044c
 80001d8:	00000000 	.word	0x00000000

080001dc <_mainCRTStartup>:
 80001dc:	4b15      	ldr	r3, [pc, #84]	; (8000234 <_mainCRTStartup+0x58>)
 80001de:	2b00      	cmp	r3, #0
 80001e0:	bf08      	it	eq
 80001e2:	4b13      	ldreq	r3, [pc, #76]	; (8000230 <_mainCRTStartup+0x54>)
 80001e4:	469d      	mov	sp, r3
 80001e6:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 80001ea:	2100      	movs	r1, #0
 80001ec:	468b      	mov	fp, r1
 80001ee:	460f      	mov	r7, r1
 80001f0:	4813      	ldr	r0, [pc, #76]	; (8000240 <_mainCRTStartup+0x64>)
 80001f2:	4a14      	ldr	r2, [pc, #80]	; (8000244 <_mainCRTStartup+0x68>)
 80001f4:	1a12      	subs	r2, r2, r0
 80001f6:	f000 fb2f 	bl	8000858 <memset>
 80001fa:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <_mainCRTStartup+0x5c>)
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d000      	beq.n	8000202 <_mainCRTStartup+0x26>
 8000200:	4798      	blx	r3
 8000202:	4b0e      	ldr	r3, [pc, #56]	; (800023c <_mainCRTStartup+0x60>)
 8000204:	2b00      	cmp	r3, #0
 8000206:	d000      	beq.n	800020a <_mainCRTStartup+0x2e>
 8000208:	4798      	blx	r3
 800020a:	2000      	movs	r0, #0
 800020c:	2100      	movs	r1, #0
 800020e:	4604      	mov	r4, r0
 8000210:	460d      	mov	r5, r1
 8000212:	2000      	movs	r0, #0
 8000214:	490c      	ldr	r1, [pc, #48]	; (8000248 <_mainCRTStartup+0x6c>)
 8000216:	2200      	movs	r2, #0
 8000218:	2300      	movs	r3, #0
 800021a:	f000 fa45 	bl	80006a8 <__register_exitproc>
 800021e:	f000 fad1 	bl	80007c4 <__libc_init_array>
 8000222:	4620      	mov	r0, r4
 8000224:	4629      	mov	r1, r5
 8000226:	f000 f981 	bl	800052c <main>
 800022a:	f000 fa93 	bl	8000754 <exit>
 800022e:	bf00      	nop
 8000230:	00080000 	.word	0x00080000
	...
 8000240:	20000454 	.word	0x20000454
 8000244:	20000474 	.word	0x20000474
 8000248:	08000775 	.word	0x08000775

0800024c <NMI_Handler>:
/******************************************************************************/
/*            Cortex-M4 Processor Exceptions Handlers                         */
/******************************************************************************/

void NMI_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
}
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop

08000258 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800025c:	e7fe      	b.n	800025c <HardFault_Handler+0x4>
 800025e:	bf00      	nop

08000260 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000264:	e7fe      	b.n	8000264 <MemManage_Handler+0x4>
 8000266:	bf00      	nop

08000268 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800026c:	e7fe      	b.n	800026c <BusFault_Handler+0x4>
 800026e:	bf00      	nop

08000270 <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000274:	e7fe      	b.n	8000274 <UsageFault_Handler+0x4>
 8000276:	bf00      	nop

08000278 <SVC_Handler>:
}

/* SVCall exception handler */
void SVC_Handler(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
}
 800027c:	46bd      	mov	sp, r7
 800027e:	bc80      	pop	{r7}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop

08000284 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
}
 8000288:	46bd      	mov	sp, r7
 800028a:	bc80      	pop	{r7}
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <PendSV_Handler>:

/* PendSVC exception handler */
void PendSV_Handler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
}
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop

0800029c <SysTick_Handler>:

/* SysTick Handler */
void SysTick_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  __stm32_tick++;
 80002a0:	f240 4370 	movw	r3, #1136	; 0x470
 80002a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f103 0201 	add.w	r2, r3, #1
 80002ae:	f240 4370 	movw	r3, #1136	; 0x470
 80002b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002b6:	601a      	str	r2, [r3, #0]
}
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <low_level_init>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void low_level_init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002c4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80002c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80002cc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80002d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80002d4:	6812      	ldr	r2, [r2, #0]
 80002d6:	f042 0201 	orr.w	r2, r2, #1
 80002da:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80002dc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80002e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80002e4:	f04f 0200 	mov.w	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80002ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80002f2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80002f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80002fa:	6812      	ldr	r2, [r2, #0]
 80002fc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000300:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000304:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000306:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800030a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800030e:	f243 0210 	movw	r2, #12304	; 0x3010
 8000312:	f2c2 4200 	movt	r2, #9216	; 0x2400
 8000316:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000318:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800031c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000320:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000324:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000328:	6812      	ldr	r2, [r2, #0]
 800032a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800032e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000330:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000334:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000338:	f04f 0200 	mov.w	r2, #0
 800033c:	60da      	str	r2, [r3, #12]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  set_sys_clock();
 800033e:	f000 f80b 	bl	8000358 <set_sys_clock>
#ifdef VECT_TAB_SRAM
  /* Vector Table Relocation in Internal SRAM */
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET;
#else
  /* Vector Table Relocation in Internal FLASH */
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;
 8000342:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000346:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800034a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800034e:	609a      	str	r2, [r3, #8]
#endif

  /* copy fastcode section from ROM to RAM */
  copy_fastcode();
 8000350:	f000 f8c6 	bl	80004e0 <copy_fastcode>
}
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop

08000358 <set_sys_clock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void set_sys_clock(void)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800035e:	f04f 0300 	mov.w	r3, #0
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	f04f 0300 	mov.w	r3, #0
 8000368:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800036a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800036e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000372:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000376:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800037a:	6812      	ldr	r2, [r2, #0]
 800037c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000380:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000382:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000386:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000390:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	f103 0301 	add.w	r3, r3, #1
 8000398:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d103      	bne.n	80003a8 <set_sys_clock+0x50>
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80003a6:	d1ec      	bne.n	8000382 <set_sys_clock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80003a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80003ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d003      	beq.n	80003c2 <set_sys_clock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 80003ba:	f04f 0301 	mov.w	r3, #1
 80003be:	603b      	str	r3, [r7, #0]
 80003c0:	e002      	b.n	80003c8 <set_sys_clock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80003c2:	f04f 0300 	mov.w	r3, #0
 80003c6:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	f040 8082 	bne.w	80004d4 <set_sys_clock+0x17c>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80003d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80003dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80003e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80003e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80003e6:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80003e8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80003ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80003f0:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80003f4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80003f8:	6812      	ldr	r2, [r2, #0]
 80003fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80003fe:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000400:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000404:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000408:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800040c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000410:	6892      	ldr	r2, [r2, #8]
 8000412:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000414:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000418:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800041c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000420:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000424:	6892      	ldr	r2, [r2, #8]
 8000426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800042a:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800042c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000430:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000434:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000438:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800043c:	6892      	ldr	r2, [r2, #8]
 800043e:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000442:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000444:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000448:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800044c:	f245 4208 	movw	r2, #21512	; 0x5408
 8000450:	f2c0 7240 	movt	r2, #1856	; 0x740
 8000454:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000456:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800045a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800045e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000462:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000466:	6812      	ldr	r2, [r2, #0]
 8000468:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800046c:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0) { }
 800046e:	bf00      	nop
 8000470:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000474:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800047e:	2b00      	cmp	r3, #0
 8000480:	d0f6      	beq.n	8000470 <set_sys_clock+0x118>
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000482:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000486:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800048a:	f240 6205 	movw	r2, #1541	; 0x605
 800048e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000490:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000494:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000498:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800049c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80004a0:	6892      	ldr	r2, [r2, #8]
 80004a2:	f022 0203 	bic.w	r2, r2, #3
 80004a6:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80004a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80004ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004b0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80004b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80004b8:	6892      	ldr	r2, [r2, #8]
 80004ba:	f042 0202 	orr.w	r2, r2, #2
 80004be:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80004c0:	bf00      	nop
 80004c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80004c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	f003 030c 	and.w	r3, r3, #12
 80004d0:	2b08      	cmp	r3, #8
 80004d2:	d1f6      	bne.n	80004c2 <set_sys_clock+0x16a>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
 80004d4:	f107 070c 	add.w	r7, r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <copy_fastcode>:

static void copy_fastcode(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
    uint32_t* load = &__fastcode_load;
 80004e6:	f241 1324 	movw	r3, #4388	; 0x1124
 80004ea:	f6c0 0300 	movt	r3, #2048	; 0x800
 80004ee:	607b      	str	r3, [r7, #4]
    uint32_t* data = &__fastcode_start;
 80004f0:	f240 4374 	movw	r3, #1140	; 0x474
 80004f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004f8:	603b      	str	r3, [r7, #0]

    while(data < &__fastcode_end){
 80004fa:	e00b      	b.n	8000514 <copy_fastcode+0x34>
        *(data++) = *(load++);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	f103 0304 	add.w	r3, r3, #4
 800050a:	603b      	str	r3, [r7, #0]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f103 0304 	add.w	r3, r3, #4
 8000512:	607b      	str	r3, [r7, #4]
static void copy_fastcode(void)
{
    uint32_t* load = &__fastcode_load;
    uint32_t* data = &__fastcode_start;

    while(data < &__fastcode_end){
 8000514:	683a      	ldr	r2, [r7, #0]
 8000516:	f240 43fc 	movw	r3, #1276	; 0x4fc
 800051a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800051e:	429a      	cmp	r2, r3
 8000520:	d3ec      	bcc.n	80004fc <copy_fastcode+0x1c>
        *(data++) = *(load++);
    }
}
 8000522:	f107 070c 	add.w	r7, r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr

0800052c <main>:
void fast_increment(uint32_t * i);
uint32_t isqrt3(uint32_t n);

/* main C entry point - should never return */
void main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
   /* Enable peripheral clocks */
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000532:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000536:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800053a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800053e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000542:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000544:	f042 0208 	orr.w	r2, r2, #8
 8000548:	631a      	str	r2, [r3, #48]	; 0x30
    /* Configure pins */
    GPIOD->MODER |= GPIO_MODER_MODER15_0;
 800054a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800054e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000552:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000556:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800055a:	6812      	ldr	r2, [r2, #0]
 800055c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000560:	601a      	str	r2, [r3, #0]
    GPIOD->OTYPER &= ~GPIO_OTYPER_OT_15;
 8000562:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000566:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800056a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800056e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000572:	6852      	ldr	r2, [r2, #4]
 8000574:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000578:	605a      	str	r2, [r3, #4]
    GPIOD->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR15;
 800057a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800057e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000582:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000586:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800058a:	6892      	ldr	r2, [r2, #8]
 800058c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8000590:	609a      	str	r2, [r3, #8]
    GPIOD->PUPDR &= ~GPIO_PUPDR_PUPDR15;
 8000592:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000596:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800059a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800059e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005a2:	68d2      	ldr	r2, [r2, #12]
 80005a4:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80005a8:	60da      	str	r2, [r3, #12]
    
    GPIOD->MODER |= GPIO_MODER_MODER12_0;
 80005aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005b2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80005b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005ba:	6812      	ldr	r2, [r2, #0]
 80005bc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80005c0:	601a      	str	r2, [r3, #0]
    GPIOD->OTYPER &= ~GPIO_OTYPER_OT_12;
 80005c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005ca:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80005ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005d2:	6852      	ldr	r2, [r2, #4]
 80005d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80005d8:	605a      	str	r2, [r3, #4]
    GPIOD->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR12;
 80005da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005e2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80005e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005ea:	6892      	ldr	r2, [r2, #8]
 80005ec:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80005f0:	609a      	str	r2, [r3, #8]
    GPIOD->PUPDR &= ~GPIO_PUPDR_PUPDR12;
 80005f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005fa:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80005fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000602:	68d2      	ldr	r2, [r2, #12]
 8000604:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000608:	60da      	str	r2, [r3, #12]

    uint32_t i=0;
 800060a:	f04f 0300 	mov.w	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
    uint32_t result;
    float wortel = 0.0f;
 8000610:	f04f 0300 	mov.w	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
    int flag = 0;
 8000616:	f04f 0300 	mov.w	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
    int j;

    for EVER
    {
        i++;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f103 0301 	add.w	r3, r3, #1
 8000622:	607b      	str	r3, [r7, #4]
        fast_increment(&i);
 8000624:	f107 0304 	add.w	r3, r7, #4
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fb39 	bl	8000ca0 <__fast_increment_veneer>
        result = isqrt3(308025);
 800062e:	f24b 3039 	movw	r0, #45881	; 0xb339
 8000632:	f2c0 0004 	movt	r0, #4
 8000636:	f000 fb2b 	bl	8000c90 <__isqrt3_veneer>
 800063a:	60b8      	str	r0, [r7, #8]
        for(j = 0; j < 500000; j++)
 800063c:	f04f 0300 	mov.w	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
 8000642:	e008      	b.n	8000656 <main+0x12a>
          wortel = sinf(0.523534);
 8000644:	f64f 03a6 	movw	r3, #63654	; 0xf8a6
 8000648:	f6c3 63ff 	movt	r3, #16127	; 0x3eff
 800064c:	60fb      	str	r3, [r7, #12]
    for EVER
    {
        i++;
        fast_increment(&i);
        result = isqrt3(308025);
        for(j = 0; j < 500000; j++)
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	f103 0301 	add.w	r3, r3, #1
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	f24a 131f 	movw	r3, #41247	; 0xa11f
 800065c:	f2c0 0307 	movt	r3, #7
 8000660:	429a      	cmp	r2, r3
 8000662:	ddef      	ble.n	8000644 <main+0x118>
          wortel = sinf(0.523534);

        flag = ~flag;
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	ea6f 0303 	mvn.w	r3, r3
 800066a:	617b      	str	r3, [r7, #20]
        if(flag)
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d007      	beq.n	8000682 <main+0x156>
          GPIOD->ODR = GPIO_Pin_15;
 8000672:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000676:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800067a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800067e:	615a      	str	r2, [r3, #20]
        else
          GPIOD->ODR = GPIO_Pin_12;
    }
 8000680:	e7cc      	b.n	800061c <main+0xf0>

        flag = ~flag;
        if(flag)
          GPIOD->ODR = GPIO_Pin_15;
        else
          GPIOD->ODR = GPIO_Pin_12;
 8000682:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000686:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800068a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800068e:	615a      	str	r2, [r3, #20]
    }
 8000690:	e7c4      	b.n	800061c <main+0xf0>
 8000692:	bf00      	nop
 8000694:	08000cd0 	.word	0x08000cd0
 8000698:	20000000 	.word	0x20000000
 800069c:	20000444 	.word	0x20000444
 80006a0:	20000454 	.word	0x20000454
 80006a4:	20000474 	.word	0x20000474

080006a8 <__register_exitproc>:
 80006a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006ac:	4c27      	ldr	r4, [pc, #156]	; (800074c <__register_exitproc+0xa4>)
 80006ae:	6825      	ldr	r5, [r4, #0]
 80006b0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80006b4:	b084      	sub	sp, #16
 80006b6:	4607      	mov	r7, r0
 80006b8:	2c00      	cmp	r4, #0
 80006ba:	d041      	beq.n	8000740 <__register_exitproc+0x98>
 80006bc:	6866      	ldr	r6, [r4, #4]
 80006be:	2e1f      	cmp	r6, #31
 80006c0:	dd1c      	ble.n	80006fc <__register_exitproc+0x54>
 80006c2:	4823      	ldr	r0, [pc, #140]	; (8000750 <__register_exitproc+0xa8>)
 80006c4:	b910      	cbnz	r0, 80006cc <__register_exitproc+0x24>
 80006c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006ca:	e01f      	b.n	800070c <__register_exitproc+0x64>
 80006cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80006d0:	9103      	str	r1, [sp, #12]
 80006d2:	9202      	str	r2, [sp, #8]
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	f3af 8000 	nop.w
 80006da:	9903      	ldr	r1, [sp, #12]
 80006dc:	9a02      	ldr	r2, [sp, #8]
 80006de:	9b01      	ldr	r3, [sp, #4]
 80006e0:	4604      	mov	r4, r0
 80006e2:	2800      	cmp	r0, #0
 80006e4:	d0ef      	beq.n	80006c6 <__register_exitproc+0x1e>
 80006e6:	f8d5 6148 	ldr.w	r6, [r5, #328]	; 0x148
 80006ea:	2000      	movs	r0, #0
 80006ec:	6060      	str	r0, [r4, #4]
 80006ee:	6026      	str	r6, [r4, #0]
 80006f0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80006f4:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 80006f8:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 80006fc:	6865      	ldr	r5, [r4, #4]
 80006fe:	b947      	cbnz	r7, 8000712 <__register_exitproc+0x6a>
 8000700:	1ca8      	adds	r0, r5, #2
 8000702:	3501      	adds	r5, #1
 8000704:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
 8000708:	6065      	str	r5, [r4, #4]
 800070a:	2000      	movs	r0, #0
 800070c:	b004      	add	sp, #16
 800070e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000712:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 8000716:	2001      	movs	r0, #1
 8000718:	eb04 0885 	add.w	r8, r4, r5, lsl #2
 800071c:	fa00 f005 	lsl.w	r0, r0, r5
 8000720:	4306      	orrs	r6, r0
 8000722:	2f02      	cmp	r7, #2
 8000724:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 8000728:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 800072c:	f8c8 3108 	str.w	r3, [r8, #264]	; 0x108
 8000730:	d1e6      	bne.n	8000700 <__register_exitproc+0x58>
 8000732:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8000736:	ea43 0200 	orr.w	r2, r3, r0
 800073a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800073e:	e7df      	b.n	8000700 <__register_exitproc+0x58>
 8000740:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8000744:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000748:	e7b8      	b.n	80006bc <__register_exitproc+0x14>
 800074a:	bf00      	nop
 800074c:	08000cb4 	.word	0x08000cb4
 8000750:	00000000 	.word	0x00000000

08000754 <exit>:
 8000754:	b508      	push	{r3, lr}
 8000756:	2100      	movs	r1, #0
 8000758:	4604      	mov	r4, r0
 800075a:	f000 f91d 	bl	8000998 <__call_exitprocs>
 800075e:	4b04      	ldr	r3, [pc, #16]	; (8000770 <exit+0x1c>)
 8000760:	6818      	ldr	r0, [r3, #0]
 8000762:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000764:	b101      	cbz	r1, 8000768 <exit+0x14>
 8000766:	4788      	blx	r1
 8000768:	4620      	mov	r0, r4
 800076a:	f000 fa5f 	bl	8000c2c <_exit>
 800076e:	bf00      	nop
 8000770:	08000cb4 	.word	0x08000cb4

08000774 <__libc_fini_array>:
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <__libc_fini_array+0x48>)
 8000778:	4c11      	ldr	r4, [pc, #68]	; (80007c0 <__libc_fini_array+0x4c>)
 800077a:	1b18      	subs	r0, r3, r4
 800077c:	1081      	asrs	r1, r0, #2
 800077e:	d018      	beq.n	80007b2 <__libc_fini_array+0x3e>
 8000780:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8000784:	1e4e      	subs	r6, r1, #1
 8000786:	4635      	mov	r5, r6
 8000788:	f854 2d04 	ldr.w	r2, [r4, #-4]!
 800078c:	f006 0601 	and.w	r6, r6, #1
 8000790:	4790      	blx	r2
 8000792:	b175      	cbz	r5, 80007b2 <__libc_fini_array+0x3e>
 8000794:	b126      	cbz	r6, 80007a0 <__libc_fini_array+0x2c>
 8000796:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800079a:	4798      	blx	r3
 800079c:	3d01      	subs	r5, #1
 800079e:	d008      	beq.n	80007b2 <__libc_fini_array+0x3e>
 80007a0:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 80007a4:	4780      	blx	r0
 80007a6:	3d01      	subs	r5, #1
 80007a8:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80007ac:	4788      	blx	r1
 80007ae:	3d01      	subs	r5, #1
 80007b0:	d1f6      	bne.n	80007a0 <__libc_fini_array+0x2c>
 80007b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80007b6:	f000 ba85 	b.w	8000cc4 <_fini>
 80007ba:	bf00      	nop
	...

080007c4 <__libc_init_array>:
 80007c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c6:	4f20      	ldr	r7, [pc, #128]	; (8000848 <__libc_init_array+0x84>)
 80007c8:	4c20      	ldr	r4, [pc, #128]	; (800084c <__libc_init_array+0x88>)
 80007ca:	1b38      	subs	r0, r7, r4
 80007cc:	1087      	asrs	r7, r0, #2
 80007ce:	d017      	beq.n	8000800 <__libc_init_array+0x3c>
 80007d0:	1e7a      	subs	r2, r7, #1
 80007d2:	6823      	ldr	r3, [r4, #0]
 80007d4:	2501      	movs	r5, #1
 80007d6:	f002 0601 	and.w	r6, r2, #1
 80007da:	4798      	blx	r3
 80007dc:	42af      	cmp	r7, r5
 80007de:	d00f      	beq.n	8000800 <__libc_init_array+0x3c>
 80007e0:	b12e      	cbz	r6, 80007ee <__libc_init_array+0x2a>
 80007e2:	f854 1f04 	ldr.w	r1, [r4, #4]!
 80007e6:	2502      	movs	r5, #2
 80007e8:	4788      	blx	r1
 80007ea:	42af      	cmp	r7, r5
 80007ec:	d008      	beq.n	8000800 <__libc_init_array+0x3c>
 80007ee:	6860      	ldr	r0, [r4, #4]
 80007f0:	4780      	blx	r0
 80007f2:	3502      	adds	r5, #2
 80007f4:	68a2      	ldr	r2, [r4, #8]
 80007f6:	1d26      	adds	r6, r4, #4
 80007f8:	4790      	blx	r2
 80007fa:	3408      	adds	r4, #8
 80007fc:	42af      	cmp	r7, r5
 80007fe:	d1f6      	bne.n	80007ee <__libc_init_array+0x2a>
 8000800:	4f13      	ldr	r7, [pc, #76]	; (8000850 <__libc_init_array+0x8c>)
 8000802:	4c14      	ldr	r4, [pc, #80]	; (8000854 <__libc_init_array+0x90>)
 8000804:	f000 fa58 	bl	8000cb8 <_init>
 8000808:	1b3b      	subs	r3, r7, r4
 800080a:	109f      	asrs	r7, r3, #2
 800080c:	d018      	beq.n	8000840 <__libc_init_array+0x7c>
 800080e:	1e7d      	subs	r5, r7, #1
 8000810:	6821      	ldr	r1, [r4, #0]
 8000812:	f005 0601 	and.w	r6, r5, #1
 8000816:	2501      	movs	r5, #1
 8000818:	4788      	blx	r1
 800081a:	42af      	cmp	r7, r5
 800081c:	d011      	beq.n	8000842 <__libc_init_array+0x7e>
 800081e:	b12e      	cbz	r6, 800082c <__libc_init_array+0x68>
 8000820:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8000824:	2502      	movs	r5, #2
 8000826:	4780      	blx	r0
 8000828:	42af      	cmp	r7, r5
 800082a:	d00b      	beq.n	8000844 <__libc_init_array+0x80>
 800082c:	6862      	ldr	r2, [r4, #4]
 800082e:	4790      	blx	r2
 8000830:	3502      	adds	r5, #2
 8000832:	68a3      	ldr	r3, [r4, #8]
 8000834:	1d26      	adds	r6, r4, #4
 8000836:	4798      	blx	r3
 8000838:	3408      	adds	r4, #8
 800083a:	42af      	cmp	r7, r5
 800083c:	d1f6      	bne.n	800082c <__libc_init_array+0x68>
 800083e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000846:	bf00      	nop
	...

08000858 <memset>:
 8000858:	b4f0      	push	{r4, r5, r6, r7}
 800085a:	0784      	lsls	r4, r0, #30
 800085c:	4603      	mov	r3, r0
 800085e:	f000 808e 	beq.w	800097e <memset+0x126>
 8000862:	1e54      	subs	r4, r2, #1
 8000864:	2a00      	cmp	r2, #0
 8000866:	f000 8088 	beq.w	800097a <memset+0x122>
 800086a:	07e5      	lsls	r5, r4, #31
 800086c:	b2ce      	uxtb	r6, r1
 800086e:	d411      	bmi.n	8000894 <memset+0x3c>
 8000870:	461a      	mov	r2, r3
 8000872:	1e67      	subs	r7, r4, #1
 8000874:	f802 6b01 	strb.w	r6, [r2], #1
 8000878:	4613      	mov	r3, r2
 800087a:	4615      	mov	r5, r2
 800087c:	0792      	lsls	r2, r2, #30
 800087e:	d00f      	beq.n	80008a0 <memset+0x48>
 8000880:	2c00      	cmp	r4, #0
 8000882:	d07a      	beq.n	800097a <memset+0x122>
 8000884:	f803 6b01 	strb.w	r6, [r3], #1
 8000888:	079a      	lsls	r2, r3, #30
 800088a:	463c      	mov	r4, r7
 800088c:	461d      	mov	r5, r3
 800088e:	d007      	beq.n	80008a0 <memset+0x48>
 8000890:	3c01      	subs	r4, #1
 8000892:	e7ed      	b.n	8000870 <memset+0x18>
 8000894:	4603      	mov	r3, r0
 8000896:	f803 6b01 	strb.w	r6, [r3], #1
 800089a:	079a      	lsls	r2, r3, #30
 800089c:	461d      	mov	r5, r3
 800089e:	d1f7      	bne.n	8000890 <memset+0x38>
 80008a0:	2c03      	cmp	r4, #3
 80008a2:	d952      	bls.n	800094a <memset+0xf2>
 80008a4:	b2ce      	uxtb	r6, r1
 80008a6:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 80008aa:	2c0f      	cmp	r4, #15
 80008ac:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 80008b0:	d92d      	bls.n	800090e <memset+0xb6>
 80008b2:	f1a4 0210 	sub.w	r2, r4, #16
 80008b6:	4617      	mov	r7, r2
 80008b8:	2f0f      	cmp	r7, #15
 80008ba:	f3c2 1600 	ubfx	r6, r2, #4, #1
 80008be:	602b      	str	r3, [r5, #0]
 80008c0:	606b      	str	r3, [r5, #4]
 80008c2:	60ab      	str	r3, [r5, #8]
 80008c4:	60eb      	str	r3, [r5, #12]
 80008c6:	f105 0210 	add.w	r2, r5, #16
 80008ca:	d916      	bls.n	80008fa <memset+0xa2>
 80008cc:	b13e      	cbz	r6, 80008de <memset+0x86>
 80008ce:	3f10      	subs	r7, #16
 80008d0:	6013      	str	r3, [r2, #0]
 80008d2:	6053      	str	r3, [r2, #4]
 80008d4:	6093      	str	r3, [r2, #8]
 80008d6:	60d3      	str	r3, [r2, #12]
 80008d8:	3210      	adds	r2, #16
 80008da:	2f0f      	cmp	r7, #15
 80008dc:	d90d      	bls.n	80008fa <memset+0xa2>
 80008de:	3f20      	subs	r7, #32
 80008e0:	f102 0610 	add.w	r6, r2, #16
 80008e4:	6013      	str	r3, [r2, #0]
 80008e6:	6053      	str	r3, [r2, #4]
 80008e8:	6093      	str	r3, [r2, #8]
 80008ea:	60d3      	str	r3, [r2, #12]
 80008ec:	6113      	str	r3, [r2, #16]
 80008ee:	6153      	str	r3, [r2, #20]
 80008f0:	6193      	str	r3, [r2, #24]
 80008f2:	61d3      	str	r3, [r2, #28]
 80008f4:	3220      	adds	r2, #32
 80008f6:	2f0f      	cmp	r7, #15
 80008f8:	d8f1      	bhi.n	80008de <memset+0x86>
 80008fa:	f1a4 0210 	sub.w	r2, r4, #16
 80008fe:	f022 020f 	bic.w	r2, r2, #15
 8000902:	f004 040f 	and.w	r4, r4, #15
 8000906:	3210      	adds	r2, #16
 8000908:	2c03      	cmp	r4, #3
 800090a:	4415      	add	r5, r2
 800090c:	d91d      	bls.n	800094a <memset+0xf2>
 800090e:	1f27      	subs	r7, r4, #4
 8000910:	463e      	mov	r6, r7
 8000912:	462a      	mov	r2, r5
 8000914:	2e03      	cmp	r6, #3
 8000916:	f842 3b04 	str.w	r3, [r2], #4
 800091a:	f3c7 0780 	ubfx	r7, r7, #2, #1
 800091e:	d90d      	bls.n	800093c <memset+0xe4>
 8000920:	b127      	cbz	r7, 800092c <memset+0xd4>
 8000922:	3e04      	subs	r6, #4
 8000924:	2e03      	cmp	r6, #3
 8000926:	f842 3b04 	str.w	r3, [r2], #4
 800092a:	d907      	bls.n	800093c <memset+0xe4>
 800092c:	4617      	mov	r7, r2
 800092e:	3e08      	subs	r6, #8
 8000930:	f847 3b04 	str.w	r3, [r7], #4
 8000934:	6053      	str	r3, [r2, #4]
 8000936:	1d3a      	adds	r2, r7, #4
 8000938:	2e03      	cmp	r6, #3
 800093a:	d8f7      	bhi.n	800092c <memset+0xd4>
 800093c:	1f23      	subs	r3, r4, #4
 800093e:	f023 0203 	bic.w	r2, r3, #3
 8000942:	1d13      	adds	r3, r2, #4
 8000944:	f004 0403 	and.w	r4, r4, #3
 8000948:	18ed      	adds	r5, r5, r3
 800094a:	b1b4      	cbz	r4, 800097a <memset+0x122>
 800094c:	462b      	mov	r3, r5
 800094e:	b2c9      	uxtb	r1, r1
 8000950:	f803 1b01 	strb.w	r1, [r3], #1
 8000954:	192c      	adds	r4, r5, r4
 8000956:	43ed      	mvns	r5, r5
 8000958:	1962      	adds	r2, r4, r5
 800095a:	42a3      	cmp	r3, r4
 800095c:	f002 0501 	and.w	r5, r2, #1
 8000960:	d00b      	beq.n	800097a <memset+0x122>
 8000962:	b11d      	cbz	r5, 800096c <memset+0x114>
 8000964:	f803 1b01 	strb.w	r1, [r3], #1
 8000968:	42a3      	cmp	r3, r4
 800096a:	d006      	beq.n	800097a <memset+0x122>
 800096c:	461a      	mov	r2, r3
 800096e:	f802 1b01 	strb.w	r1, [r2], #1
 8000972:	7059      	strb	r1, [r3, #1]
 8000974:	1c53      	adds	r3, r2, #1
 8000976:	42a3      	cmp	r3, r4
 8000978:	d1f8      	bne.n	800096c <memset+0x114>
 800097a:	bcf0      	pop	{r4, r5, r6, r7}
 800097c:	4770      	bx	lr
 800097e:	4605      	mov	r5, r0
 8000980:	4614      	mov	r4, r2
 8000982:	e78d      	b.n	80008a0 <memset+0x48>

08000984 <register_fini>:
 8000984:	4b02      	ldr	r3, [pc, #8]	; (8000990 <register_fini+0xc>)
 8000986:	b113      	cbz	r3, 800098e <register_fini+0xa>
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <register_fini+0x10>)
 800098a:	f000 b949 	b.w	8000c20 <atexit>
 800098e:	4770      	bx	lr
 8000990:	00000000 	.word	0x00000000
 8000994:	08000775 	.word	0x08000775

08000998 <__call_exitprocs>:
 8000998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800099c:	4b9f      	ldr	r3, [pc, #636]	; (8000c1c <__call_exitprocs+0x284>)
 800099e:	b087      	sub	sp, #28
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	9004      	str	r0, [sp, #16]
 80009a4:	f502 70a4 	add.w	r0, r2, #328	; 0x148
 80009a8:	9203      	str	r2, [sp, #12]
 80009aa:	460d      	mov	r5, r1
 80009ac:	9005      	str	r0, [sp, #20]
 80009ae:	f04f 0a01 	mov.w	sl, #1
 80009b2:	9903      	ldr	r1, [sp, #12]
 80009b4:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80009b8:	f8d1 4148 	ldr.w	r4, [r1, #328]	; 0x148
 80009bc:	2c00      	cmp	r4, #0
 80009be:	d043      	beq.n	8000a48 <__call_exitprocs+0xb0>
 80009c0:	6862      	ldr	r2, [r4, #4]
 80009c2:	f1b2 0801 	subs.w	r8, r2, #1
 80009c6:	d438      	bmi.n	8000a3a <__call_exitprocs+0xa2>
 80009c8:	f104 0b88 	add.w	fp, r4, #136	; 0x88
 80009cc:	321f      	adds	r2, #31
 80009ce:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 80009d2:	f008 0c01 	and.w	ip, r8, #1
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	f000 808c 	beq.w	8000af4 <__call_exitprocs+0x15c>
 80009dc:	f85b 6022 	ldr.w	r6, [fp, r2, lsl #2]
 80009e0:	42ae      	cmp	r6, r5
 80009e2:	f000 8087 	beq.w	8000af4 <__call_exitprocs+0x15c>
 80009e6:	1f1e      	subs	r6, r3, #4
 80009e8:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 80009ec:	f1b8 0f00 	cmp.w	r8, #0
 80009f0:	d023      	beq.n	8000a3a <__call_exitprocs+0xa2>
 80009f2:	f1bc 0f00 	cmp.w	ip, #0
 80009f6:	d00b      	beq.n	8000a10 <__call_exitprocs+0x78>
 80009f8:	2d00      	cmp	r5, #0
 80009fa:	f000 80a2 	beq.w	8000b42 <__call_exitprocs+0x1aa>
 80009fe:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8000a02:	42ab      	cmp	r3, r5
 8000a04:	f000 809d 	beq.w	8000b42 <__call_exitprocs+0x1aa>
 8000a08:	3f01      	subs	r7, #1
 8000a0a:	3e04      	subs	r6, #4
 8000a0c:	1c7b      	adds	r3, r7, #1
 8000a0e:	d014      	beq.n	8000a3a <__call_exitprocs+0xa2>
 8000a10:	46b8      	mov	r8, r7
 8000a12:	b1e5      	cbz	r5, 8000a4e <__call_exitprocs+0xb6>
 8000a14:	6837      	ldr	r7, [r6, #0]
 8000a16:	42af      	cmp	r7, r5
 8000a18:	d019      	beq.n	8000a4e <__call_exitprocs+0xb6>
 8000a1a:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8000a1e:	f1a6 0804 	sub.w	r8, r6, #4
 8000a22:	2d00      	cmp	r5, #0
 8000a24:	d03f      	beq.n	8000aa6 <__call_exitprocs+0x10e>
 8000a26:	f856 6c04 	ldr.w	r6, [r6, #-4]
 8000a2a:	42ae      	cmp	r6, r5
 8000a2c:	d03b      	beq.n	8000aa6 <__call_exitprocs+0x10e>
 8000a2e:	f1a8 0604 	sub.w	r6, r8, #4
 8000a32:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 8000a36:	2f00      	cmp	r7, #0
 8000a38:	d1eb      	bne.n	8000a12 <__call_exitprocs+0x7a>
 8000a3a:	f240 0200 	movw	r2, #0
 8000a3e:	f2c0 0200 	movt	r2, #0
 8000a42:	2a00      	cmp	r2, #0
 8000a44:	f040 80da 	bne.w	8000bfc <__call_exitprocs+0x264>
 8000a48:	b007      	add	sp, #28
 8000a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a4e:	6861      	ldr	r1, [r4, #4]
 8000a50:	ebcb 0206 	rsb	r2, fp, r6
 8000a54:	18a0      	adds	r0, r4, r2
 8000a56:	1e4f      	subs	r7, r1, #1
 8000a58:	4547      	cmp	r7, r8
 8000a5a:	f850 3c78 	ldr.w	r3, [r0, #-120]
 8000a5e:	f000 8092 	beq.w	8000b86 <__call_exitprocs+0x1ee>
 8000a62:	2200      	movs	r2, #0
 8000a64:	f840 2c78 	str.w	r2, [r0, #-120]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d0d6      	beq.n	8000a1a <__call_exitprocs+0x82>
 8000a6c:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 8000a70:	6867      	ldr	r7, [r4, #4]
 8000a72:	fa0a f008 	lsl.w	r0, sl, r8
 8000a76:	4208      	tst	r0, r1
 8000a78:	d03a      	beq.n	8000af0 <__call_exitprocs+0x158>
 8000a7a:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 8000a7e:	4210      	tst	r0, r2
 8000a80:	f040 8097 	bne.w	8000bb2 <__call_exitprocs+0x21a>
 8000a84:	9804      	ldr	r0, [sp, #16]
 8000a86:	f856 1c80 	ldr.w	r1, [r6, #-128]
 8000a8a:	4798      	blx	r3
 8000a8c:	6863      	ldr	r3, [r4, #4]
 8000a8e:	42bb      	cmp	r3, r7
 8000a90:	d18f      	bne.n	80009b2 <__call_exitprocs+0x1a>
 8000a92:	f8d9 1000 	ldr.w	r1, [r9]
 8000a96:	42a1      	cmp	r1, r4
 8000a98:	d18b      	bne.n	80009b2 <__call_exitprocs+0x1a>
 8000a9a:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8000a9e:	f1a6 0804 	sub.w	r8, r6, #4
 8000aa2:	2d00      	cmp	r5, #0
 8000aa4:	d1bf      	bne.n	8000a26 <__call_exitprocs+0x8e>
 8000aa6:	6863      	ldr	r3, [r4, #4]
 8000aa8:	ebcb 0008 	rsb	r0, fp, r8
 8000aac:	1e59      	subs	r1, r3, #1
 8000aae:	1822      	adds	r2, r4, r0
 8000ab0:	42b9      	cmp	r1, r7
 8000ab2:	f852 3c78 	ldr.w	r3, [r2, #-120]
 8000ab6:	d069      	beq.n	8000b8c <__call_exitprocs+0x1f4>
 8000ab8:	2600      	movs	r6, #0
 8000aba:	f842 6c78 	str.w	r6, [r2, #-120]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d0b5      	beq.n	8000a2e <__call_exitprocs+0x96>
 8000ac2:	f8d4 0188 	ldr.w	r0, [r4, #392]	; 0x188
 8000ac6:	6866      	ldr	r6, [r4, #4]
 8000ac8:	fa0a f207 	lsl.w	r2, sl, r7
 8000acc:	4202      	tst	r2, r0
 8000ace:	d036      	beq.n	8000b3e <__call_exitprocs+0x1a6>
 8000ad0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8000ad4:	420a      	tst	r2, r1
 8000ad6:	d070      	beq.n	8000bba <__call_exitprocs+0x222>
 8000ad8:	f858 0c80 	ldr.w	r0, [r8, #-128]
 8000adc:	4798      	blx	r3
 8000ade:	6863      	ldr	r3, [r4, #4]
 8000ae0:	42b3      	cmp	r3, r6
 8000ae2:	f47f af66 	bne.w	80009b2 <__call_exitprocs+0x1a>
 8000ae6:	f8d9 0000 	ldr.w	r0, [r9]
 8000aea:	42a0      	cmp	r0, r4
 8000aec:	d09f      	beq.n	8000a2e <__call_exitprocs+0x96>
 8000aee:	e760      	b.n	80009b2 <__call_exitprocs+0x1a>
 8000af0:	4798      	blx	r3
 8000af2:	e7cb      	b.n	8000a8c <__call_exitprocs+0xf4>
 8000af4:	6862      	ldr	r2, [r4, #4]
 8000af6:	ebcb 0003 	rsb	r0, fp, r3
 8000afa:	1e56      	subs	r6, r2, #1
 8000afc:	1821      	adds	r1, r4, r0
 8000afe:	4546      	cmp	r6, r8
 8000b00:	f851 2c78 	ldr.w	r2, [r1, #-120]
 8000b04:	d070      	beq.n	8000be8 <__call_exitprocs+0x250>
 8000b06:	2000      	movs	r0, #0
 8000b08:	f841 0c78 	str.w	r0, [r1, #-120]
 8000b0c:	2a00      	cmp	r2, #0
 8000b0e:	f43f af6a 	beq.w	80009e6 <__call_exitprocs+0x4e>
 8000b12:	f8d4 0188 	ldr.w	r0, [r4, #392]	; 0x188
 8000b16:	6866      	ldr	r6, [r4, #4]
 8000b18:	fa0a f108 	lsl.w	r1, sl, r8
 8000b1c:	4201      	tst	r1, r0
 8000b1e:	d037      	beq.n	8000b90 <__call_exitprocs+0x1f8>
 8000b20:	f8d4 018c 	ldr.w	r0, [r4, #396]	; 0x18c
 8000b24:	4201      	tst	r1, r0
 8000b26:	d155      	bne.n	8000bd4 <__call_exitprocs+0x23c>
 8000b28:	f853 1c80 	ldr.w	r1, [r3, #-128]
 8000b2c:	9804      	ldr	r0, [sp, #16]
 8000b2e:	9302      	str	r3, [sp, #8]
 8000b30:	f8cd c004 	str.w	ip, [sp, #4]
 8000b34:	4790      	blx	r2
 8000b36:	9b02      	ldr	r3, [sp, #8]
 8000b38:	f8dd c004 	ldr.w	ip, [sp, #4]
 8000b3c:	e02f      	b.n	8000b9e <__call_exitprocs+0x206>
 8000b3e:	4798      	blx	r3
 8000b40:	e7cd      	b.n	8000ade <__call_exitprocs+0x146>
 8000b42:	6861      	ldr	r1, [r4, #4]
 8000b44:	ebcb 0006 	rsb	r0, fp, r6
 8000b48:	1822      	adds	r2, r4, r0
 8000b4a:	1e48      	subs	r0, r1, #1
 8000b4c:	42b8      	cmp	r0, r7
 8000b4e:	f852 3c78 	ldr.w	r3, [r2, #-120]
 8000b52:	d04c      	beq.n	8000bee <__call_exitprocs+0x256>
 8000b54:	2100      	movs	r1, #0
 8000b56:	f842 1c78 	str.w	r1, [r2, #-120]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f43f af54 	beq.w	8000a08 <__call_exitprocs+0x70>
 8000b60:	f8d4 0188 	ldr.w	r0, [r4, #392]	; 0x188
 8000b64:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8000b68:	fa0a f207 	lsl.w	r2, sl, r7
 8000b6c:	4202      	tst	r2, r0
 8000b6e:	d129      	bne.n	8000bc4 <__call_exitprocs+0x22c>
 8000b70:	4798      	blx	r3
 8000b72:	6863      	ldr	r3, [r4, #4]
 8000b74:	4543      	cmp	r3, r8
 8000b76:	f47f af1c 	bne.w	80009b2 <__call_exitprocs+0x1a>
 8000b7a:	f8d9 0000 	ldr.w	r0, [r9]
 8000b7e:	42a0      	cmp	r0, r4
 8000b80:	f43f af42 	beq.w	8000a08 <__call_exitprocs+0x70>
 8000b84:	e715      	b.n	80009b2 <__call_exitprocs+0x1a>
 8000b86:	f8c4 8004 	str.w	r8, [r4, #4]
 8000b8a:	e76d      	b.n	8000a68 <__call_exitprocs+0xd0>
 8000b8c:	6067      	str	r7, [r4, #4]
 8000b8e:	e796      	b.n	8000abe <__call_exitprocs+0x126>
 8000b90:	9302      	str	r3, [sp, #8]
 8000b92:	f8cd c004 	str.w	ip, [sp, #4]
 8000b96:	4790      	blx	r2
 8000b98:	9b02      	ldr	r3, [sp, #8]
 8000b9a:	f8dd c004 	ldr.w	ip, [sp, #4]
 8000b9e:	6862      	ldr	r2, [r4, #4]
 8000ba0:	42b2      	cmp	r2, r6
 8000ba2:	f47f af06 	bne.w	80009b2 <__call_exitprocs+0x1a>
 8000ba6:	f8d9 1000 	ldr.w	r1, [r9]
 8000baa:	42a1      	cmp	r1, r4
 8000bac:	f43f af1b 	beq.w	80009e6 <__call_exitprocs+0x4e>
 8000bb0:	e6ff      	b.n	80009b2 <__call_exitprocs+0x1a>
 8000bb2:	f856 0c80 	ldr.w	r0, [r6, #-128]
 8000bb6:	4798      	blx	r3
 8000bb8:	e768      	b.n	8000a8c <__call_exitprocs+0xf4>
 8000bba:	9804      	ldr	r0, [sp, #16]
 8000bbc:	f858 1c80 	ldr.w	r1, [r8, #-128]
 8000bc0:	4798      	blx	r3
 8000bc2:	e78c      	b.n	8000ade <__call_exitprocs+0x146>
 8000bc4:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8000bc8:	420a      	tst	r2, r1
 8000bca:	d012      	beq.n	8000bf2 <__call_exitprocs+0x25a>
 8000bcc:	f856 0c80 	ldr.w	r0, [r6, #-128]
 8000bd0:	4798      	blx	r3
 8000bd2:	e7ce      	b.n	8000b72 <__call_exitprocs+0x1da>
 8000bd4:	f853 0c80 	ldr.w	r0, [r3, #-128]
 8000bd8:	9302      	str	r3, [sp, #8]
 8000bda:	f8cd c004 	str.w	ip, [sp, #4]
 8000bde:	4790      	blx	r2
 8000be0:	9b02      	ldr	r3, [sp, #8]
 8000be2:	f8dd c004 	ldr.w	ip, [sp, #4]
 8000be6:	e7da      	b.n	8000b9e <__call_exitprocs+0x206>
 8000be8:	f8c4 8004 	str.w	r8, [r4, #4]
 8000bec:	e78e      	b.n	8000b0c <__call_exitprocs+0x174>
 8000bee:	6067      	str	r7, [r4, #4]
 8000bf0:	e7b3      	b.n	8000b5a <__call_exitprocs+0x1c2>
 8000bf2:	9804      	ldr	r0, [sp, #16]
 8000bf4:	f856 1c80 	ldr.w	r1, [r6, #-128]
 8000bf8:	4798      	blx	r3
 8000bfa:	e7ba      	b.n	8000b72 <__call_exitprocs+0x1da>
 8000bfc:	6861      	ldr	r1, [r4, #4]
 8000bfe:	b949      	cbnz	r1, 8000c14 <__call_exitprocs+0x27c>
 8000c00:	6823      	ldr	r3, [r4, #0]
 8000c02:	b143      	cbz	r3, 8000c16 <__call_exitprocs+0x27e>
 8000c04:	4620      	mov	r0, r4
 8000c06:	f8c9 3000 	str.w	r3, [r9]
 8000c0a:	f3af 8000 	nop.w
 8000c0e:	f8d9 4000 	ldr.w	r4, [r9]
 8000c12:	e6d3      	b.n	80009bc <__call_exitprocs+0x24>
 8000c14:	6823      	ldr	r3, [r4, #0]
 8000c16:	46a1      	mov	r9, r4
 8000c18:	461c      	mov	r4, r3
 8000c1a:	e6cf      	b.n	80009bc <__call_exitprocs+0x24>
 8000c1c:	08000cb4 	.word	0x08000cb4

08000c20 <atexit>:
 8000c20:	4601      	mov	r1, r0
 8000c22:	2000      	movs	r0, #0
 8000c24:	4602      	mov	r2, r0
 8000c26:	4603      	mov	r3, r0
 8000c28:	f7ff bd3e 	b.w	80006a8 <__register_exitproc>

08000c2c <_exit>:
 8000c2c:	e7fe      	b.n	8000c2c <_exit>
 8000c2e:	bf00      	nop

08000c30 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function

Reset_Handler:  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c32:	f000 b804 	b.w	8000c3e <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <LoopFillZerobss+0x1e>)
  ldr  r3, [r3, r1]
 8000c38:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c3a:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c3c:	3104      	adds	r1, #4

08000c3e <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c3e:	480e      	ldr	r0, [pc, #56]	; (8000c78 <LoopFillZerobss+0x22>)
  ldr  r3, =_edata
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <LoopFillZerobss+0x26>)
  adds  r2, r0, r1
 8000c42:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c44:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c46:	f4ff aff6 	bcc.w	8000c36 <CopyDataInit>
  ldr  r2, =_sbss
 8000c4a:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <LoopFillZerobss+0x2a>)
  b  LoopFillZerobss
 8000c4c:	f000 b803 	b.w	8000c56 <LoopFillZerobss>

08000c50 <FillZerobss>:

/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c50:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c52:	f842 3b04 	str.w	r3, [r2], #4

08000c56 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <LoopFillZerobss+0x2e>)
  cmp  r2, r3
 8000c58:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c5a:	f4ff aff9 	bcc.w	8000c50 <FillZerobss>

/* FPU settings */
/* Enable CP10,CP11: Privileged and User mode access to coprocessor */
 ldr     r0, =0xE000ED88           
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <LoopFillZerobss+0x32>)
 ldr     r1,[r0]
 8000c60:	6801      	ldr	r1, [r0, #0]
 orr     r1,r1,#(0xF << 20)
 8000c62:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 str     r1,[r0]
 8000c66:	6001      	str	r1, [r0, #0]

/* TODO: Add stack painting here */

/* Call the clock system intitialization function.*/
  bl  low_level_init   
 8000c68:	f7ff fb2a 	bl	80002c0 <low_level_init>

/* Call the application's entry point.*/
  bl  main  /* Enter the C/C++ code */
 8000c6c:	f7ff fc5e 	bl	800052c <main>
  bx  lr    
 8000c70:	4770      	bx	lr
  swi 0x0  /* cause exception if main() ever returns */
 8000c72:	df00      	svc	0
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000c74:	08000cd0 	.word	0x08000cd0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c7c:	20000444 	.word	0x20000444
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000c80:	20000454 	.word	0x20000454
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c84:	20000474 	.word	0x20000474
  cmp  r2, r3
  bcc  FillZerobss

/* FPU settings */
/* Enable CP10,CP11: Privileged and User mode access to coprocessor */
 ldr     r0, =0xE000ED88           
 8000c88:	e000ed88 	.word	0xe000ed88

08000c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c8c:	f7ff bffe 	b.w	8000c8c <ADC_IRQHandler>

08000c90 <__isqrt3_veneer>:
 8000c90:	b401      	push	{r0}
 8000c92:	4802      	ldr	r0, [pc, #8]	; (8000c9c <__isqrt3_veneer+0xc>)
 8000c94:	4684      	mov	ip, r0
 8000c96:	bc01      	pop	{r0}
 8000c98:	4760      	bx	ip
 8000c9a:	bf00      	nop
 8000c9c:	20000495 	.word	0x20000495

08000ca0 <__fast_increment_veneer>:
 8000ca0:	b401      	push	{r0}
 8000ca2:	4802      	ldr	r0, [pc, #8]	; (8000cac <__fast_increment_veneer+0xc>)
 8000ca4:	4684      	mov	ip, r0
 8000ca6:	bc01      	pop	{r0}
 8000ca8:	4760      	bx	ip
 8000caa:	bf00      	nop
 8000cac:	20000475 	.word	0x20000475
 8000cb0:	00000043 	.word	0x00000043

08000cb4 <_global_impure_ptr>:
 8000cb4:	20000018                                ... 

Disassembly of section .init:

08000cb8 <_init>:
 8000cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cba:	bf00      	nop
 8000cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cbe:	bc08      	pop	{r3}
 8000cc0:	469e      	mov	lr, r3
 8000cc2:	4770      	bx	lr

Disassembly of section .fini:

08000cc4 <_fini>:
 8000cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc6:	bf00      	nop
 8000cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cca:	bc08      	pop	{r3}
 8000ccc:	469e      	mov	lr, r3
 8000cce:	4770      	bx	lr

Disassembly of section .fastcode:

20000474 <fast_increment>:
}

__attribute__ ((section (".fastcode"))) 
void fast_increment(uint32_t * i)
{
20000474:	b480      	push	{r7}
20000476:	b083      	sub	sp, #12
20000478:	af00      	add	r7, sp, #0
2000047a:	6078      	str	r0, [r7, #4]
    (*i)++;
2000047c:	687b      	ldr	r3, [r7, #4]
2000047e:	681b      	ldr	r3, [r3, #0]
20000480:	f103 0201 	add.w	r2, r3, #1
20000484:	687b      	ldr	r3, [r7, #4]
20000486:	601a      	str	r2, [r3, #0]
}
20000488:	f107 070c 	add.w	r7, r7, #12
2000048c:	46bd      	mov	sp, r7
2000048e:	bc80      	pop	{r7}
20000490:	4770      	bx	lr
20000492:	bf00      	nop

20000494 <isqrt3>:

__attribute__ ((section (".fastcode"))) 
uint32_t isqrt3(uint32_t n)
{
20000494:	b480      	push	{r7}
20000496:	b087      	sub	sp, #28
20000498:	af00      	add	r7, sp, #0
2000049a:	6078      	str	r0, [r7, #4]
   uint32_t root = 0, bit, trial;
2000049c:	f04f 0300 	mov.w	r3, #0
200004a0:	617b      	str	r3, [r7, #20]
   bit = (n >= 0x10000) ? 1<<30 : 1<<14; /* 16bit or 32 bit? */
200004a2:	687a      	ldr	r2, [r7, #4]
200004a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
200004a8:	429a      	cmp	r2, r3
200004aa:	d902      	bls.n	200004b2 <isqrt3+0x1e>
200004ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
200004b0:	e001      	b.n	200004b6 <isqrt3+0x22>
200004b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
200004b6:	613b      	str	r3, [r7, #16]
   do
   {
      trial = root+bit;
200004b8:	697a      	ldr	r2, [r7, #20]
200004ba:	693b      	ldr	r3, [r7, #16]
200004bc:	18d3      	adds	r3, r2, r3
200004be:	60fb      	str	r3, [r7, #12]
      if (n >= trial)
200004c0:	687a      	ldr	r2, [r7, #4]
200004c2:	68fb      	ldr	r3, [r7, #12]
200004c4:	429a      	cmp	r2, r3
200004c6:	d307      	bcc.n	200004d8 <isqrt3+0x44>
      {
         n -= trial;
200004c8:	687a      	ldr	r2, [r7, #4]
200004ca:	68fb      	ldr	r3, [r7, #12]
200004cc:	1ad3      	subs	r3, r2, r3
200004ce:	607b      	str	r3, [r7, #4]
         root = trial+bit;
200004d0:	68fa      	ldr	r2, [r7, #12]
200004d2:	693b      	ldr	r3, [r7, #16]
200004d4:	18d3      	adds	r3, r2, r3
200004d6:	617b      	str	r3, [r7, #20]
      }
      root >>= 1;
200004d8:	697b      	ldr	r3, [r7, #20]
200004da:	ea4f 0353 	mov.w	r3, r3, lsr #1
200004de:	617b      	str	r3, [r7, #20]
      bit >>= 2;
200004e0:	693b      	ldr	r3, [r7, #16]
200004e2:	ea4f 0393 	mov.w	r3, r3, lsr #2
200004e6:	613b      	str	r3, [r7, #16]
   } while (bit);
200004e8:	693b      	ldr	r3, [r7, #16]
200004ea:	2b00      	cmp	r3, #0
200004ec:	d1e4      	bne.n	200004b8 <isqrt3+0x24>
   return root;
200004ee:	697b      	ldr	r3, [r7, #20]
}
200004f0:	4618      	mov	r0, r3
200004f2:	f107 071c 	add.w	r7, r7, #28
200004f6:	46bd      	mov	sp, r7
200004f8:	bc80      	pop	{r7}
200004fa:	4770      	bx	lr
