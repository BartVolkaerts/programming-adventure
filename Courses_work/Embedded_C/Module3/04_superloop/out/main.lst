
out/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b110      	cbz	r0, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2101      	movs	r1, #1
 80001a8:	7021      	strb	r1, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200005fc 	.word	0x200005fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	20000188 	.word	0x20000188

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b06      	ldr	r3, [pc, #24]	; (80001d4 <frame_dummy+0x1c>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4806      	ldr	r0, [pc, #24]	; (80001d8 <frame_dummy+0x20>)
 80001c0:	4906      	ldr	r1, [pc, #24]	; (80001dc <frame_dummy+0x24>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	4806      	ldr	r0, [pc, #24]	; (80001e0 <frame_dummy+0x28>)
 80001c8:	6801      	ldr	r1, [r0, #0]
 80001ca:	b111      	cbz	r1, 80001d2 <frame_dummy+0x1a>
 80001cc:	4a05      	ldr	r2, [pc, #20]	; (80001e4 <frame_dummy+0x2c>)
 80001ce:	b102      	cbz	r2, 80001d2 <frame_dummy+0x1a>
 80001d0:	4790      	blx	r2
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000188 	.word	0x20000188
 80001dc:	20000600 	.word	0x20000600
 80001e0:	200005f4 	.word	0x200005f4
 80001e4:	00000000 	.word	0x00000000

080001e8 <_mainCRTStartup>:
 80001e8:	4b15      	ldr	r3, [pc, #84]	; (8000240 <_mainCRTStartup+0x58>)
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	bf08      	it	eq
 80001ee:	4b13      	ldreq	r3, [pc, #76]	; (800023c <_mainCRTStartup+0x54>)
 80001f0:	469d      	mov	sp, r3
 80001f2:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 80001f6:	2100      	movs	r1, #0
 80001f8:	468b      	mov	fp, r1
 80001fa:	460f      	mov	r7, r1
 80001fc:	4813      	ldr	r0, [pc, #76]	; (800024c <_mainCRTStartup+0x64>)
 80001fe:	4a14      	ldr	r2, [pc, #80]	; (8000250 <_mainCRTStartup+0x68>)
 8000200:	1a12      	subs	r2, r2, r0
 8000202:	f003 fc1f 	bl	8003a44 <memset>
 8000206:	4b0f      	ldr	r3, [pc, #60]	; (8000244 <_mainCRTStartup+0x5c>)
 8000208:	2b00      	cmp	r3, #0
 800020a:	d000      	beq.n	800020e <_mainCRTStartup+0x26>
 800020c:	4798      	blx	r3
 800020e:	4b0e      	ldr	r3, [pc, #56]	; (8000248 <_mainCRTStartup+0x60>)
 8000210:	2b00      	cmp	r3, #0
 8000212:	d000      	beq.n	8000216 <_mainCRTStartup+0x2e>
 8000214:	4798      	blx	r3
 8000216:	2000      	movs	r0, #0
 8000218:	2100      	movs	r1, #0
 800021a:	4604      	mov	r4, r0
 800021c:	460d      	mov	r5, r1
 800021e:	2000      	movs	r0, #0
 8000220:	490c      	ldr	r1, [pc, #48]	; (8000254 <_mainCRTStartup+0x6c>)
 8000222:	2200      	movs	r2, #0
 8000224:	2300      	movs	r3, #0
 8000226:	f003 fb35 	bl	8003894 <__register_exitproc>
 800022a:	f003 fbc1 	bl	80039b0 <__libc_init_array>
 800022e:	4620      	mov	r0, r4
 8000230:	4629      	mov	r1, r5
 8000232:	f000 f983 	bl	800053c <main>
 8000236:	f003 fb83 	bl	8003940 <exit>
 800023a:	bf00      	nop
 800023c:	00080000 	.word	0x00080000
	...
 800024c:	200005fc 	.word	0x200005fc
 8000250:	20000620 	.word	0x20000620
 8000254:	08003961 	.word	0x08003961

08000258 <NMI_Handler>:
/******************************************************************************/
/*            Cortex-M4 Processor Exceptions Handlers                         */
/******************************************************************************/

void NMI_Handler(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
}
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop

08000264 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000268:	e7fe      	b.n	8000268 <HardFault_Handler+0x4>
 800026a:	bf00      	nop

0800026c <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000270:	e7fe      	b.n	8000270 <MemManage_Handler+0x4>
 8000272:	bf00      	nop

08000274 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000278:	e7fe      	b.n	8000278 <BusFault_Handler+0x4>
 800027a:	bf00      	nop

0800027c <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000280:	e7fe      	b.n	8000280 <UsageFault_Handler+0x4>
 8000282:	bf00      	nop

08000284 <SVC_Handler>:
}

/* SVCall exception handler */
void SVC_Handler(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
}
 8000288:	46bd      	mov	sp, r7
 800028a:	bc80      	pop	{r7}
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
}
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop

0800029c <PendSV_Handler>:

/* PendSVC exception handler */
void PendSV_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
}
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop

080002a8 <SysTick_Handler>:

/* SysTick Handler */
void SysTick_Handler(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
  __stm32_tick++;
 80002ac:	f240 631c 	movw	r3, #1564	; 0x61c
 80002b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f103 0201 	add.w	r2, r3, #1
 80002ba:	f240 631c 	movw	r3, #1564	; 0x61c
 80002be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002c2:	601a      	str	r2, [r3, #0]
}
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop

080002cc <low_level_init>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void low_level_init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80002d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80002d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80002dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80002e0:	6812      	ldr	r2, [r2, #0]
 80002e2:	f042 0201 	orr.w	r2, r2, #1
 80002e6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80002e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80002ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80002f0:	f04f 0200 	mov.w	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002f6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80002fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80002fe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000302:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000306:	6812      	ldr	r2, [r2, #0]
 8000308:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800030c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000310:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000312:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000316:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800031a:	f243 0210 	movw	r2, #12304	; 0x3010
 800031e:	f2c2 4200 	movt	r2, #9216	; 0x2400
 8000322:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000324:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000328:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800032c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000330:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000334:	6812      	ldr	r2, [r2, #0]
 8000336:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800033a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800033c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000340:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000344:	f04f 0200 	mov.w	r2, #0
 8000348:	60da      	str	r2, [r3, #12]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800034a:	f000 f80b 	bl	8000364 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  copy_vector_table_to_sram();
 800034e:	f000 f8cf 	bl	80004f0 <copy_vector_table_to_sram>
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8000352:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000356:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800035a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800035e:	609a      	str	r2, [r3, #8]
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop

08000364 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800036a:	f04f 0300 	mov.w	r3, #0
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000376:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800037a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800037e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000382:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000386:	6812      	ldr	r2, [r2, #0]
 8000388:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800038c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800038e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000392:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800039c:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	f103 0301 	add.w	r3, r3, #1
 80003a4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d103      	bne.n	80003b4 <SetSysClock+0x50>
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80003b2:	d1ec      	bne.n	800038e <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80003b4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80003b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d003      	beq.n	80003ce <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 80003c6:	f04f 0301 	mov.w	r3, #1
 80003ca:	603b      	str	r3, [r7, #0]
 80003cc:	e002      	b.n	80003d4 <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80003ce:	f04f 0300 	mov.w	r3, #0
 80003d2:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	f040 8083 	bne.w	80004e2 <SetSysClock+0x17e>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003dc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80003e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80003e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80003ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80003ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80003f2:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80003f4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80003f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80003fc:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000400:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000404:	6812      	ldr	r2, [r2, #0]
 8000406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800040a:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800040c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000410:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000414:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000418:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800041c:	6892      	ldr	r2, [r2, #8]
 800041e:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000420:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000424:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000428:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800042c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000430:	6892      	ldr	r2, [r2, #8]
 8000432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000436:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000438:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800043c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000440:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000444:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000448:	6892      	ldr	r2, [r2, #8]
 800044a:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800044e:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000450:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000454:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000458:	f245 4208 	movw	r2, #21512	; 0x5408
 800045c:	f2c0 7240 	movt	r2, #1856	; 0x740
 8000460:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000462:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000466:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800046a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800046e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000472:	6812      	ldr	r2, [r2, #0]
 8000474:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000478:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800047a:	bf00      	nop
 800047c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000480:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800048a:	2b00      	cmp	r3, #0
 800048c:	d0f6      	beq.n	800047c <SetSysClock+0x118>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800048e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000492:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000496:	f240 6205 	movw	r2, #1541	; 0x605
 800049a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800049c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80004a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80004a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80004ac:	6892      	ldr	r2, [r2, #8]
 80004ae:	f022 0203 	bic.w	r2, r2, #3
 80004b2:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80004b4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80004b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80004c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80004c4:	6892      	ldr	r2, [r2, #8]
 80004c6:	f042 0202 	orr.w	r2, r2, #2
 80004ca:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80004cc:	bf00      	nop
 80004ce:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80004d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	f003 030c 	and.w	r3, r3, #12
 80004dc:	2b08      	cmp	r3, #8
 80004de:	d1f6      	bne.n	80004ce <SetSysClock+0x16a>
 80004e0:	e000      	b.n	80004e4 <SetSysClock+0x180>
    }
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
       while(1){};
 80004e2:	e7fe      	b.n	80004e2 <SetSysClock+0x17e>
  }
}
 80004e4:	f107 070c 	add.w	r7, r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <copy_vector_table_to_sram>:

static void copy_vector_table_to_sram(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
    uint32_t* load = &__isr_vector_load;
 80004f6:	f240 0300 	movw	r3, #0
 80004fa:	f6c0 0300 	movt	r3, #2048	; 0x800
 80004fe:	607b      	str	r3, [r7, #4]
    uint32_t* data = &__isr_vector_start;
 8000500:	f240 0300 	movw	r3, #0
 8000504:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000508:	603b      	str	r3, [r7, #0]

    while(data < &__isr_vector_end){
 800050a:	e00b      	b.n	8000524 <copy_vector_table_to_sram+0x34>
        *(data++) = *(load++);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	f103 0304 	add.w	r3, r3, #4
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f103 0304 	add.w	r3, r3, #4
 8000522:	607b      	str	r3, [r7, #4]
static void copy_vector_table_to_sram(void)
{
    uint32_t* load = &__isr_vector_load;
    uint32_t* data = &__isr_vector_start;

    while(data < &__isr_vector_end){
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	f240 1388 	movw	r3, #392	; 0x188
 800052a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800052e:	429a      	cmp	r2, r3
 8000530:	d3ec      	bcc.n	800050c <copy_vector_table_to_sram+0x1c>
        *(data++) = *(load++);
    }
}
 8000532:	f107 070c 	add.w	r7, r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <main>:
void TIM2_IRQHandler(void);
void INTTIM_Config(void);

/* main C entry point */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
    int start = 0;
 8000542:	f04f 0300 	mov.w	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
    int count = 0;
 8000548:	f04f 0300 	mov.w	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
    int cpu_usage = 0;
 800054e:	f04f 0300 	mov.w	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
    int max_cpu_usage = 0;
 8000554:	f04f 0300 	mov.w	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
    int j;

    INTTIM_Config();
 800055a:	f000 f849 	bl	80005f0 <INTTIM_Config>

    for EVER
    {
      start = TIM2->CNT = 100;
 800055e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000562:	f04f 0264 	mov.w	r2, #100	; 0x64
 8000566:	625a      	str	r2, [r3, #36]	; 0x24
 8000568:	f04f 0364 	mov.w	r3, #100	; 0x64
 800056c:	60fb      	str	r3, [r7, #12]
      for(j=0; j<65565*8; j++)
 800056e:	f04f 0300 	mov.w	r3, #0
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	e003      	b.n	800057e <main+0x42>
 8000576:	693b      	ldr	r3, [r7, #16]
 8000578:	f103 0301 	add.w	r3, r3, #1
 800057c:	613b      	str	r3, [r7, #16]
 800057e:	693a      	ldr	r2, [r7, #16]
 8000580:	f04f 03e7 	mov.w	r3, #231	; 0xe7
 8000584:	f2c0 0308 	movt	r3, #8
 8000588:	429a      	cmp	r2, r3
 800058a:	ddf4      	ble.n	8000576 <main+0x3a>
        sin(0.443f);
      count = TIM2->CNT;
 800058c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000592:	60bb      	str	r3, [r7, #8]
      cpu_usage = 100-count;
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800059a:	607b      	str	r3, [r7, #4]
      while(!flag);
 800059c:	bf00      	nop
 800059e:	f240 6318 	movw	r3, #1560	; 0x618
 80005a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d0f8      	beq.n	800059e <main+0x62>
      flag = 0;
 80005ac:	f240 6318 	movw	r3, #1560	; 0x618
 80005b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005b4:	f04f 0200 	mov.w	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
      if(cpu_usage>max_cpu_usage)
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	429a      	cmp	r2, r3
 80005c0:	dd01      	ble.n	80005c6 <main+0x8a>
        max_cpu_usage = cpu_usage;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	617b      	str	r3, [r7, #20]
      cpu_usage = 0;
 80005c6:	f04f 0300 	mov.w	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
    }
 80005cc:	e7c7      	b.n	800055e <main+0x22>
 80005ce:	bf00      	nop

080005d0 <TIM2_IRQHandler>:
}

void TIM2_IRQHandler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 80005d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005d8:	f04f 0101 	mov.w	r1, #1
 80005dc:	f002 fe16 	bl	800320c <TIM_ClearITPendingBit>
  flag = 1;
 80005e0:	f240 6318 	movw	r3, #1560	; 0x618
 80005e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005e8:	f04f 0201 	mov.w	r2, #1
 80005ec:	601a      	str	r2, [r3, #0]
}
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <INTTIM_Config>:

void INTTIM_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
  NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80005f6:	f04f 031c 	mov.w	r3, #28
 80005fa:	733b      	strb	r3, [r7, #12]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80005fc:	f04f 0300 	mov.w	r3, #0
 8000600:	737b      	strb	r3, [r7, #13]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8000602:	f04f 0301 	mov.w	r3, #1
 8000606:	73bb      	strb	r3, [r7, #14]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000608:	f04f 0301 	mov.w	r3, #1
 800060c:	73fb      	strb	r3, [r7, #15]
  NVIC_Init(&NVIC_InitStructure);
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f83e 	bl	8000694 <NVIC_Init>

  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
 8000618:	f04f 0001 	mov.w	r0, #1
 800061c:	f04f 0101 	mov.w	r1, #1
 8000620:	f000 ffc2 	bl	80015a8 <RCC_APB1PeriphClockCmd>
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
  TIM_TimeBaseStructure.TIM_Period = 100 - 1; 
 8000624:	f04f 0363 	mov.w	r3, #99	; 0x63
 8000628:	607b      	str	r3, [r7, #4]
  TIM_TimeBaseStructure.TIM_Prescaler = 42000 - 1; 
 800062a:	f24a 430f 	movw	r3, #41999	; 0xa40f
 800062e:	803b      	strh	r3, [r7, #0]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	813b      	strh	r3, [r7, #8]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Down;
 8000636:	f04f 0310 	mov.w	r3, #16
 800063a:	807b      	strh	r3, [r7, #2]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 800063c:	463b      	mov	r3, r7
 800063e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000642:	4619      	mov	r1, r3
 8000644:	f001 fb7e 	bl	8001d44 <TIM_TimeBaseInit>
  TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8000648:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800064c:	f04f 0101 	mov.w	r1, #1
 8000650:	f04f 0201 	mov.w	r2, #1
 8000654:	f002 fd46 	bl	80030e4 <TIM_ITConfig>
  TIM_Cmd(TIM2, ENABLE);
 8000658:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800065c:	f04f 0101 	mov.w	r1, #1
 8000660:	f001 fd06 	bl	8002070 <TIM_Cmd>
}
 8000664:	f107 0710 	add.w	r7, r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000674:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000678:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 8000682:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000686:	60da      	str	r2, [r3, #12]
}
 8000688:	f107 070c 	add.w	r7, r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800069c:	f04f 0300 	mov.w	r3, #0
 80006a0:	73fb      	strb	r3, [r7, #15]
 80006a2:	f04f 0300 	mov.w	r3, #0
 80006a6:	73bb      	strb	r3, [r7, #14]
 80006a8:	f04f 030f 	mov.w	r3, #15
 80006ac:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78db      	ldrb	r3, [r3, #3]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d045      	beq.n	8000742 <NVIC_Init+0xae>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80006b6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80006ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	ea6f 0303 	mvn.w	r3, r3
 80006c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80006c8:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80006cc:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	f1c3 0304 	rsb	r3, r3, #4
 80006d4:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80006d6:	7b7a      	ldrb	r2, [r7, #13]
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	fa42 f303 	asr.w	r3, r2, r3
 80006de:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	785b      	ldrb	r3, [r3, #1]
 80006e4:	461a      	mov	r2, r3
 80006e6:	7bbb      	ldrb	r3, [r7, #14]
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	789a      	ldrb	r2, [r3, #2]
 80006f2:	7b7b      	ldrb	r3, [r7, #13]
 80006f4:	4013      	ands	r3, r2
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000704:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000706:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800070a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	7812      	ldrb	r2, [r2, #0]
 8000712:	189b      	adds	r3, r3, r2
 8000714:	7bfa      	ldrb	r2, [r7, #15]
 8000716:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800071a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800071e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	7812      	ldrb	r2, [r2, #0]
 8000726:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800072a:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800072c:	6879      	ldr	r1, [r7, #4]
 800072e:	7809      	ldrb	r1, [r1, #0]
 8000730:	f001 011f 	and.w	r1, r1, #31
 8000734:	f04f 0001 	mov.w	r0, #1
 8000738:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800073c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000740:	e014      	b.n	800076c <NVIC_Init+0xd8>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000742:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000746:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	7812      	ldrb	r2, [r2, #0]
 800074e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8000752:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000754:	6879      	ldr	r1, [r7, #4]
 8000756:	7809      	ldrb	r1, [r1, #0]
 8000758:	f001 011f 	and.w	r1, r1, #31
 800075c:	f04f 0001 	mov.w	r0, #1
 8000760:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000764:	f102 0220 	add.w	r2, r2, #32
 8000768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800076c:	f107 0714 	add.w	r7, r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop

08000778 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000782:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000786:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800078a:	683a      	ldr	r2, [r7, #0]
 800078c:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8000790:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000794:	6879      	ldr	r1, [r7, #4]
 8000796:	430a      	orrs	r2, r1
 8000798:	609a      	str	r2, [r3, #8]
}
 800079a:	f107 070c 	add.w	r7, r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4602      	mov	r2, r0
 80007ac:	460b      	mov	r3, r1
 80007ae:	71fa      	strb	r2, [r7, #7]
 80007b0:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d00c      	beq.n	80007d2 <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
 80007b8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80007bc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80007c0:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80007c4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80007c8:	6911      	ldr	r1, [r2, #16]
 80007ca:	79fa      	ldrb	r2, [r7, #7]
 80007cc:	430a      	orrs	r2, r1
 80007ce:	611a      	str	r2, [r3, #16]
 80007d0:	e00d      	b.n	80007ee <NVIC_SystemLPConfig+0x4a>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80007d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80007d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80007da:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80007de:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80007e2:	6911      	ldr	r1, [r2, #16]
 80007e4:	79fa      	ldrb	r2, [r7, #7]
 80007e6:	ea6f 0202 	mvn.w	r2, r2
 80007ea:	400a      	ands	r2, r1
 80007ec:	611a      	str	r2, [r3, #16]
  }
}
 80007ee:	f107 070c 	add.w	r7, r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b04      	cmp	r3, #4
 8000804:	d10c      	bne.n	8000820 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000806:	f24e 0310 	movw	r3, #57360	; 0xe010
 800080a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800080e:	f24e 0210 	movw	r2, #57360	; 0xe010
 8000812:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000816:	6812      	ldr	r2, [r2, #0]
 8000818:	f042 0204 	orr.w	r2, r2, #4
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	e00b      	b.n	8000838 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000820:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000824:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000828:	f24e 0210 	movw	r2, #57360	; 0xe010
 800082c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000830:	6812      	ldr	r2, [r2, #0]
 8000832:	f022 0204 	bic.w	r2, r2, #4
 8000836:	601a      	str	r2, [r3, #0]
  }
}
 8000838:	f107 070c 	add.w	r7, r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	f04f 0300 	mov.w	r3, #0
 8000852:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000856:	429a      	cmp	r2, r3
 8000858:	d10c      	bne.n	8000874 <GPIO_DeInit+0x30>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800085a:	f04f 0001 	mov.w	r0, #1
 800085e:	f04f 0101 	mov.w	r1, #1
 8000862:	f000 fef5 	bl	8001650 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000866:	f04f 0001 	mov.w	r0, #1
 800086a:	f04f 0100 	mov.w	r1, #0
 800086e:	f000 feef 	bl	8001650 <RCC_AHB1PeriphResetCmd>
 8000872:	e09e      	b.n	80009b2 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOB)
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800087e:	429a      	cmp	r2, r3
 8000880:	d10c      	bne.n	800089c <GPIO_DeInit+0x58>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000882:	f04f 0002 	mov.w	r0, #2
 8000886:	f04f 0101 	mov.w	r1, #1
 800088a:	f000 fee1 	bl	8001650 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800088e:	f04f 0002 	mov.w	r0, #2
 8000892:	f04f 0100 	mov.w	r1, #0
 8000896:	f000 fedb 	bl	8001650 <RCC_AHB1PeriphResetCmd>
 800089a:	e08a      	b.n	80009b2 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOC)
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d10c      	bne.n	80008c4 <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80008aa:	f04f 0004 	mov.w	r0, #4
 80008ae:	f04f 0101 	mov.w	r1, #1
 80008b2:	f000 fecd 	bl	8001650 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80008b6:	f04f 0004 	mov.w	r0, #4
 80008ba:	f04f 0100 	mov.w	r1, #0
 80008be:	f000 fec7 	bl	8001650 <RCC_AHB1PeriphResetCmd>
 80008c2:	e076      	b.n	80009b2 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOD)
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d10c      	bne.n	80008ec <GPIO_DeInit+0xa8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80008d2:	f04f 0008 	mov.w	r0, #8
 80008d6:	f04f 0101 	mov.w	r1, #1
 80008da:	f000 feb9 	bl	8001650 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80008de:	f04f 0008 	mov.w	r0, #8
 80008e2:	f04f 0100 	mov.w	r1, #0
 80008e6:	f000 feb3 	bl	8001650 <RCC_AHB1PeriphResetCmd>
 80008ea:	e062      	b.n	80009b2 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOE)
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d10c      	bne.n	8000914 <GPIO_DeInit+0xd0>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80008fa:	f04f 0010 	mov.w	r0, #16
 80008fe:	f04f 0101 	mov.w	r1, #1
 8000902:	f000 fea5 	bl	8001650 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8000906:	f04f 0010 	mov.w	r0, #16
 800090a:	f04f 0100 	mov.w	r1, #0
 800090e:	f000 fe9f 	bl	8001650 <RCC_AHB1PeriphResetCmd>
 8000912:	e04e      	b.n	80009b2 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOF)
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800091a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800091e:	429a      	cmp	r2, r3
 8000920:	d10c      	bne.n	800093c <GPIO_DeInit+0xf8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000922:	f04f 0020 	mov.w	r0, #32
 8000926:	f04f 0101 	mov.w	r1, #1
 800092a:	f000 fe91 	bl	8001650 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800092e:	f04f 0020 	mov.w	r0, #32
 8000932:	f04f 0100 	mov.w	r1, #0
 8000936:	f000 fe8b 	bl	8001650 <RCC_AHB1PeriphResetCmd>
 800093a:	e03a      	b.n	80009b2 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOG)
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000942:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000946:	429a      	cmp	r2, r3
 8000948:	d10c      	bne.n	8000964 <GPIO_DeInit+0x120>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800094a:	f04f 0040 	mov.w	r0, #64	; 0x40
 800094e:	f04f 0101 	mov.w	r1, #1
 8000952:	f000 fe7d 	bl	8001650 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000956:	f04f 0040 	mov.w	r0, #64	; 0x40
 800095a:	f04f 0100 	mov.w	r1, #0
 800095e:	f000 fe77 	bl	8001650 <RCC_AHB1PeriphResetCmd>
 8000962:	e026      	b.n	80009b2 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOH)
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800096a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800096e:	429a      	cmp	r2, r3
 8000970:	d10c      	bne.n	800098c <GPIO_DeInit+0x148>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8000972:	f04f 0080 	mov.w	r0, #128	; 0x80
 8000976:	f04f 0101 	mov.w	r1, #1
 800097a:	f000 fe69 	bl	8001650 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800097e:	f04f 0080 	mov.w	r0, #128	; 0x80
 8000982:	f04f 0100 	mov.w	r1, #0
 8000986:	f000 fe63 	bl	8001650 <RCC_AHB1PeriphResetCmd>
 800098a:	e012      	b.n	80009b2 <GPIO_DeInit+0x16e>
  }
  else
  {
    if (GPIOx == GPIOI)
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000992:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000996:	429a      	cmp	r2, r3
 8000998:	d10b      	bne.n	80009b2 <GPIO_DeInit+0x16e>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 800099a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800099e:	f04f 0101 	mov.w	r1, #1
 80009a2:	f000 fe55 	bl	8001650 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80009a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80009aa:	f04f 0100 	mov.w	r1, #0
 80009ae:	f000 fe4f 	bl	8001650 <RCC_AHB1PeriphResetCmd>
    }
  }
}
 80009b2:	f107 0708 	add.w	r7, r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop

080009bc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80009bc:	b480      	push	{r7}
 80009be:	b087      	sub	sp, #28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80009c6:	f04f 0300 	mov.w	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	f04f 0300 	mov.w	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	f04f 0300 	mov.w	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80009d8:	f04f 0300 	mov.w	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	e086      	b.n	8000aee <GPIO_Init+0x132>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	f04f 0201 	mov.w	r2, #1
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	4013      	ands	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d173      	bne.n	8000ae6 <GPIO_Init+0x12a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a08:	f04f 0103 	mov.w	r1, #3
 8000a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a10:	ea6f 0303 	mvn.w	r3, r3
 8000a14:	401a      	ands	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	791b      	ldrb	r3, [r3, #4]
 8000a22:	4619      	mov	r1, r3
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2e:	431a      	orrs	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	791b      	ldrb	r3, [r3, #4]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d003      	beq.n	8000a44 <GPIO_Init+0x88>
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	791b      	ldrb	r3, [r3, #4]
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d134      	bne.n	8000aae <GPIO_Init+0xf2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	689a      	ldr	r2, [r3, #8]
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a4e:	f04f 0103 	mov.w	r1, #3
 8000a52:	fa01 f303 	lsl.w	r3, r1, r3
 8000a56:	ea6f 0303 	mvn.w	r3, r3
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	689a      	ldr	r2, [r3, #8]
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	795b      	ldrb	r3, [r3, #5]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	431a      	orrs	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	f04f 0101 	mov.w	r1, #1
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	ea6f 0303 	mvn.w	r3, r3
 8000a8e:	401a      	ands	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	799b      	ldrb	r3, [r3, #6]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	431a      	orrs	r2, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	68da      	ldr	r2, [r3, #12]
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aba:	f04f 0103 	mov.w	r1, #3
 8000abe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac2:	ea6f 0303 	mvn.w	r3, r3
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	68da      	ldr	r2, [r3, #12]
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	79db      	ldrb	r3, [r3, #7]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	f103 0301 	add.w	r3, r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	f67f af75 	bls.w	80009e0 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000af6:	f107 071c 	add.w	r7, r7, #28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f04f 0200 	mov.w	r2, #0
 8000b16:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f04f 0200 	mov.w	r2, #0
 8000b1e:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f04f 0200 	mov.w	r2, #0
 8000b26:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f04f 0200 	mov.w	r2, #0
 8000b2e:	71da      	strb	r2, [r3, #7]
}
 8000b30:	f107 070c 	add.w	r7, r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8000b48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8000b4e:	887a      	ldrh	r2, [r7, #2]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000b5c:	887a      	ldrh	r2, [r7, #2]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	69db      	ldr	r3, [r3, #28]
 8000b6c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	60fb      	str	r3, [r7, #12]
}
 8000b74:	f107 0714 	add.w	r7, r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000b8c:	f04f 0300 	mov.w	r3, #0
 8000b90:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	691a      	ldr	r2, [r3, #16]
 8000b96:	887b      	ldrh	r3, [r7, #2]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000b9e:	f04f 0301 	mov.w	r3, #1
 8000ba2:	73fb      	strb	r3, [r7, #15]
 8000ba4:	e002      	b.n	8000bac <GPIO_ReadInputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000ba6:	f04f 0300 	mov.w	r3, #0
 8000baa:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f107 0714 	add.w	r7, r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	b29b      	uxth	r3, r3
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f107 070c 	add.w	r7, r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	695a      	ldr	r2, [r3, #20]
 8000bee:	887b      	ldrh	r3, [r7, #2]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000bf6:	f04f 0301 	mov.w	r3, #1
 8000bfa:	73fb      	strb	r3, [r7, #15]
 8000bfc:	e002      	b.n	8000c04 <GPIO_ReadOutputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000bfe:	f04f 0300 	mov.w	r3, #0
 8000c02:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	f107 0714 	add.w	r7, r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop

08000c14 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	695b      	ldr	r3, [r3, #20]
 8000c20:	b29b      	uxth	r3, r3
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	f107 070c 	add.w	r7, r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	887a      	ldrh	r2, [r7, #2]
 8000c40:	831a      	strh	r2, [r3, #24]
}
 8000c42:	f107 070c 	add.w	r7, r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr

08000c4c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	887a      	ldrh	r2, [r7, #2]
 8000c5c:	835a      	strh	r2, [r3, #26]
}
 8000c5e:	f107 070c 	add.w	r7, r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	4613      	mov	r3, r2
 8000c72:	460a      	mov	r2, r1
 8000c74:	807a      	strh	r2, [r7, #2]
 8000c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000c78:	787b      	ldrb	r3, [r7, #1]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	887a      	ldrh	r2, [r7, #2]
 8000c82:	831a      	strh	r2, [r3, #24]
 8000c84:	e002      	b.n	8000c8c <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	887a      	ldrh	r2, [r7, #2]
 8000c8a:	835a      	strh	r2, [r3, #26]
  }
}
 8000c8c:	f107 070c 	add.w	r7, r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8000ca4:	887a      	ldrh	r2, [r7, #2]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	615a      	str	r2, [r3, #20]
}
 8000caa:	f107 070c 	add.w	r7, r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	695a      	ldr	r2, [r3, #20]
 8000cc4:	887b      	ldrh	r3, [r7, #2]
 8000cc6:	405a      	eors	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	615a      	str	r2, [r3, #20]
}
 8000ccc:	f107 070c 	add.w	r7, r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	460a      	mov	r2, r1
 8000ce4:	807a      	strh	r2, [r7, #2]
 8000ce6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000cee:	f04f 0300 	mov.w	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000cf4:	787a      	ldrb	r2, [r7, #1]
 8000cf6:	887b      	ldrh	r3, [r7, #2]
 8000cf8:	f003 0307 	and.w	r3, r3, #7
 8000cfc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d06:	887b      	ldrh	r3, [r7, #2]
 8000d08:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	461a      	mov	r2, r3
 8000d10:	887b      	ldrh	r3, [r7, #2]
 8000d12:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	4619      	mov	r1, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f101 0108 	add.w	r1, r1, #8
 8000d20:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000d2e:	f04f 000f 	mov.w	r0, #15
 8000d32:	fa00 f303 	lsl.w	r3, r0, r3
 8000d36:	ea6f 0303 	mvn.w	r3, r3
 8000d3a:	4019      	ands	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f102 0208 	add.w	r2, r2, #8
 8000d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000d46:	887b      	ldrh	r3, [r7, #2]
 8000d48:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	461a      	mov	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f102 0208 	add.w	r2, r2, #8
 8000d56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000d60:	887b      	ldrh	r3, [r7, #2]
 8000d62:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	461a      	mov	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f102 0208 	add.w	r2, r2, #8
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000d76:	f107 0714 	add.w	r7, r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d84:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d8c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000d90:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d94:	6812      	ldr	r2, [r2, #0]
 8000d96:	f042 0201 	orr.w	r2, r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d9c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000da4:	f04f 0200 	mov.w	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000daa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000dae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000db2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000db6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000dba:	6812      	ldr	r2, [r2, #0]
 8000dbc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000dc0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000dc4:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000dc6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000dca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000dce:	f243 0210 	movw	r2, #12304	; 0x3010
 8000dd2:	f2c2 4200 	movt	r2, #9216	; 0x2400
 8000dd6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000dd8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ddc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000de0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000de4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000de8:	6812      	ldr	r2, [r2, #0]
 8000dea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000dee:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000df0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000df4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000df8:	f04f 0200 	mov.w	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
}
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8000e0e:	f643 0302 	movw	r3, #14338	; 0x3802
 8000e12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e16:	f04f 0200 	mov.w	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000e1c:	f643 0302 	movw	r3, #14338	; 0x3802
 8000e20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e24:	79fa      	ldrb	r2, [r7, #7]
 8000e26:	701a      	strb	r2, [r3, #0]
}
 8000e28:	f107 070c 	add.w	r7, r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop

08000e34 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8000e3a:	f04f 0300 	mov.w	r3, #0
 8000e3e:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8000e46:	f04f 0300 	mov.w	r3, #0
 8000e4a:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000e4c:	f04f 0031 	mov.w	r0, #49	; 0x31
 8000e50:	f000 fdd2 	bl	80019f8 <RCC_GetFlagStatus>
 8000e54:	4603      	mov	r3, r0
 8000e56:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	f103 0301 	add.w	r3, r3, #1
 8000e5e:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000e66:	d002      	beq.n	8000e6e <RCC_WaitForHSEStartUp+0x3a>
 8000e68:	79bb      	ldrb	r3, [r7, #6]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0ee      	beq.n	8000e4c <RCC_WaitForHSEStartUp+0x18>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000e6e:	f04f 0031 	mov.w	r0, #49	; 0x31
 8000e72:	f000 fdc1 	bl	80019f8 <RCC_GetFlagStatus>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d003      	beq.n	8000e84 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 8000e7c:	f04f 0301 	mov.w	r3, #1
 8000e80:	71fb      	strb	r3, [r7, #7]
 8000e82:	e002      	b.n	8000e8a <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 8000e84:	f04f 0300 	mov.w	r3, #0
 8000e88:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f107 0708 	add.w	r7, r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop

08000e98 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8000ea2:	f04f 0300 	mov.w	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8000ea8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000eac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000eba:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 8000ec8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ecc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	601a      	str	r2, [r3, #0]
}
 8000ed4:	f107 0714 	add.w	r7, r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000eea:	f04f 0300 	mov.w	r3, #0
 8000eee:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000ef2:	79fa      	ldrb	r2, [r7, #7]
 8000ef4:	601a      	str	r2, [r3, #0]
}
 8000ef6:	f107 070c 	add.w	r7, r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000f0a:	f643 0370 	movw	r3, #14448	; 0x3870
 8000f0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000f18:	f643 0370 	movw	r3, #14448	; 0x3870
 8000f1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f20:	f04f 0200 	mov.w	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d002      	beq.n	8000f32 <RCC_LSEConfig+0x32>
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d008      	beq.n	8000f42 <RCC_LSEConfig+0x42>
 8000f30:	e00f      	b.n	8000f52 <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8000f32:	f643 0370 	movw	r3, #14448	; 0x3870
 8000f36:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f3a:	f04f 0201 	mov.w	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
      break;
 8000f40:	e008      	b.n	8000f54 <RCC_LSEConfig+0x54>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000f42:	f643 0370 	movw	r3, #14448	; 0x3870
 8000f46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f4a:	f04f 0205 	mov.w	r2, #5
 8000f4e:	701a      	strb	r2, [r3, #0]
      break;
 8000f50:	e000      	b.n	8000f54 <RCC_LSEConfig+0x54>
    default:
      break;
 8000f52:	bf00      	nop
  }
}
 8000f54:	f107 070c 	add.w	r7, r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000f6a:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8000f6e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000f72:	79fa      	ldrb	r2, [r7, #7]
 8000f74:	601a      	str	r2, [r3, #0]
}
 8000f76:	f107 070c 	add.w	r7, r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000f8e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	ea4f 1182 	mov.w	r1, r2, lsl #6
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	4311      	orrs	r1, r2
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8000fa6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8000faa:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8000fae:	4311      	orrs	r1, r2
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	ea4f 6202 	mov.w	r2, r2, lsl #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 8000fbe:	f107 0714 	add.w	r7, r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000fd2:	f04f 0360 	mov.w	r3, #96	; 0x60
 8000fd6:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000fda:	79fa      	ldrb	r2, [r7, #7]
 8000fdc:	601a      	str	r2, [r3, #0]
}
 8000fde:	f107 070c 	add.w	r7, r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8000ff2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ff6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	ea4f 1182 	mov.w	r1, r2, lsl #6
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	ea4f 7202 	mov.w	r2, r2, lsl #28
 8001006:	430a      	orrs	r2, r1
 8001008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800100c:	f107 070c 	add.w	r7, r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8001022:	f04f 0368 	mov.w	r3, #104	; 0x68
 8001026:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800102a:	79fa      	ldrb	r2, [r7, #7]
 800102c:	601a      	str	r2, [r3, #0]
}
 800102e:	f107 070c 	add.w	r7, r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001042:	f04f 034c 	mov.w	r3, #76	; 0x4c
 8001046:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800104a:	79fa      	ldrb	r2, [r7, #7]
 800104c:	601a      	str	r2, [r3, #0]
}
 800104e:	f107 070c 	add.w	r7, r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8001068:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800106c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 800107a:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	4313      	orrs	r3, r2
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	4313      	orrs	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001088:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800108c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	609a      	str	r2, [r3, #8]
}
 8001094:	f107 0714 	add.w	r7, r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80010aa:	f04f 0300 	mov.w	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 80010b0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80010b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80010c2:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80010d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80010d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	609a      	str	r2, [r3, #8]
}
 80010dc:	f107 0714 	add.w	r7, r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80010f6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80010fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f023 0303 	bic.w	r3, r3, #3
 8001108:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4313      	orrs	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001112:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001116:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	609a      	str	r2, [r3, #8]
}
 800111e:	f107 0714 	add.w	r7, r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800112c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001130:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f003 030c 	and.w	r3, r3, #12
 800113c:	b2db      	uxtb	r3, r3
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8001156:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800115a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001168:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4313      	orrs	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001172:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001176:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	609a      	str	r2, [r3, #8]
}
 800117e:	f107 0714 	add.w	r7, r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr

08001188 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001196:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800119a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80011b2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	609a      	str	r2, [r3, #8]
}
 80011be:	f107 0714 	add.w	r7, r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80011d0:	f04f 0300 	mov.w	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80011d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80011f6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	609a      	str	r2, [r3, #8]
}
 8001202:	f107 0714 	add.w	r7, r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001214:	f04f 0300 	mov.w	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	f04f 0300 	mov.w	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	f04f 0302 	mov.w	r3, #2
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	f04f 0302 	mov.w	r3, #2
 8001236:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001238:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800123c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 030c 	and.w	r3, r3, #12
 8001246:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	2b04      	cmp	r3, #4
 800124c:	d00a      	beq.n	8001264 <RCC_GetClocksFreq+0x58>
 800124e:	2b08      	cmp	r3, #8
 8001250:	d00f      	beq.n	8001272 <RCC_GetClocksFreq+0x66>
 8001252:	2b00      	cmp	r3, #0
 8001254:	d160      	bne.n	8001318 <RCC_GetClocksFreq+0x10c>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800125c:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8001260:	6013      	str	r3, [r2, #0]
      break;
 8001262:	e060      	b.n	8001326 <RCC_GetClocksFreq+0x11a>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	f647 0340 	movw	r3, #30784	; 0x7840
 800126a:	f2c0 137d 	movt	r3, #381	; 0x17d
 800126e:	6013      	str	r3, [r2, #0]
      break;
 8001270:	e059      	b.n	8001326 <RCC_GetClocksFreq+0x11a>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001272:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001276:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001280:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8001284:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001286:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800128a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001294:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d014      	beq.n	80012c6 <RCC_GetClocksFreq+0xba>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800129c:	f647 0340 	movw	r3, #30784	; 0x7840
 80012a0:	f2c0 137d 	movt	r3, #381	; 0x17d
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80012aa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012b2:	6859      	ldr	r1, [r3, #4]
 80012b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80012b8:	400b      	ands	r3, r1
 80012ba:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80012be:	fb03 f302 	mul.w	r3, r3, r2
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	e013      	b.n	80012ee <RCC_GetClocksFreq+0xe2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80012c6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80012ca:	f2c0 03f4 	movt	r3, #244	; 0xf4
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80012d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012dc:	6859      	ldr	r1, [r3, #4]
 80012de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80012e2:	400b      	ands	r3, r1
 80012e4:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80012e8:	fb03 f302 	mul.w	r3, r3, r2
 80012ec:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80012ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012fc:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8001300:	f103 0301 	add.w	r3, r3, #1
 8001304:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001308:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800130a:	69fa      	ldr	r2, [r7, #28]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	601a      	str	r2, [r3, #0]
      break;
 8001316:	e006      	b.n	8001326 <RCC_GetClocksFreq+0x11a>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800131e:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8001322:	6013      	str	r3, [r2, #0]
      break;
 8001324:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001326:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800132a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001334:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800133c:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800133e:	f240 13b0 	movw	r3, #432	; 0x1b0
 8001342:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	189b      	adds	r3, r3, r2
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa22 f203 	lsr.w	r2, r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800135e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001362:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800136c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	ea4f 2393 	mov.w	r3, r3, lsr #10
 8001374:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001376:	f240 13b0 	movw	r3, #432	; 0x1b0
 800137a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	189b      	adds	r3, r3, r2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa22 f203 	lsr.w	r2, r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001396:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800139a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80013a4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	ea4f 3353 	mov.w	r3, r3, lsr #13
 80013ac:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80013ae:	f240 13b0 	movw	r3, #432	; 0x1b0
 80013b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	189b      	adds	r3, r3, r2
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa22 f203 	lsr.w	r2, r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	60da      	str	r2, [r3, #12]
}
 80013ce:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80013e0:	f04f 0300 	mov.w	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80013f0:	d117      	bne.n	8001422 <RCC_RTCCLKConfig+0x4a>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 80013f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80013f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001404:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800140c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	4313      	orrs	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8001416:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800141a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8001422:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001426:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800142a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800142e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001432:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	ea4f 5202 	mov.w	r2, r2, lsl #20
 800143a:	ea4f 5212 	mov.w	r2, r2, lsr #20
 800143e:	430a      	orrs	r2, r1
 8001440:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001442:	f107 0714 	add.w	r7, r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001456:	f640 633c 	movw	r3, #3644	; 0xe3c
 800145a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800145e:	79fa      	ldrb	r2, [r7, #7]
 8001460:	601a      	str	r2, [r3, #0]
}
 8001462:	f107 070c 	add.w	r7, r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8001476:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 800147a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800147e:	79fa      	ldrb	r2, [r7, #7]
 8001480:	601a      	str	r2, [r3, #0]
}
 8001482:	f107 070c 	add.w	r7, r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8001494:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8001498:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	601a      	str	r2, [r3, #0]
}
 80014a0:	f107 070c 	add.w	r7, r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop

080014ac <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00c      	beq.n	80014d8 <RCC_AHB1PeriphClockCmd+0x2c>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80014be:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80014c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014c6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80014ca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014ce:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	631a      	str	r2, [r3, #48]	; 0x30
 80014d6:	e00d      	b.n	80014f4 <RCC_AHB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80014d8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80014dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014e0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80014e4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014e8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	ea6f 0202 	mvn.w	r2, r2
 80014f0:	400a      	ands	r2, r1
 80014f2:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80014f4:	f107 070c 	add.w	r7, r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop

08001500 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800150c:	78fb      	ldrb	r3, [r7, #3]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00c      	beq.n	800152c <RCC_AHB2PeriphClockCmd+0x2c>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001512:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001516:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800151a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800151e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001522:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	430a      	orrs	r2, r1
 8001528:	635a      	str	r2, [r3, #52]	; 0x34
 800152a:	e00d      	b.n	8001548 <RCC_AHB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800152c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001530:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001534:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001538:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800153c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	ea6f 0202 	mvn.w	r2, r2
 8001544:	400a      	ands	r2, r1
 8001546:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8001548:	f107 070c 	add.w	r7, r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop

08001554 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00c      	beq.n	8001580 <RCC_AHB3PeriphClockCmd+0x2c>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001566:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800156a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800156e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001572:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001576:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	430a      	orrs	r2, r1
 800157c:	639a      	str	r2, [r3, #56]	; 0x38
 800157e:	e00d      	b.n	800159c <RCC_AHB3PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8001580:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001584:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001588:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800158c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001590:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	ea6f 0202 	mvn.w	r2, r2
 8001598:	400a      	ands	r2, r1
 800159a:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 800159c:	f107 070c 	add.w	r7, r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop

080015a8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00c      	beq.n	80015d4 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80015ba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015c2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80015c6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015ca:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	641a      	str	r2, [r3, #64]	; 0x40
 80015d2:	e00d      	b.n	80015f0 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80015d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80015e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015e4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	ea6f 0202 	mvn.w	r2, r2
 80015ec:	400a      	ands	r2, r1
 80015ee:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80015f0:	f107 070c 	add.w	r7, r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop

080015fc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00c      	beq.n	8001628 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800160e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001612:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001616:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800161a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800161e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	430a      	orrs	r2, r1
 8001624:	645a      	str	r2, [r3, #68]	; 0x44
 8001626:	e00d      	b.n	8001644 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001628:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800162c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001630:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001634:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001638:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	ea6f 0202 	mvn.w	r2, r2
 8001640:	400a      	ands	r2, r1
 8001642:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8001644:	f107 070c 	add.w	r7, r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop

08001650 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00c      	beq.n	800167c <RCC_AHB1PeriphResetCmd+0x2c>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001662:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001666:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800166a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800166e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001672:	6911      	ldr	r1, [r2, #16]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	430a      	orrs	r2, r1
 8001678:	611a      	str	r2, [r3, #16]
 800167a:	e00d      	b.n	8001698 <RCC_AHB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 800167c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001680:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001684:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001688:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800168c:	6911      	ldr	r1, [r2, #16]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	ea6f 0202 	mvn.w	r2, r2
 8001694:	400a      	ands	r2, r1
 8001696:	611a      	str	r2, [r3, #16]
  }
}
 8001698:	f107 070c 	add.w	r7, r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop

080016a4 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00c      	beq.n	80016d0 <RCC_AHB2PeriphResetCmd+0x2c>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80016b6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016be:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80016c2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016c6:	6951      	ldr	r1, [r2, #20]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	615a      	str	r2, [r3, #20]
 80016ce:	e00d      	b.n	80016ec <RCC_AHB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 80016d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80016dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016e0:	6951      	ldr	r1, [r2, #20]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	ea6f 0202 	mvn.w	r2, r2
 80016e8:	400a      	ands	r2, r1
 80016ea:	615a      	str	r2, [r3, #20]
  }
}
 80016ec:	f107 070c 	add.w	r7, r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop

080016f8 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00c      	beq.n	8001724 <RCC_AHB3PeriphResetCmd+0x2c>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 800170a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800170e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001712:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001716:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800171a:	6991      	ldr	r1, [r2, #24]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	430a      	orrs	r2, r1
 8001720:	619a      	str	r2, [r3, #24]
 8001722:	e00d      	b.n	8001740 <RCC_AHB3PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8001724:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001728:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800172c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001730:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001734:	6991      	ldr	r1, [r2, #24]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	ea6f 0202 	mvn.w	r2, r2
 800173c:	400a      	ands	r2, r1
 800173e:	619a      	str	r2, [r3, #24]
  }
}
 8001740:	f107 070c 	add.w	r7, r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop

0800174c <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00c      	beq.n	8001778 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800175e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001762:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001766:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800176a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800176e:	6a11      	ldr	r1, [r2, #32]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	430a      	orrs	r2, r1
 8001774:	621a      	str	r2, [r3, #32]
 8001776:	e00d      	b.n	8001794 <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001778:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800177c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001780:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001784:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001788:	6a11      	ldr	r1, [r2, #32]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	ea6f 0202 	mvn.w	r2, r2
 8001790:	400a      	ands	r2, r1
 8001792:	621a      	str	r2, [r3, #32]
  }
}
 8001794:	f107 070c 	add.w	r7, r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop

080017a0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00c      	beq.n	80017cc <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80017b2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017ba:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80017be:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017c2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
 80017ca:	e00d      	b.n	80017e8 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80017cc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017d4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80017d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017dc:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	ea6f 0202 	mvn.w	r2, r2
 80017e4:	400a      	ands	r2, r1
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80017e8:	f107 070c 	add.w	r7, r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop

080017f4 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00c      	beq.n	8001820 <RCC_AHB1PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001806:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800180a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800180e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001812:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001816:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	430a      	orrs	r2, r1
 800181c:	651a      	str	r2, [r3, #80]	; 0x50
 800181e:	e00d      	b.n	800183c <RCC_AHB1PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8001820:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001824:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001828:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800182c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001830:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	ea6f 0202 	mvn.w	r2, r2
 8001838:	400a      	ands	r2, r1
 800183a:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 800183c:	f107 070c 	add.w	r7, r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop

08001848 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00c      	beq.n	8001874 <RCC_AHB2PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800185a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800185e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001862:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001866:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800186a:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	430a      	orrs	r2, r1
 8001870:	655a      	str	r2, [r3, #84]	; 0x54
 8001872:	e00d      	b.n	8001890 <RCC_AHB2PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8001874:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001878:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800187c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001880:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001884:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	ea6f 0202 	mvn.w	r2, r2
 800188c:	400a      	ands	r2, r1
 800188e:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 8001890:	f107 070c 	add.w	r7, r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop

0800189c <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00c      	beq.n	80018c8 <RCC_AHB3PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 80018ae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018b6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80018ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018be:	6d91      	ldr	r1, [r2, #88]	; 0x58
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	659a      	str	r2, [r3, #88]	; 0x58
 80018c6:	e00d      	b.n	80018e4 <RCC_AHB3PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 80018c8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018d0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80018d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018d8:	6d91      	ldr	r1, [r2, #88]	; 0x58
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	ea6f 0202 	mvn.w	r2, r2
 80018e0:	400a      	ands	r2, r1
 80018e2:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 80018e4:	f107 070c 	add.w	r7, r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop

080018f0 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00c      	beq.n	800191c <RCC_APB1PeriphClockLPModeCmd+0x2c>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001902:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001906:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800190a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800190e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001912:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	430a      	orrs	r2, r1
 8001918:	661a      	str	r2, [r3, #96]	; 0x60
 800191a:	e00d      	b.n	8001938 <RCC_APB1PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800191c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001920:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001924:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001928:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800192c:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	ea6f 0202 	mvn.w	r2, r2
 8001934:	400a      	ands	r2, r1
 8001936:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 8001938:	f107 070c 	add.w	r7, r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop

08001944 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00c      	beq.n	8001970 <RCC_APB2PeriphClockLPModeCmd+0x2c>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001956:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800195a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800195e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001962:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001966:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	430a      	orrs	r2, r1
 800196c:	665a      	str	r2, [r3, #100]	; 0x64
 800196e:	e00d      	b.n	800198c <RCC_APB2PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8001970:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001974:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001978:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800197c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001980:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	ea6f 0202 	mvn.w	r2, r2
 8001988:	400a      	ands	r2, r1
 800198a:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 800198c:	f107 070c 	add.w	r7, r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop

08001998 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	71fa      	strb	r2, [r7, #7]
 80019a4:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80019a6:	79bb      	ldrb	r3, [r7, #6]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00e      	beq.n	80019ca <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80019ac:	f643 030d 	movw	r3, #14349	; 0x380d
 80019b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019b4:	f643 020d 	movw	r2, #14349	; 0x380d
 80019b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019bc:	7812      	ldrb	r2, [r2, #0]
 80019be:	b2d1      	uxtb	r1, r2
 80019c0:	79fa      	ldrb	r2, [r7, #7]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	701a      	strb	r2, [r3, #0]
 80019c8:	e010      	b.n	80019ec <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80019ca:	f643 030d 	movw	r3, #14349	; 0x380d
 80019ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019d2:	f643 020d 	movw	r2, #14349	; 0x380d
 80019d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019da:	7812      	ldrb	r2, [r2, #0]
 80019dc:	b2d1      	uxtb	r1, r2
 80019de:	79fa      	ldrb	r2, [r7, #7]
 80019e0:	ea6f 0202 	mvn.w	r2, r2
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	400a      	ands	r2, r1
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	701a      	strb	r2, [r3, #0]
  }
}
 80019ec:	f107 070c 	add.w	r7, r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop

080019f8 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d106      	bne.n	8001a32 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 8001a24:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	e00f      	b.n	8001a52 <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d106      	bne.n	8001a46 <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 8001a38:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	e005      	b.n	8001a52 <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001a46:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a50:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <RCC_GetFlagStatus+0x7a>
  {
    bitstatus = SET;
 8001a6a:	f04f 0301 	mov.w	r3, #1
 8001a6e:	74fb      	strb	r3, [r7, #19]
 8001a70:	e002      	b.n	8001a78 <RCC_GetFlagStatus+0x80>
  }
  else
  {
    bitstatus = RESET;
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8001a78:	7cfb      	ldrb	r3, [r7, #19]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f107 071c 	add.w	r7, r7, #28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop

08001a88 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8001a8c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a94:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001a98:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a9c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001a9e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001aa2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop

08001aac <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001abc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ac0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
 8001ace:	f04f 0301 	mov.w	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
 8001ad4:	e002      	b.n	8001adc <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f107 0714 	add.w	r7, r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop

08001aec <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8001af6:	f643 030e 	movw	r3, #14350	; 0x380e
 8001afa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001afe:	79fa      	ldrb	r2, [r7, #7]
 8001b00:	701a      	strb	r2, [r3, #0]
}
 8001b02:	f107 070c 	add.w	r7, r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d10c      	bne.n	8001b3c <TIM_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001b22:	f04f 0001 	mov.w	r0, #1
 8001b26:	f04f 0101 	mov.w	r1, #1
 8001b2a:	f7ff fe39 	bl	80017a0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8001b2e:	f04f 0001 	mov.w	r0, #1
 8001b32:	f04f 0100 	mov.w	r1, #0
 8001b36:	f7ff fe33 	bl	80017a0 <RCC_APB2PeriphResetCmd>
 8001b3a:	e0ff      	b.n	8001d3c <TIM_DeInit+0x230>
  } 
  else if (TIMx == TIM2) 
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b42:	d10c      	bne.n	8001b5e <TIM_DeInit+0x52>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001b44:	f04f 0001 	mov.w	r0, #1
 8001b48:	f04f 0101 	mov.w	r1, #1
 8001b4c:	f7ff fdfe 	bl	800174c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8001b50:	f04f 0001 	mov.w	r0, #1
 8001b54:	f04f 0100 	mov.w	r1, #0
 8001b58:	f7ff fdf8 	bl	800174c <RCC_APB1PeriphResetCmd>
 8001b5c:	e0ee      	b.n	8001d3c <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM3)
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b64:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d10c      	bne.n	8001b86 <TIM_DeInit+0x7a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001b6c:	f04f 0002 	mov.w	r0, #2
 8001b70:	f04f 0101 	mov.w	r1, #1
 8001b74:	f7ff fdea 	bl	800174c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001b78:	f04f 0002 	mov.w	r0, #2
 8001b7c:	f04f 0100 	mov.w	r1, #0
 8001b80:	f7ff fde4 	bl	800174c <RCC_APB1PeriphResetCmd>
 8001b84:	e0da      	b.n	8001d3c <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM4)
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b8c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d10c      	bne.n	8001bae <TIM_DeInit+0xa2>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001b94:	f04f 0004 	mov.w	r0, #4
 8001b98:	f04f 0101 	mov.w	r1, #1
 8001b9c:	f7ff fdd6 	bl	800174c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8001ba0:	f04f 0004 	mov.w	r0, #4
 8001ba4:	f04f 0100 	mov.w	r1, #0
 8001ba8:	f7ff fdd0 	bl	800174c <RCC_APB1PeriphResetCmd>
 8001bac:	e0c6      	b.n	8001d3c <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM5)
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bb4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d10c      	bne.n	8001bd6 <TIM_DeInit+0xca>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8001bbc:	f04f 0008 	mov.w	r0, #8
 8001bc0:	f04f 0101 	mov.w	r1, #1
 8001bc4:	f7ff fdc2 	bl	800174c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8001bc8:	f04f 0008 	mov.w	r0, #8
 8001bcc:	f04f 0100 	mov.w	r1, #0
 8001bd0:	f7ff fdbc 	bl	800174c <RCC_APB1PeriphResetCmd>
 8001bd4:	e0b2      	b.n	8001d3c <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM6)  
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bdc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d10c      	bne.n	8001bfe <TIM_DeInit+0xf2>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8001be4:	f04f 0010 	mov.w	r0, #16
 8001be8:	f04f 0101 	mov.w	r1, #1
 8001bec:	f7ff fdae 	bl	800174c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8001bf0:	f04f 0010 	mov.w	r0, #16
 8001bf4:	f04f 0100 	mov.w	r1, #0
 8001bf8:	f7ff fda8 	bl	800174c <RCC_APB1PeriphResetCmd>
 8001bfc:	e09e      	b.n	8001d3c <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM7)
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c04:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d10c      	bne.n	8001c26 <TIM_DeInit+0x11a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8001c0c:	f04f 0020 	mov.w	r0, #32
 8001c10:	f04f 0101 	mov.w	r1, #1
 8001c14:	f7ff fd9a 	bl	800174c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8001c18:	f04f 0020 	mov.w	r0, #32
 8001c1c:	f04f 0100 	mov.w	r1, #0
 8001c20:	f7ff fd94 	bl	800174c <RCC_APB1PeriphResetCmd>
 8001c24:	e08a      	b.n	8001d3c <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM8)
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c2c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d10c      	bne.n	8001c4e <TIM_DeInit+0x142>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8001c34:	f04f 0002 	mov.w	r0, #2
 8001c38:	f04f 0101 	mov.w	r1, #1
 8001c3c:	f7ff fdb0 	bl	80017a0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8001c40:	f04f 0002 	mov.w	r0, #2
 8001c44:	f04f 0100 	mov.w	r1, #0
 8001c48:	f7ff fdaa 	bl	80017a0 <RCC_APB2PeriphResetCmd>
 8001c4c:	e076      	b.n	8001d3c <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM9)
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c54:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d10c      	bne.n	8001c76 <TIM_DeInit+0x16a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8001c5c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001c60:	f04f 0101 	mov.w	r1, #1
 8001c64:	f7ff fd9c 	bl	80017a0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8001c68:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001c6c:	f04f 0100 	mov.w	r1, #0
 8001c70:	f7ff fd96 	bl	80017a0 <RCC_APB2PeriphResetCmd>
 8001c74:	e062      	b.n	8001d3c <TIM_DeInit+0x230>
   }  
  else if (TIMx == TIM10)
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8001c7c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d10c      	bne.n	8001c9e <TIM_DeInit+0x192>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8001c84:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001c88:	f04f 0101 	mov.w	r1, #1
 8001c8c:	f7ff fd88 	bl	80017a0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8001c90:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001c94:	f04f 0100 	mov.w	r1, #0
 8001c98:	f7ff fd82 	bl	80017a0 <RCC_APB2PeriphResetCmd>
 8001c9c:	e04e      	b.n	8001d3c <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM11) 
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001ca4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d10c      	bne.n	8001cc6 <TIM_DeInit+0x1ba>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8001cac:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001cb0:	f04f 0101 	mov.w	r1, #1
 8001cb4:	f7ff fd74 	bl	80017a0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8001cb8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001cbc:	f04f 0100 	mov.w	r1, #0
 8001cc0:	f7ff fd6e 	bl	80017a0 <RCC_APB2PeriphResetCmd>
 8001cc4:	e03a      	b.n	8001d3c <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM12)
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ccc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d10c      	bne.n	8001cee <TIM_DeInit+0x1e2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8001cd4:	f04f 0040 	mov.w	r0, #64	; 0x40
 8001cd8:	f04f 0101 	mov.w	r1, #1
 8001cdc:	f7ff fd36 	bl	800174c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8001ce0:	f04f 0040 	mov.w	r0, #64	; 0x40
 8001ce4:	f04f 0100 	mov.w	r1, #0
 8001ce8:	f7ff fd30 	bl	800174c <RCC_APB1PeriphResetCmd>
 8001cec:	e026      	b.n	8001d3c <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM13) 
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001cf4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d10c      	bne.n	8001d16 <TIM_DeInit+0x20a>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8001cfc:	f04f 0080 	mov.w	r0, #128	; 0x80
 8001d00:	f04f 0101 	mov.w	r1, #1
 8001d04:	f7ff fd22 	bl	800174c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8001d08:	f04f 0080 	mov.w	r0, #128	; 0x80
 8001d0c:	f04f 0100 	mov.w	r1, #0
 8001d10:	f7ff fd1c 	bl	800174c <RCC_APB1PeriphResetCmd>
 8001d14:	e012      	b.n	8001d3c <TIM_DeInit+0x230>
  }  
  else
  { 
    if (TIMx == TIM14) 
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d1c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d10b      	bne.n	8001d3c <TIM_DeInit+0x230>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8001d24:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d28:	f04f 0101 	mov.w	r1, #1
 8001d2c:	f7ff fd0e 	bl	800174c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8001d30:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d34:	f04f 0100 	mov.w	r1, #0
 8001d38:	f7ff fd08 	bl	800174c <RCC_APB1PeriphResetCmd>
    }   
  }
}
 8001d3c:	f107 0708 	add.w	r7, r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	f04f 0300 	mov.w	r3, #0
 8001d60:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d01f      	beq.n	8001da8 <TIM_TimeBaseInit+0x64>
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d018      	beq.n	8001da8 <TIM_TimeBaseInit+0x64>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7c:	d014      	beq.n	8001da8 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d84:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d00d      	beq.n	8001da8 <TIM_TimeBaseInit+0x64>
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d92:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d006      	beq.n	8001da8 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001da0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d108      	bne.n	8001dba <TIM_TimeBaseInit+0x76>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001da8:	89fb      	ldrh	r3, [r7, #14]
 8001daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dae:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	885a      	ldrh	r2, [r3, #2]
 8001db4:	89fb      	ldrh	r3, [r7, #14]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d00f      	beq.n	8001de8 <TIM_TimeBaseInit+0xa4>
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d008      	beq.n	8001de8 <TIM_TimeBaseInit+0xa4>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001dd6:	89fb      	ldrh	r3, [r7, #14]
 8001dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ddc:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	891a      	ldrh	r2, [r3, #8]
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	89fa      	ldrh	r2, [r7, #14]
 8001dec:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	881a      	ldrh	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d006      	beq.n	8001e1a <TIM_TimeBaseInit+0xd6>
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e12:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d104      	bne.n	8001e24 <TIM_TimeBaseInit+0xe0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	7a9b      	ldrb	r3, [r3, #10]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f04f 0201 	mov.w	r2, #1
 8001e2a:	829a      	strh	r2, [r3, #20]
}
 8001e2c:	f107 0714 	add.w	r7, r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop

08001e38 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e46:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	729a      	strb	r2, [r3, #10]
}
 8001e68:	f107 070c 	add.w	r7, r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop

08001e74 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	460a      	mov	r2, r1
 8001e80:	807a      	strh	r2, [r7, #2]
 8001e82:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	887a      	ldrh	r2, [r7, #2]
 8001e88:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	883a      	ldrh	r2, [r7, #0]
 8001e8e:	829a      	strh	r2, [r3, #20]
}
 8001e90:	f107 070c 	add.w	r7, r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop

08001e9c <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eb4:	89fb      	ldrh	r3, [r7, #14]
 8001eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eba:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8001ebc:	89fa      	ldrh	r2, [r7, #14]
 8001ebe:	887b      	ldrh	r3, [r7, #2]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	89fa      	ldrh	r2, [r7, #14]
 8001ec8:	801a      	strh	r2, [r3, #0]
}
 8001eca:	f107 0714 	add.w	r7, r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001ee4:	f107 070c 	add.w	r7, r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop

08001ef0 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001f00:	f107 070c 	add.w	r7, r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop

08001f0c <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f107 070c 	add.w	r7, r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f30:	b29b      	uxth	r3, r3
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	f107 070c 	add.w	r7, r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop

08001f40 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d008      	beq.n	8001f64 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	801a      	strh	r2, [r3, #0]
 8001f62:	e007      	b.n	8001f74 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	f023 0302 	bic.w	r3, r3, #2
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	801a      	strh	r2, [r3, #0]
  }
}
 8001f74:	f107 070c 	add.w	r7, r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop

08001f80 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8001f8c:	887b      	ldrh	r3, [r7, #2]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d008      	beq.n	8001fa4 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	801a      	strh	r2, [r3, #0]
 8001fa2:	e007      	b.n	8001fb4 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	f023 0304 	bic.w	r3, r3, #4
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	801a      	strh	r2, [r3, #0]
  }
}
 8001fb4:	f107 070c 	add.w	r7, r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop

08001fc0 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d008      	beq.n	8001fe4 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	801a      	strh	r2, [r3, #0]
 8001fe2:	e007      	b.n	8001ff4 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	801a      	strh	r2, [r3, #0]
  }
}
 8001ff4:	f107 070c 	add.w	r7, r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop

08002000 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	b29b      	uxth	r3, r3
 8002012:	f023 0308 	bic.w	r3, r3, #8
 8002016:	b29a      	uxth	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	b29a      	uxth	r2, r3
 8002022:	887b      	ldrh	r3, [r7, #2]
 8002024:	4313      	orrs	r3, r2
 8002026:	b29a      	uxth	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	801a      	strh	r2, [r3, #0]
}
 800202c:	f107 070c 	add.w	r7, r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop

08002038 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	b29b      	uxth	r3, r3
 800204a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800204e:	b29a      	uxth	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	b29a      	uxth	r2, r3
 800205a:	887b      	ldrh	r3, [r7, #2]
 800205c:	4313      	orrs	r3, r2
 800205e:	b29a      	uxth	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	801a      	strh	r2, [r3, #0]
}
 8002064:	f107 070c 	add.w	r7, r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop

08002070 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d008      	beq.n	8002094 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	b29a      	uxth	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	801a      	strh	r2, [r3, #0]
 8002092:	e007      	b.n	80020a4 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	b29b      	uxth	r3, r3
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	801a      	strh	r2, [r3, #0]
  }
}
 80020a4:	f107 070c 	add.w	r7, r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop

080020b0 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	817b      	strh	r3, [r7, #10]
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	81fb      	strh	r3, [r7, #14]
 80020c6:	f04f 0300 	mov.w	r3, #0
 80020ca:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	8c1b      	ldrh	r3, [r3, #32]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	8c1b      	ldrh	r3, [r3, #32]
 80020e0:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	889b      	ldrh	r3, [r3, #4]
 80020e6:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	8b1b      	ldrh	r3, [r3, #24]
 80020ec:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 80020ee:	897b      	ldrh	r3, [r7, #10]
 80020f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f4:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80020f6:	897b      	ldrh	r3, [r7, #10]
 80020f8:	f023 0303 	bic.w	r3, r3, #3
 80020fc:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	881a      	ldrh	r2, [r3, #0]
 8002102:	897b      	ldrh	r3, [r7, #10]
 8002104:	4313      	orrs	r3, r2
 8002106:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8002108:	89fb      	ldrh	r3, [r7, #14]
 800210a:	f023 0302 	bic.w	r3, r3, #2
 800210e:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	899a      	ldrh	r2, [r3, #12]
 8002114:	89fb      	ldrh	r3, [r7, #14]
 8002116:	4313      	orrs	r3, r2
 8002118:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	885a      	ldrh	r2, [r3, #2]
 800211e:	89fb      	ldrh	r3, [r7, #14]
 8002120:	4313      	orrs	r3, r2
 8002122:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800212e:	429a      	cmp	r2, r3
 8002130:	d006      	beq.n	8002140 <TIM_OC1Init+0x90>
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002138:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800213c:	429a      	cmp	r2, r3
 800213e:	d123      	bne.n	8002188 <TIM_OC1Init+0xd8>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002140:	89fb      	ldrh	r3, [r7, #14]
 8002142:	f023 0308 	bic.w	r3, r3, #8
 8002146:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	89da      	ldrh	r2, [r3, #14]
 800214c:	89fb      	ldrh	r3, [r7, #14]
 800214e:	4313      	orrs	r3, r2
 8002150:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8002152:	89fb      	ldrh	r3, [r7, #14]
 8002154:	f023 0304 	bic.w	r3, r3, #4
 8002158:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	889a      	ldrh	r2, [r3, #4]
 800215e:	89fb      	ldrh	r3, [r7, #14]
 8002160:	4313      	orrs	r3, r2
 8002162:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 8002164:	89bb      	ldrh	r3, [r7, #12]
 8002166:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800216a:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800216c:	89bb      	ldrh	r3, [r7, #12]
 800216e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002172:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	8a1a      	ldrh	r2, [r3, #16]
 8002178:	89bb      	ldrh	r3, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	8a5a      	ldrh	r2, [r3, #18]
 8002182:	89bb      	ldrh	r3, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	89ba      	ldrh	r2, [r7, #12]
 800218c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	897a      	ldrh	r2, [r7, #10]
 8002192:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	89fa      	ldrh	r2, [r7, #14]
 80021a0:	841a      	strh	r2, [r3, #32]
}
 80021a2:	f107 0714 	add.w	r7, r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	817b      	strh	r3, [r7, #10]
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	81fb      	strh	r3, [r7, #14]
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	8c1b      	ldrh	r3, [r3, #32]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	f023 0310 	bic.w	r3, r3, #16
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	8c1b      	ldrh	r3, [r3, #32]
 80021dc:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	889b      	ldrh	r3, [r3, #4]
 80021e2:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	8b1b      	ldrh	r3, [r3, #24]
 80021e8:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 80021ea:	897b      	ldrh	r3, [r7, #10]
 80021ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021f0:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80021f2:	897b      	ldrh	r3, [r7, #10]
 80021f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f8:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002202:	b29a      	uxth	r2, r3
 8002204:	897b      	ldrh	r3, [r7, #10]
 8002206:	4313      	orrs	r3, r2
 8002208:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800220a:	89fb      	ldrh	r3, [r7, #14]
 800220c:	f023 0320 	bic.w	r3, r3, #32
 8002210:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	899b      	ldrh	r3, [r3, #12]
 8002216:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800221a:	b29a      	uxth	r2, r3
 800221c:	89fb      	ldrh	r3, [r7, #14]
 800221e:	4313      	orrs	r3, r2
 8002220:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	885b      	ldrh	r3, [r3, #2]
 8002226:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800222a:	b29a      	uxth	r2, r3
 800222c:	89fb      	ldrh	r3, [r7, #14]
 800222e:	4313      	orrs	r3, r2
 8002230:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800223c:	429a      	cmp	r2, r3
 800223e:	d006      	beq.n	800224e <TIM_OC2Init+0xa2>
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002246:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800224a:	429a      	cmp	r2, r3
 800224c:	d12f      	bne.n	80022ae <TIM_OC2Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800224e:	89fb      	ldrh	r3, [r7, #14]
 8002250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002254:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	89db      	ldrh	r3, [r3, #14]
 800225a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800225e:	b29a      	uxth	r2, r3
 8002260:	89fb      	ldrh	r3, [r7, #14]
 8002262:	4313      	orrs	r3, r2
 8002264:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8002266:	89fb      	ldrh	r3, [r7, #14]
 8002268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800226c:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	889b      	ldrh	r3, [r3, #4]
 8002272:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002276:	b29a      	uxth	r2, r3
 8002278:	89fb      	ldrh	r3, [r7, #14]
 800227a:	4313      	orrs	r3, r2
 800227c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 800227e:	89bb      	ldrh	r3, [r7, #12]
 8002280:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002284:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8002286:	89bb      	ldrh	r3, [r7, #12]
 8002288:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800228c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	8a1b      	ldrh	r3, [r3, #16]
 8002292:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002296:	b29a      	uxth	r2, r3
 8002298:	89bb      	ldrh	r3, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	8a5b      	ldrh	r3, [r3, #18]
 80022a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	89bb      	ldrh	r3, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	89ba      	ldrh	r2, [r7, #12]
 80022b2:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	897a      	ldrh	r2, [r7, #10]
 80022b8:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	89fa      	ldrh	r2, [r7, #14]
 80022c6:	841a      	strh	r2, [r3, #32]
}
 80022c8:	f107 0714 	add.w	r7, r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop

080022d4 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	817b      	strh	r3, [r7, #10]
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	81fb      	strh	r3, [r7, #14]
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	8c1b      	ldrh	r3, [r3, #32]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	8c1b      	ldrh	r3, [r3, #32]
 8002304:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	889b      	ldrh	r3, [r3, #4]
 800230a:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	8b9b      	ldrh	r3, [r3, #28]
 8002310:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8002312:	897b      	ldrh	r3, [r7, #10]
 8002314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002318:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800231a:	897b      	ldrh	r3, [r7, #10]
 800231c:	f023 0303 	bic.w	r3, r3, #3
 8002320:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	881a      	ldrh	r2, [r3, #0]
 8002326:	897b      	ldrh	r3, [r7, #10]
 8002328:	4313      	orrs	r3, r2
 800232a:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800232c:	89fb      	ldrh	r3, [r7, #14]
 800232e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002332:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	899b      	ldrh	r3, [r3, #12]
 8002338:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800233c:	b29a      	uxth	r2, r3
 800233e:	89fb      	ldrh	r3, [r7, #14]
 8002340:	4313      	orrs	r3, r2
 8002342:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	885b      	ldrh	r3, [r3, #2]
 8002348:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800234c:	b29a      	uxth	r2, r3
 800234e:	89fb      	ldrh	r3, [r7, #14]
 8002350:	4313      	orrs	r3, r2
 8002352:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800235e:	429a      	cmp	r2, r3
 8002360:	d006      	beq.n	8002370 <TIM_OC3Init+0x9c>
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002368:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800236c:	429a      	cmp	r2, r3
 800236e:	d12f      	bne.n	80023d0 <TIM_OC3Init+0xfc>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8002370:	89fb      	ldrh	r3, [r7, #14]
 8002372:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002376:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	89db      	ldrh	r3, [r3, #14]
 800237c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002380:	b29a      	uxth	r2, r3
 8002382:	89fb      	ldrh	r3, [r7, #14]
 8002384:	4313      	orrs	r3, r2
 8002386:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8002388:	89fb      	ldrh	r3, [r7, #14]
 800238a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800238e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	889b      	ldrh	r3, [r3, #4]
 8002394:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002398:	b29a      	uxth	r2, r3
 800239a:	89fb      	ldrh	r3, [r7, #14]
 800239c:	4313      	orrs	r3, r2
 800239e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 80023a0:	89bb      	ldrh	r3, [r7, #12]
 80023a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023a6:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80023a8:	89bb      	ldrh	r3, [r7, #12]
 80023aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023ae:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	8a1b      	ldrh	r3, [r3, #16]
 80023b4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	89bb      	ldrh	r3, [r7, #12]
 80023bc:	4313      	orrs	r3, r2
 80023be:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	8a5b      	ldrh	r3, [r3, #18]
 80023c4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	89bb      	ldrh	r3, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	89ba      	ldrh	r2, [r7, #12]
 80023d4:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	897a      	ldrh	r2, [r7, #10]
 80023da:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	89fa      	ldrh	r2, [r7, #14]
 80023e8:	841a      	strh	r2, [r3, #32]
}
 80023ea:	f107 0714 	add.w	r7, r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	81bb      	strh	r3, [r7, #12]
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	817b      	strh	r3, [r7, #10]
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	8c1b      	ldrh	r3, [r3, #32]
 8002414:	b29b      	uxth	r3, r3
 8002416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800241a:	b29a      	uxth	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	8c1b      	ldrh	r3, [r3, #32]
 8002424:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	889b      	ldrh	r3, [r3, #4]
 800242a:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	8b9b      	ldrh	r3, [r3, #28]
 8002430:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8002432:	89bb      	ldrh	r3, [r7, #12]
 8002434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002438:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800243a:	89bb      	ldrh	r3, [r7, #12]
 800243c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002440:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800244a:	b29a      	uxth	r2, r3
 800244c:	89bb      	ldrh	r3, [r7, #12]
 800244e:	4313      	orrs	r3, r2
 8002450:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8002452:	897b      	ldrh	r3, [r7, #10]
 8002454:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002458:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	899b      	ldrh	r3, [r3, #12]
 800245e:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002462:	b29a      	uxth	r2, r3
 8002464:	897b      	ldrh	r3, [r7, #10]
 8002466:	4313      	orrs	r3, r2
 8002468:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	885b      	ldrh	r3, [r3, #2]
 800246e:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002472:	b29a      	uxth	r2, r3
 8002474:	897b      	ldrh	r3, [r7, #10]
 8002476:	4313      	orrs	r3, r2
 8002478:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002484:	429a      	cmp	r2, r3
 8002486:	d006      	beq.n	8002496 <TIM_OC4Init+0xa2>
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800248e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002492:	429a      	cmp	r2, r3
 8002494:	d10b      	bne.n	80024ae <TIM_OC4Init+0xba>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8002496:	89fb      	ldrh	r3, [r7, #14]
 8002498:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800249c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	8a1b      	ldrh	r3, [r3, #16]
 80024a2:	ea4f 1383 	mov.w	r3, r3, lsl #6
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	89fb      	ldrh	r3, [r7, #14]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	89fa      	ldrh	r2, [r7, #14]
 80024b2:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	89ba      	ldrh	r2, [r7, #12]
 80024b8:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	897a      	ldrh	r2, [r7, #10]
 80024c6:	841a      	strh	r2, [r3, #32]
}
 80024c8:	f107 0714 	add.w	r7, r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop

080024d4 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	825a      	strh	r2, [r3, #18]
}
 800251c:	f107 070c 	add.w	r7, r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop

08002528 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	460a      	mov	r2, r1
 8002534:	807a      	strh	r2, [r7, #2]
 8002536:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f103 0318 	add.w	r3, r3, #24
 800254e:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8002550:	887b      	ldrh	r3, [r7, #2]
 8002552:	f04f 0201 	mov.w	r2, #1
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	8c1b      	ldrh	r3, [r3, #32]
 8002560:	b29a      	uxth	r2, r3
 8002562:	897b      	ldrh	r3, [r7, #10]
 8002564:	ea6f 0303 	mvn.w	r3, r3
 8002568:	b29b      	uxth	r3, r3
 800256a:	4013      	ands	r3, r2
 800256c:	b29a      	uxth	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8002572:	887b      	ldrh	r3, [r7, #2]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <TIM_SelectOCxM+0x56>
 8002578:	887b      	ldrh	r3, [r7, #2]
 800257a:	2b08      	cmp	r3, #8
 800257c:	d114      	bne.n	80025a8 <TIM_SelectOCxM+0x80>
  {
    tmp += (TIM_Channel>>1);
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8002584:	b29b      	uxth	r3, r3
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	18d3      	adds	r3, r2, r3
 800258a:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6819      	ldr	r1, [r3, #0]
 8002592:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8002596:	400b      	ands	r3, r1
 8002598:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	6811      	ldr	r1, [r2, #0]
 80025a0:	883a      	ldrh	r2, [r7, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	e019      	b.n	80025dc <TIM_SelectOCxM+0xb4>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 80025a8:	887b      	ldrh	r3, [r7, #2]
 80025aa:	f1a3 0304 	sub.w	r3, r3, #4
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	18d3      	adds	r3, r2, r3
 80025ba:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6819      	ldr	r1, [r3, #0]
 80025c2:	f648 73ff 	movw	r3, #36863	; 0x8fff
 80025c6:	400b      	ands	r3, r1
 80025c8:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	6811      	ldr	r1, [r2, #0]
 80025d0:	883a      	ldrh	r2, [r7, #0]
 80025d2:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80025d6:	b292      	uxth	r2, r2
 80025d8:	430a      	orrs	r2, r1
 80025da:	601a      	str	r2, [r3, #0]
  }
}
 80025dc:	f107 0714 	add.w	r7, r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop

080025e8 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80025f8:	f107 070c 	add.w	r7, r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop

08002604 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002614:	f107 070c 	add.w	r7, r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop

08002620 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002630:	f107 070c 	add.w	r7, r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop

0800263c <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800264c:	f107 070c 	add.w	r7, r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop

08002658 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	8b1b      	ldrh	r3, [r3, #24]
 800266e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 8002670:	89fb      	ldrh	r3, [r7, #14]
 8002672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002676:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8002678:	89fa      	ldrh	r2, [r7, #14]
 800267a:	887b      	ldrh	r3, [r7, #2]
 800267c:	4313      	orrs	r3, r2
 800267e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	89fa      	ldrh	r2, [r7, #14]
 8002684:	831a      	strh	r2, [r3, #24]
}
 8002686:	f107 0714 	add.w	r7, r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	8b1b      	ldrh	r3, [r3, #24]
 80026a6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 80026a8:	89fb      	ldrh	r3, [r7, #14]
 80026aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ae:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 80026b0:	887b      	ldrh	r3, [r7, #2]
 80026b2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	89fb      	ldrh	r3, [r7, #14]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	89fa      	ldrh	r2, [r7, #14]
 80026c2:	831a      	strh	r2, [r3, #24]
}
 80026c4:	f107 0714 	add.w	r7, r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop

080026d0 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	8b9b      	ldrh	r3, [r3, #28]
 80026e6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 80026e8:	89fb      	ldrh	r3, [r7, #14]
 80026ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ee:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 80026f0:	89fa      	ldrh	r2, [r7, #14]
 80026f2:	887b      	ldrh	r3, [r7, #2]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	89fa      	ldrh	r2, [r7, #14]
 80026fc:	839a      	strh	r2, [r3, #28]
}
 80026fe:	f107 0714 	add.w	r7, r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	8b9b      	ldrh	r3, [r3, #28]
 800271e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 8002720:	89fb      	ldrh	r3, [r7, #14]
 8002722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002726:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8002728:	887b      	ldrh	r3, [r7, #2]
 800272a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800272e:	b29a      	uxth	r2, r3
 8002730:	89fb      	ldrh	r3, [r7, #14]
 8002732:	4313      	orrs	r3, r2
 8002734:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	89fa      	ldrh	r2, [r7, #14]
 800273a:	839a      	strh	r2, [r3, #28]
}
 800273c:	f107 0714 	add.w	r7, r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop

08002748 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	8b1b      	ldrh	r3, [r3, #24]
 800275e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8002760:	89fb      	ldrh	r3, [r7, #14]
 8002762:	f023 0308 	bic.w	r3, r3, #8
 8002766:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8002768:	89fa      	ldrh	r2, [r7, #14]
 800276a:	887b      	ldrh	r3, [r7, #2]
 800276c:	4313      	orrs	r3, r2
 800276e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	89fa      	ldrh	r2, [r7, #14]
 8002774:	831a      	strh	r2, [r3, #24]
}
 8002776:	f107 0714 	add.w	r7, r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	8b1b      	ldrh	r3, [r3, #24]
 8002796:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8002798:	89fb      	ldrh	r3, [r7, #14]
 800279a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800279e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 80027a0:	887b      	ldrh	r3, [r7, #2]
 80027a2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	89fb      	ldrh	r3, [r7, #14]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	89fa      	ldrh	r2, [r7, #14]
 80027b2:	831a      	strh	r2, [r3, #24]
}
 80027b4:	f107 0714 	add.w	r7, r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop

080027c0 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	8b9b      	ldrh	r3, [r3, #28]
 80027d6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 80027d8:	89fb      	ldrh	r3, [r7, #14]
 80027da:	f023 0308 	bic.w	r3, r3, #8
 80027de:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80027e0:	89fa      	ldrh	r2, [r7, #14]
 80027e2:	887b      	ldrh	r3, [r7, #2]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	89fa      	ldrh	r2, [r7, #14]
 80027ec:	839a      	strh	r2, [r3, #28]
}
 80027ee:	f107 0714 	add.w	r7, r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	8b9b      	ldrh	r3, [r3, #28]
 800280e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8002810:	89fb      	ldrh	r3, [r7, #14]
 8002812:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002816:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8002818:	887b      	ldrh	r3, [r7, #2]
 800281a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800281e:	b29a      	uxth	r2, r3
 8002820:	89fb      	ldrh	r3, [r7, #14]
 8002822:	4313      	orrs	r3, r2
 8002824:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	89fa      	ldrh	r2, [r7, #14]
 800282a:	839a      	strh	r2, [r3, #28]
}
 800282c:	f107 0714 	add.w	r7, r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop

08002838 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	8b1b      	ldrh	r3, [r3, #24]
 800284e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8002850:	89fb      	ldrh	r3, [r7, #14]
 8002852:	f023 0304 	bic.w	r3, r3, #4
 8002856:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8002858:	89fa      	ldrh	r2, [r7, #14]
 800285a:	887b      	ldrh	r3, [r7, #2]
 800285c:	4313      	orrs	r3, r2
 800285e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	89fa      	ldrh	r2, [r7, #14]
 8002864:	831a      	strh	r2, [r3, #24]
}
 8002866:	f107 0714 	add.w	r7, r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	8b1b      	ldrh	r3, [r3, #24]
 8002886:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8002888:	89fb      	ldrh	r3, [r7, #14]
 800288a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800288e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8002890:	887b      	ldrh	r3, [r7, #2]
 8002892:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002896:	b29a      	uxth	r2, r3
 8002898:	89fb      	ldrh	r3, [r7, #14]
 800289a:	4313      	orrs	r3, r2
 800289c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	89fa      	ldrh	r2, [r7, #14]
 80028a2:	831a      	strh	r2, [r3, #24]
}
 80028a4:	f107 0714 	add.w	r7, r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop

080028b0 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	8b9b      	ldrh	r3, [r3, #28]
 80028c6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 80028c8:	89fb      	ldrh	r3, [r7, #14]
 80028ca:	f023 0304 	bic.w	r3, r3, #4
 80028ce:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 80028d0:	89fa      	ldrh	r2, [r7, #14]
 80028d2:	887b      	ldrh	r3, [r7, #2]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	89fa      	ldrh	r2, [r7, #14]
 80028dc:	839a      	strh	r2, [r3, #28]
}
 80028de:	f107 0714 	add.w	r7, r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	8b9b      	ldrh	r3, [r3, #28]
 80028fe:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8002900:	89fb      	ldrh	r3, [r7, #14]
 8002902:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002906:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8002908:	887b      	ldrh	r3, [r7, #2]
 800290a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800290e:	b29a      	uxth	r2, r3
 8002910:	89fb      	ldrh	r3, [r7, #14]
 8002912:	4313      	orrs	r3, r2
 8002914:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	89fa      	ldrh	r2, [r7, #14]
 800291a:	839a      	strh	r2, [r3, #28]
}
 800291c:	f107 0714 	add.w	r7, r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop

08002928 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	8b1b      	ldrh	r3, [r3, #24]
 800293e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8002940:	89fb      	ldrh	r3, [r7, #14]
 8002942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002946:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8002948:	89fa      	ldrh	r2, [r7, #14]
 800294a:	887b      	ldrh	r3, [r7, #2]
 800294c:	4313      	orrs	r3, r2
 800294e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	89fa      	ldrh	r2, [r7, #14]
 8002954:	831a      	strh	r2, [r3, #24]
}
 8002956:	f107 0714 	add.w	r7, r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	8b1b      	ldrh	r3, [r3, #24]
 8002976:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 8002978:	89fb      	ldrh	r3, [r7, #14]
 800297a:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800297e:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8002982:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8002984:	887b      	ldrh	r3, [r7, #2]
 8002986:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800298a:	b29a      	uxth	r2, r3
 800298c:	89fb      	ldrh	r3, [r7, #14]
 800298e:	4313      	orrs	r3, r2
 8002990:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	89fa      	ldrh	r2, [r7, #14]
 8002996:	831a      	strh	r2, [r3, #24]
}
 8002998:	f107 0714 	add.w	r7, r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop

080029a4 <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	8b9b      	ldrh	r3, [r3, #28]
 80029ba:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 80029bc:	89fb      	ldrh	r3, [r7, #14]
 80029be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029c2:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 80029c4:	89fa      	ldrh	r2, [r7, #14]
 80029c6:	887b      	ldrh	r3, [r7, #2]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	89fa      	ldrh	r2, [r7, #14]
 80029d0:	839a      	strh	r2, [r3, #28]
}
 80029d2:	f107 0714 	add.w	r7, r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	8b9b      	ldrh	r3, [r3, #28]
 80029f2:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 80029f4:	89fb      	ldrh	r3, [r7, #14]
 80029f6:	ea4f 4343 	mov.w	r3, r3, lsl #17
 80029fa:	ea4f 4353 	mov.w	r3, r3, lsr #17
 80029fe:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8002a00:	887b      	ldrh	r3, [r7, #2]
 8002a02:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	89fb      	ldrh	r3, [r7, #14]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	89fa      	ldrh	r2, [r7, #14]
 8002a12:	839a      	strh	r2, [r3, #28]
}
 8002a14:	f107 0714 	add.w	r7, r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop

08002a20 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	8c1b      	ldrh	r3, [r3, #32]
 8002a36:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8002a38:	89fb      	ldrh	r3, [r7, #14]
 8002a3a:	f023 0302 	bic.w	r3, r3, #2
 8002a3e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 8002a40:	89fa      	ldrh	r2, [r7, #14]
 8002a42:	887b      	ldrh	r3, [r7, #2]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	89fa      	ldrh	r2, [r7, #14]
 8002a4c:	841a      	strh	r2, [r3, #32]
}
 8002a4e:	f107 0714 	add.w	r7, r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	8c1b      	ldrh	r3, [r3, #32]
 8002a6e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002a70:	89fb      	ldrh	r3, [r7, #14]
 8002a72:	f023 0308 	bic.w	r3, r3, #8
 8002a76:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 8002a78:	89fa      	ldrh	r2, [r7, #14]
 8002a7a:	887b      	ldrh	r3, [r7, #2]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	89fa      	ldrh	r2, [r7, #14]
 8002a84:	841a      	strh	r2, [r3, #32]
}
 8002a86:	f107 0714 	add.w	r7, r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	8c1b      	ldrh	r3, [r3, #32]
 8002aa6:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8002aa8:	89fb      	ldrh	r3, [r7, #14]
 8002aaa:	f023 0320 	bic.w	r3, r3, #32
 8002aae:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8002ab0:	887b      	ldrh	r3, [r7, #2]
 8002ab2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	89fb      	ldrh	r3, [r7, #14]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	89fa      	ldrh	r2, [r7, #14]
 8002ac2:	841a      	strh	r2, [r3, #32]
}
 8002ac4:	f107 0714 	add.w	r7, r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop

08002ad0 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	8c1b      	ldrh	r3, [r3, #32]
 8002ae6:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8002ae8:	89fb      	ldrh	r3, [r7, #14]
 8002aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aee:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8002af0:	887b      	ldrh	r3, [r7, #2]
 8002af2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	89fb      	ldrh	r3, [r7, #14]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	89fa      	ldrh	r2, [r7, #14]
 8002b02:	841a      	strh	r2, [r3, #32]
}
 8002b04:	f107 0714 	add.w	r7, r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop

08002b10 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	8c1b      	ldrh	r3, [r3, #32]
 8002b26:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002b28:	89fb      	ldrh	r3, [r7, #14]
 8002b2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b2e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8002b30:	887b      	ldrh	r3, [r7, #2]
 8002b32:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	89fb      	ldrh	r3, [r7, #14]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	89fa      	ldrh	r2, [r7, #14]
 8002b42:	841a      	strh	r2, [r3, #32]
}
 8002b44:	f107 0714 	add.w	r7, r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop

08002b50 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	8c1b      	ldrh	r3, [r3, #32]
 8002b66:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8002b68:	89fb      	ldrh	r3, [r7, #14]
 8002b6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b6e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8002b70:	887b      	ldrh	r3, [r7, #2]
 8002b72:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	89fb      	ldrh	r3, [r7, #14]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	89fa      	ldrh	r2, [r7, #14]
 8002b82:	841a      	strh	r2, [r3, #32]
}
 8002b84:	f107 0714 	add.w	r7, r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop

08002b90 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	8c1b      	ldrh	r3, [r3, #32]
 8002ba6:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8002ba8:	89fb      	ldrh	r3, [r7, #14]
 8002baa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bae:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8002bb0:	887b      	ldrh	r3, [r7, #2]
 8002bb2:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	89fb      	ldrh	r3, [r7, #14]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	89fa      	ldrh	r2, [r7, #14]
 8002bc2:	841a      	strh	r2, [r3, #32]
}
 8002bc4:	f107 0714 	add.w	r7, r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop

08002bd0 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	460a      	mov	r2, r1
 8002bdc:	807a      	strh	r2, [r7, #2]
 8002bde:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8002be6:	887b      	ldrh	r3, [r7, #2]
 8002be8:	f04f 0201 	mov.w	r2, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	8c1b      	ldrh	r3, [r3, #32]
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	89fb      	ldrh	r3, [r7, #14]
 8002bfa:	ea6f 0303 	mvn.w	r3, r3
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	4013      	ands	r3, r2
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	8c1b      	ldrh	r3, [r3, #32]
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	8839      	ldrh	r1, [r7, #0]
 8002c10:	887b      	ldrh	r3, [r7, #2]
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	841a      	strh	r2, [r3, #32]
}
 8002c20:	f107 0714 	add.w	r7, r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop

08002c2c <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	460a      	mov	r2, r1
 8002c38:	807a      	strh	r2, [r7, #2]
 8002c3a:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8002c42:	887b      	ldrh	r3, [r7, #2]
 8002c44:	f04f 0204 	mov.w	r2, #4
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	8c1b      	ldrh	r3, [r3, #32]
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	89fb      	ldrh	r3, [r7, #14]
 8002c56:	ea6f 0303 	mvn.w	r3, r3
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	8c1b      	ldrh	r3, [r3, #32]
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	8839      	ldrh	r1, [r7, #0]
 8002c6c:	887b      	ldrh	r3, [r7, #2]
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	4313      	orrs	r3, r2
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	841a      	strh	r2, [r3, #32]
}
 8002c7c:	f107 0714 	add.w	r7, r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop

08002c88 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10f      	bne.n	8002cba <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8002c9e:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002ca0:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8002ca2:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002ca4:	891b      	ldrh	r3, [r3, #8]
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 fcc4 	bl	8003634 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	88db      	ldrh	r3, [r3, #6]
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	f000 f8ec 	bl	8002e90 <TIM_SetIC1Prescaler>
 8002cb8:	e036      	b.n	8002d28 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d10f      	bne.n	8002ce2 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8002cc6:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002cc8:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8002cca:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002ccc:	891b      	ldrh	r3, [r3, #8]
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fcf0 	bl	80036b4 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	88db      	ldrh	r3, [r3, #6]
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f000 f8f4 	bl	8002ec8 <TIM_SetIC2Prescaler>
 8002ce0:	e022      	b.n	8002d28 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d10f      	bne.n	8002d0a <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8002cee:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8002cf0:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8002cf2:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8002cf4:	891b      	ldrh	r3, [r3, #8]
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fd2a 	bl	8003750 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	88db      	ldrh	r3, [r3, #6]
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	4619      	mov	r1, r3
 8002d04:	f000 f8fe 	bl	8002f04 <TIM_SetIC3Prescaler>
 8002d08:	e00e      	b.n	8002d28 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8002d0e:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002d10:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8002d12:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002d14:	891b      	ldrh	r3, [r3, #8]
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fd60 	bl	80037dc <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	88db      	ldrh	r3, [r3, #6]
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	4619      	mov	r1, r3
 8002d24:	f000 f90a 	bl	8002f3c <TIM_SetIC4Prescaler>
  }
}
 8002d28:	f107 0708 	add.w	r7, r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f04f 0201 	mov.w	r2, #1
 8002d4e:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	811a      	strh	r2, [r3, #8]
}
 8002d60:	f107 070c 	add.w	r7, r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop

08002d6c <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 8002d7c:	f04f 0301 	mov.w	r3, #1
 8002d80:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	885b      	ldrh	r3, [r3, #2]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d103      	bne.n	8002d92 <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8002d8a:	f04f 0302 	mov.w	r3, #2
 8002d8e:	81fb      	strh	r3, [r7, #14]
 8002d90:	e002      	b.n	8002d98 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	889b      	ldrh	r3, [r3, #4]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d103      	bne.n	8002da8 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8002da0:	f04f 0302 	mov.w	r3, #2
 8002da4:	81bb      	strh	r3, [r7, #12]
 8002da6:	e002      	b.n	8002dae <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8002da8:	f04f 0301 	mov.w	r3, #1
 8002dac:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d11c      	bne.n	8002df0 <TIM_PWMIConfig+0x84>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	8859      	ldrh	r1, [r3, #2]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 8002dbe:	683b      	ldr	r3, [r7, #0]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002dc0:	891b      	ldrh	r3, [r3, #8]
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fc36 	bl	8003634 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	88db      	ldrh	r3, [r3, #6]
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f000 f85e 	bl	8002e90 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	891b      	ldrh	r3, [r3, #8]
 8002dd8:	89f9      	ldrh	r1, [r7, #14]
 8002dda:	89ba      	ldrh	r2, [r7, #12]
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fc69 	bl	80036b4 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	88db      	ldrh	r3, [r3, #6]
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	4619      	mov	r1, r3
 8002dea:	f000 f86d 	bl	8002ec8 <TIM_SetIC2Prescaler>
 8002dee:	e01b      	b.n	8002e28 <TIM_PWMIConfig+0xbc>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	8859      	ldrh	r1, [r3, #2]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 8002df8:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002dfa:	891b      	ldrh	r3, [r3, #8]
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fc59 	bl	80036b4 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	88db      	ldrh	r3, [r3, #6]
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f000 f85d 	bl	8002ec8 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	891b      	ldrh	r3, [r3, #8]
 8002e12:	89f9      	ldrh	r1, [r7, #14]
 8002e14:	89ba      	ldrh	r2, [r7, #12]
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fc0c 	bl	8003634 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	88db      	ldrh	r3, [r3, #6]
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	4619      	mov	r1, r3
 8002e24:	f000 f834 	bl	8002e90 <TIM_SetIC1Prescaler>
  }
}
 8002e28:	f107 0710 	add.w	r7, r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f107 070c 	add.w	r7, r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr

08002e48 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	f107 070c 	add.w	r7, r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f107 070c 	add.w	r7, r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	f107 070c 	add.w	r7, r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	8b1b      	ldrh	r3, [r3, #24]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	f023 030c 	bic.w	r3, r3, #12
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	8b1b      	ldrh	r3, [r3, #24]
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	887b      	ldrh	r3, [r7, #2]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	831a      	strh	r2, [r3, #24]
}
 8002ebc:	f107 070c 	add.w	r7, r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop

08002ec8 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8b1b      	ldrh	r3, [r3, #24]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	8b1b      	ldrh	r3, [r3, #24]
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	887b      	ldrh	r3, [r7, #2]
 8002eec:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	831a      	strh	r2, [r3, #24]
}
 8002efa:	f107 070c 	add.w	r7, r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	8b9b      	ldrh	r3, [r3, #28]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	f023 030c 	bic.w	r3, r3, #12
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	8b9b      	ldrh	r3, [r3, #28]
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	887b      	ldrh	r3, [r7, #2]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	839a      	strh	r2, [r3, #28]
}
 8002f30:	f107 070c 	add.w	r7, r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop

08002f3c <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	8b9b      	ldrh	r3, [r3, #28]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	8b9b      	ldrh	r3, [r3, #28]
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	887b      	ldrh	r3, [r7, #2]
 8002f60:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	4313      	orrs	r3, r2
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	839a      	strh	r2, [r3, #28]
}
 8002f6e:	f107 070c 	add.w	r7, r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	881a      	ldrh	r2, [r3, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	885b      	ldrh	r3, [r3, #2]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002f92:	4313      	orrs	r3, r2
 8002f94:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002faa:	4313      	orrs	r3, r2
 8002fac:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8002fbc:	f107 070c 	add.w	r7, r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop

08002fc8 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	819a      	strh	r2, [r3, #12]
}
 8003008:	f107 070c 	add.w	r7, r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop

08003014 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00c      	beq.n	8003040 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800302c:	b29b      	uxth	r3, r3
 800302e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003036:	b29a      	uxth	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800303e:	e00b      	b.n	8003058 <TIM_CtrlPWMOutputs+0x44>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003046:	b29b      	uxth	r3, r3
 8003048:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800304c:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8003050:	b29a      	uxth	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8003058:	f107 070c 	add.w	r7, r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop

08003064 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d008      	beq.n	8003088 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	889b      	ldrh	r3, [r3, #4]
 800307a:	b29b      	uxth	r3, r3
 800307c:	f043 0304 	orr.w	r3, r3, #4
 8003080:	b29a      	uxth	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	809a      	strh	r2, [r3, #4]
 8003086:	e007      	b.n	8003098 <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	889b      	ldrh	r3, [r3, #4]
 800308c:	b29b      	uxth	r3, r3
 800308e:	f023 0304 	bic.w	r3, r3, #4
 8003092:	b29a      	uxth	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	809a      	strh	r2, [r3, #4]
  }
}
 8003098:	f107 070c 	add.w	r7, r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop

080030a4 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d008      	beq.n	80030c8 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	889b      	ldrh	r3, [r3, #4]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	809a      	strh	r2, [r3, #4]
 80030c6:	e007      	b.n	80030d8 <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	889b      	ldrh	r3, [r3, #4]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	f023 0301 	bic.w	r3, r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	809a      	strh	r2, [r3, #4]
  }
}
 80030d8:	f107 070c 	add.w	r7, r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop

080030e4 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	460a      	mov	r2, r1
 80030f0:	807a      	strh	r2, [r7, #2]
 80030f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80030f4:	787b      	ldrb	r3, [r7, #1]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d008      	beq.n	800310c <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	899b      	ldrh	r3, [r3, #12]
 80030fe:	b29a      	uxth	r2, r3
 8003100:	887b      	ldrh	r3, [r7, #2]
 8003102:	4313      	orrs	r3, r2
 8003104:	b29a      	uxth	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	819a      	strh	r2, [r3, #12]
 800310a:	e00a      	b.n	8003122 <TIM_ITConfig+0x3e>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	899b      	ldrh	r3, [r3, #12]
 8003110:	b29a      	uxth	r2, r3
 8003112:	887b      	ldrh	r3, [r7, #2]
 8003114:	ea6f 0303 	mvn.w	r3, r3
 8003118:	b29b      	uxth	r3, r3
 800311a:	4013      	ands	r3, r2
 800311c:	b29a      	uxth	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	819a      	strh	r2, [r3, #12]
  }
}
 8003122:	f107 070c 	add.w	r7, r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	829a      	strh	r2, [r3, #20]
}
 800313e:	f107 070c 	add.w	r7, r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	8a1b      	ldrh	r3, [r3, #16]
 800315e:	b29a      	uxth	r2, r3
 8003160:	887b      	ldrh	r3, [r7, #2]
 8003162:	4013      	ands	r3, r2
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <TIM_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800316a:	f04f 0301 	mov.w	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
 8003170:	e002      	b.n	8003178 <TIM_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003178:	7bfb      	ldrb	r3, [r7, #15]
}
 800317a:	4618      	mov	r0, r3
 800317c:	f107 0714 	add.w	r7, r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop

08003188 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8003194:	887b      	ldrh	r3, [r7, #2]
 8003196:	ea6f 0303 	mvn.w	r3, r3
 800319a:	b29a      	uxth	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	821a      	strh	r2, [r3, #16]
}
 80031a0:	f107 070c 	add.w	r7, r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop

080031ac <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	81bb      	strh	r3, [r7, #12]
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	8a1b      	ldrh	r3, [r3, #16]
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	887b      	ldrh	r3, [r7, #2]
 80031d2:	4013      	ands	r3, r2
 80031d4:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	899b      	ldrh	r3, [r3, #12]
 80031da:	b29a      	uxth	r2, r3
 80031dc:	887b      	ldrh	r3, [r7, #2]
 80031de:	4013      	ands	r3, r2
 80031e0:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80031e2:	89bb      	ldrh	r3, [r7, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d006      	beq.n	80031f6 <TIM_GetITStatus+0x4a>
 80031e8:	897b      	ldrh	r3, [r7, #10]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 80031ee:	f04f 0301 	mov.w	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
 80031f4:	e002      	b.n	80031fc <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	f107 0714 	add.w	r7, r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop

0800320c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8003218:	887b      	ldrh	r3, [r7, #2]
 800321a:	ea6f 0303 	mvn.w	r3, r3
 800321e:	b29a      	uxth	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	821a      	strh	r2, [r3, #16]
}
 8003224:	f107 070c 	add.w	r7, r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop

08003230 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	460a      	mov	r2, r1
 800323c:	807a      	strh	r2, [r7, #2]
 800323e:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8003240:	887a      	ldrh	r2, [r7, #2]
 8003242:	883b      	ldrh	r3, [r7, #0]
 8003244:	4313      	orrs	r3, r2
 8003246:	b29a      	uxth	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 800324e:	f107 070c 	add.w	r7, r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr

08003258 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	460a      	mov	r2, r1
 8003264:	807a      	strh	r2, [r7, #2]
 8003266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003268:	787b      	ldrb	r3, [r7, #1]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	899b      	ldrh	r3, [r3, #12]
 8003272:	b29a      	uxth	r2, r3
 8003274:	887b      	ldrh	r3, [r7, #2]
 8003276:	4313      	orrs	r3, r2
 8003278:	b29a      	uxth	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	819a      	strh	r2, [r3, #12]
 800327e:	e00a      	b.n	8003296 <TIM_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	899b      	ldrh	r3, [r3, #12]
 8003284:	b29a      	uxth	r2, r3
 8003286:	887b      	ldrh	r3, [r7, #2]
 8003288:	ea6f 0303 	mvn.w	r3, r3
 800328c:	b29b      	uxth	r3, r3
 800328e:	4013      	ands	r3, r2
 8003290:	b29a      	uxth	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	819a      	strh	r2, [r3, #12]
  }
}
 8003296:	f107 070c 	add.w	r7, r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d008      	beq.n	80032c4 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	889b      	ldrh	r3, [r3, #4]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	f043 0308 	orr.w	r3, r3, #8
 80032bc:	b29a      	uxth	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	809a      	strh	r2, [r3, #4]
 80032c2:	e007      	b.n	80032d4 <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	889b      	ldrh	r3, [r3, #4]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	f023 0308 	bic.w	r3, r3, #8
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	809a      	strh	r2, [r3, #4]
  }
}
 80032d4:	f107 070c 	add.w	r7, r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop

080032e0 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	891b      	ldrh	r3, [r3, #8]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	f023 0307 	bic.w	r3, r3, #7
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	811a      	strh	r2, [r3, #8]
}
 80032f8:	f107 070c 	add.w	r7, r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop

08003304 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 8003310:	887b      	ldrh	r3, [r7, #2]
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	4619      	mov	r1, r3
 8003316:	f000 f87d 	bl	8003414 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	891b      	ldrh	r3, [r3, #8]
 800331e:	b29b      	uxth	r3, r3
 8003320:	f043 0307 	orr.w	r3, r3, #7
 8003324:	b29a      	uxth	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	811a      	strh	r2, [r3, #8]
}
 800332a:	f107 0708 	add.w	r7, r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop

08003334 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	8179      	strh	r1, [r7, #10]
 800333e:	813a      	strh	r2, [r7, #8]
 8003340:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8003342:	897b      	ldrh	r3, [r7, #10]
 8003344:	2b60      	cmp	r3, #96	; 0x60
 8003346:	d108      	bne.n	800335a <TIM_TIxExternalClockConfig+0x26>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8003348:	893a      	ldrh	r2, [r7, #8]
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	4611      	mov	r1, r2
 8003350:	f04f 0201 	mov.w	r2, #1
 8003354:	f000 f9ae 	bl	80036b4 <TI2_Config>
 8003358:	e007      	b.n	800336a <TIM_TIxExternalClockConfig+0x36>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800335a:	893a      	ldrh	r2, [r7, #8]
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	4611      	mov	r1, r2
 8003362:	f04f 0201 	mov.w	r2, #1
 8003366:	f000 f965 	bl	8003634 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 800336a:	897b      	ldrh	r3, [r7, #10]
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	4619      	mov	r1, r3
 8003370:	f000 f850 	bl	8003414 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	891b      	ldrh	r3, [r3, #8]
 8003378:	b29b      	uxth	r3, r3
 800337a:	f043 0307 	orr.w	r3, r3, #7
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	811a      	strh	r2, [r3, #8]
}
 8003384:	f107 0710 	add.w	r7, r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	8179      	strh	r1, [r7, #10]
 8003396:	813a      	strh	r2, [r7, #8]
 8003398:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80033a0:	8979      	ldrh	r1, [r7, #10]
 80033a2:	893a      	ldrh	r2, [r7, #8]
 80033a4:	88fb      	ldrh	r3, [r7, #6]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f8a4 	bl	80034f4 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	891b      	ldrh	r3, [r3, #8]
 80033b0:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80033b2:	8afb      	ldrh	r3, [r7, #22]
 80033b4:	f023 0307 	bic.w	r3, r3, #7
 80033b8:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 80033ba:	8afb      	ldrh	r3, [r7, #22]
 80033bc:	f043 0307 	orr.w	r3, r3, #7
 80033c0:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80033c2:	8afb      	ldrh	r3, [r7, #22]
 80033c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c8:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 80033ca:	8afb      	ldrh	r3, [r7, #22]
 80033cc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80033d0:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8afa      	ldrh	r2, [r7, #22]
 80033d6:	811a      	strh	r2, [r3, #8]
}
 80033d8:	f107 0718 	add.w	r7, r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	8179      	strh	r1, [r7, #10]
 80033ea:	813a      	strh	r2, [r7, #8]
 80033ec:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80033ee:	8979      	ldrh	r1, [r7, #10]
 80033f0:	893a      	ldrh	r2, [r7, #8]
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f87d 	bl	80034f4 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	891b      	ldrh	r3, [r3, #8]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	811a      	strh	r2, [r3, #8]
}
 800340a:	f107 0710 	add.w	r7, r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop

08003414 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	891b      	ldrh	r3, [r3, #8]
 800342a:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800342c:	89fb      	ldrh	r3, [r7, #14]
 800342e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003432:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8003434:	89fa      	ldrh	r2, [r7, #14]
 8003436:	887b      	ldrh	r3, [r7, #2]
 8003438:	4313      	orrs	r3, r2
 800343a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	89fa      	ldrh	r2, [r7, #14]
 8003440:	811a      	strh	r2, [r3, #8]
}
 8003442:	f107 0714 	add.w	r7, r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr

0800344c <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	889b      	ldrh	r3, [r3, #4]
 800345c:	b29b      	uxth	r3, r3
 800345e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003462:	b29a      	uxth	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	889b      	ldrh	r3, [r3, #4]
 800346c:	b29a      	uxth	r2, r3
 800346e:	887b      	ldrh	r3, [r7, #2]
 8003470:	4313      	orrs	r3, r2
 8003472:	b29a      	uxth	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	809a      	strh	r2, [r3, #4]
}
 8003478:	f107 070c 	add.w	r7, r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop

08003484 <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	891b      	ldrh	r3, [r3, #8]
 8003494:	b29b      	uxth	r3, r3
 8003496:	f023 0307 	bic.w	r3, r3, #7
 800349a:	b29a      	uxth	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	891b      	ldrh	r3, [r3, #8]
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	887b      	ldrh	r3, [r7, #2]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	811a      	strh	r2, [r3, #8]
}
 80034b0:	f107 070c 	add.w	r7, r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop

080034bc <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	891b      	ldrh	r3, [r3, #8]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	891b      	ldrh	r3, [r3, #8]
 80034dc:	b29a      	uxth	r2, r3
 80034de:	887b      	ldrh	r3, [r7, #2]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	811a      	strh	r2, [r3, #8]
}
 80034e8:	f107 070c 	add.w	r7, r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop

080034f4 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	8179      	strh	r1, [r7, #10]
 80034fe:	813a      	strh	r2, [r7, #8]
 8003500:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	891b      	ldrh	r3, [r3, #8]
 800350c:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 800350e:	8afb      	ldrh	r3, [r7, #22]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8003514:	88fb      	ldrh	r3, [r7, #6]
 8003516:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800351a:	b29a      	uxth	r2, r3
 800351c:	893b      	ldrh	r3, [r7, #8]
 800351e:	4313      	orrs	r3, r2
 8003520:	b29a      	uxth	r2, r3
 8003522:	897b      	ldrh	r3, [r7, #10]
 8003524:	4313      	orrs	r3, r2
 8003526:	b29a      	uxth	r2, r3
 8003528:	8afb      	ldrh	r3, [r7, #22]
 800352a:	4313      	orrs	r3, r2
 800352c:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8afa      	ldrh	r2, [r7, #22]
 8003532:	811a      	strh	r2, [r3, #8]
}
 8003534:	f107 071c 	add.w	r7, r7, #28
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop

08003540 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	8179      	strh	r1, [r7, #10]
 800354a:	813a      	strh	r2, [r7, #8]
 800354c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	891b      	ldrh	r3, [r3, #8]
 8003564:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8b1b      	ldrh	r3, [r3, #24]
 800356a:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8c1b      	ldrh	r3, [r3, #32]
 8003570:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8003572:	8afb      	ldrh	r3, [r7, #22]
 8003574:	f023 0307 	bic.w	r3, r3, #7
 8003578:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 800357a:	8afa      	ldrh	r2, [r7, #22]
 800357c:	897b      	ldrh	r3, [r7, #10]
 800357e:	4313      	orrs	r3, r2
 8003580:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8003582:	8abb      	ldrh	r3, [r7, #20]
 8003584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003588:	f023 0303 	bic.w	r3, r3, #3
 800358c:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800358e:	8abb      	ldrh	r3, [r7, #20]
 8003590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 800359a:	8a7b      	ldrh	r3, [r7, #18]
 800359c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80035a0:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	893b      	ldrh	r3, [r7, #8]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	8a7b      	ldrh	r3, [r7, #18]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8afa      	ldrh	r2, [r7, #22]
 80035ba:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8aba      	ldrh	r2, [r7, #20]
 80035c0:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8a7a      	ldrh	r2, [r7, #18]
 80035c6:	841a      	strh	r2, [r3, #32]
}
 80035c8:	f107 071c 	add.w	r7, r7, #28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop

080035d4 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	889b      	ldrh	r3, [r3, #4]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	809a      	strh	r2, [r3, #4]
 80035f6:	e007      	b.n	8003608 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	889b      	ldrh	r3, [r3, #4]
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003602:	b29a      	uxth	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	809a      	strh	r2, [r3, #4]
  }
}
 8003608:	f107 070c 	add.w	r7, r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop

08003614 <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	887a      	ldrh	r2, [r7, #2]
 8003624:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8003628:	f107 070c 	add.w	r7, r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop

08003634 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	8179      	strh	r1, [r7, #10]
 800363e:	813a      	strh	r2, [r7, #8]
 8003640:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	82fb      	strh	r3, [r7, #22]
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8c1b      	ldrh	r3, [r3, #32]
 8003652:	b29b      	uxth	r3, r3
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8b1b      	ldrh	r3, [r3, #24]
 8003662:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8c1b      	ldrh	r3, [r3, #32]
 8003668:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 800366a:	8afb      	ldrh	r3, [r7, #22]
 800366c:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8003670:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003678:	b29a      	uxth	r2, r3
 800367a:	893b      	ldrh	r3, [r7, #8]
 800367c:	4313      	orrs	r3, r2
 800367e:	b29a      	uxth	r2, r3
 8003680:	8afb      	ldrh	r3, [r7, #22]
 8003682:	4313      	orrs	r3, r2
 8003684:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003686:	8abb      	ldrh	r3, [r7, #20]
 8003688:	f023 030a 	bic.w	r3, r3, #10
 800368c:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800368e:	897a      	ldrh	r2, [r7, #10]
 8003690:	8abb      	ldrh	r3, [r7, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	b29b      	uxth	r3, r3
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8afa      	ldrh	r2, [r7, #22]
 80036a0:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8aba      	ldrh	r2, [r7, #20]
 80036a6:	841a      	strh	r2, [r3, #32]
}
 80036a8:	f107 071c 	add.w	r7, r7, #28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop

080036b4 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	8179      	strh	r1, [r7, #10]
 80036be:	813a      	strh	r2, [r7, #8]
 80036c0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	82fb      	strh	r3, [r7, #22]
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	82bb      	strh	r3, [r7, #20]
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8c1b      	ldrh	r3, [r3, #32]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	f023 0310 	bic.w	r3, r3, #16
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8b1b      	ldrh	r3, [r3, #24]
 80036e8:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8c1b      	ldrh	r3, [r3, #32]
 80036ee:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80036f0:	897b      	ldrh	r3, [r7, #10]
 80036f2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80036f6:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80036f8:	8afb      	ldrh	r3, [r7, #22]
 80036fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fe:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8003702:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8003706:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800370e:	b29a      	uxth	r2, r3
 8003710:	8afb      	ldrh	r3, [r7, #22]
 8003712:	4313      	orrs	r3, r2
 8003714:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8003716:	893b      	ldrh	r3, [r7, #8]
 8003718:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800371c:	b29a      	uxth	r2, r3
 800371e:	8afb      	ldrh	r3, [r7, #22]
 8003720:	4313      	orrs	r3, r2
 8003722:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003724:	8abb      	ldrh	r3, [r7, #20]
 8003726:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800372a:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800372c:	8a7a      	ldrh	r2, [r7, #18]
 800372e:	8abb      	ldrh	r3, [r7, #20]
 8003730:	4313      	orrs	r3, r2
 8003732:	b29b      	uxth	r3, r3
 8003734:	f043 0310 	orr.w	r3, r3, #16
 8003738:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8afa      	ldrh	r2, [r7, #22]
 800373e:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8aba      	ldrh	r2, [r7, #20]
 8003744:	841a      	strh	r2, [r3, #32]
}
 8003746:	f107 071c 	add.w	r7, r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr

08003750 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	8179      	strh	r1, [r7, #10]
 800375a:	813a      	strh	r2, [r7, #8]
 800375c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	82fb      	strh	r3, [r7, #22]
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	82bb      	strh	r3, [r7, #20]
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8c1b      	ldrh	r3, [r3, #32]
 8003774:	b29b      	uxth	r3, r3
 8003776:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8b9b      	ldrh	r3, [r3, #28]
 8003784:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8c1b      	ldrh	r3, [r3, #32]
 800378a:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800378c:	897b      	ldrh	r3, [r7, #10]
 800378e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003792:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8003794:	8afb      	ldrh	r3, [r7, #22]
 8003796:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800379a:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	893b      	ldrh	r3, [r7, #8]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	8afb      	ldrh	r3, [r7, #22]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80037b0:	8abb      	ldrh	r3, [r7, #20]
 80037b2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80037b6:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 80037b8:	8a7a      	ldrh	r2, [r7, #18]
 80037ba:	8abb      	ldrh	r3, [r7, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	b29b      	uxth	r3, r3
 80037c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c4:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8afa      	ldrh	r2, [r7, #22]
 80037ca:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8aba      	ldrh	r2, [r7, #20]
 80037d0:	841a      	strh	r2, [r3, #32]
}
 80037d2:	f107 071c 	add.w	r7, r7, #28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	8179      	strh	r1, [r7, #10]
 80037e6:	813a      	strh	r2, [r7, #8]
 80037e8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	82fb      	strh	r3, [r7, #22]
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	82bb      	strh	r3, [r7, #20]
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8c1b      	ldrh	r3, [r3, #32]
 8003800:	b29b      	uxth	r3, r3
 8003802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8b9b      	ldrh	r3, [r3, #28]
 8003810:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8c1b      	ldrh	r3, [r3, #32]
 8003816:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8003818:	897b      	ldrh	r3, [r7, #10]
 800381a:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800381e:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8003820:	8afb      	ldrh	r3, [r7, #22]
 8003822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003826:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800382a:	ea4f 5313 	mov.w	r3, r3, lsr #20
 800382e:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8003830:	893b      	ldrh	r3, [r7, #8]
 8003832:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003836:	b29a      	uxth	r2, r3
 8003838:	8afb      	ldrh	r3, [r7, #22]
 800383a:	4313      	orrs	r3, r2
 800383c:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003844:	b29a      	uxth	r2, r3
 8003846:	8afb      	ldrh	r3, [r7, #22]
 8003848:	4313      	orrs	r3, r2
 800384a:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800384c:	8abb      	ldrh	r3, [r7, #20]
 800384e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003852:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8003856:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800385a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800385c:	8a7a      	ldrh	r2, [r7, #18]
 800385e:	8abb      	ldrh	r3, [r7, #20]
 8003860:	4313      	orrs	r3, r2
 8003862:	b29b      	uxth	r3, r3
 8003864:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003868:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8afa      	ldrh	r2, [r7, #22]
 800386e:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8aba      	ldrh	r2, [r7, #20]
 8003874:	841a      	strh	r2, [r3, #32]
}
 8003876:	f107 071c 	add.w	r7, r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	08003e9c 	.word	0x08003e9c
 8003884:	20000198 	.word	0x20000198
 8003888:	200005ec 	.word	0x200005ec
 800388c:	200005fc 	.word	0x200005fc
 8003890:	20000620 	.word	0x20000620

08003894 <__register_exitproc>:
 8003894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003898:	4c27      	ldr	r4, [pc, #156]	; (8003938 <__register_exitproc+0xa4>)
 800389a:	6825      	ldr	r5, [r4, #0]
 800389c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80038a0:	b084      	sub	sp, #16
 80038a2:	4607      	mov	r7, r0
 80038a4:	2c00      	cmp	r4, #0
 80038a6:	d041      	beq.n	800392c <__register_exitproc+0x98>
 80038a8:	6866      	ldr	r6, [r4, #4]
 80038aa:	2e1f      	cmp	r6, #31
 80038ac:	dd1c      	ble.n	80038e8 <__register_exitproc+0x54>
 80038ae:	4823      	ldr	r0, [pc, #140]	; (800393c <__register_exitproc+0xa8>)
 80038b0:	b910      	cbnz	r0, 80038b8 <__register_exitproc+0x24>
 80038b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038b6:	e01f      	b.n	80038f8 <__register_exitproc+0x64>
 80038b8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80038bc:	9103      	str	r1, [sp, #12]
 80038be:	9202      	str	r2, [sp, #8]
 80038c0:	9301      	str	r3, [sp, #4]
 80038c2:	f3af 8000 	nop.w
 80038c6:	9903      	ldr	r1, [sp, #12]
 80038c8:	9a02      	ldr	r2, [sp, #8]
 80038ca:	9b01      	ldr	r3, [sp, #4]
 80038cc:	4604      	mov	r4, r0
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d0ef      	beq.n	80038b2 <__register_exitproc+0x1e>
 80038d2:	f8d5 6148 	ldr.w	r6, [r5, #328]	; 0x148
 80038d6:	2000      	movs	r0, #0
 80038d8:	6060      	str	r0, [r4, #4]
 80038da:	6026      	str	r6, [r4, #0]
 80038dc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80038e0:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 80038e4:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 80038e8:	6865      	ldr	r5, [r4, #4]
 80038ea:	b947      	cbnz	r7, 80038fe <__register_exitproc+0x6a>
 80038ec:	1ca8      	adds	r0, r5, #2
 80038ee:	3501      	adds	r5, #1
 80038f0:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
 80038f4:	6065      	str	r5, [r4, #4]
 80038f6:	2000      	movs	r0, #0
 80038f8:	b004      	add	sp, #16
 80038fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038fe:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 8003902:	2001      	movs	r0, #1
 8003904:	eb04 0885 	add.w	r8, r4, r5, lsl #2
 8003908:	fa00 f005 	lsl.w	r0, r0, r5
 800390c:	4306      	orrs	r6, r0
 800390e:	2f02      	cmp	r7, #2
 8003910:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 8003914:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8003918:	f8c8 3108 	str.w	r3, [r8, #264]	; 0x108
 800391c:	d1e6      	bne.n	80038ec <__register_exitproc+0x58>
 800391e:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8003922:	ea43 0200 	orr.w	r2, r3, r0
 8003926:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800392a:	e7df      	b.n	80038ec <__register_exitproc+0x58>
 800392c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8003930:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8003934:	e7b8      	b.n	80038a8 <__register_exitproc+0x14>
 8003936:	bf00      	nop
 8003938:	08003e80 	.word	0x08003e80
 800393c:	00000000 	.word	0x00000000

08003940 <exit>:
 8003940:	b508      	push	{r3, lr}
 8003942:	2100      	movs	r1, #0
 8003944:	4604      	mov	r4, r0
 8003946:	f000 f91d 	bl	8003b84 <__call_exitprocs>
 800394a:	4b04      	ldr	r3, [pc, #16]	; (800395c <exit+0x1c>)
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003950:	b101      	cbz	r1, 8003954 <exit+0x14>
 8003952:	4788      	blx	r1
 8003954:	4620      	mov	r0, r4
 8003956:	f000 fa5f 	bl	8003e18 <_exit>
 800395a:	bf00      	nop
 800395c:	08003e80 	.word	0x08003e80

08003960 <__libc_fini_array>:
 8003960:	b570      	push	{r4, r5, r6, lr}
 8003962:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <__libc_fini_array+0x48>)
 8003964:	4c11      	ldr	r4, [pc, #68]	; (80039ac <__libc_fini_array+0x4c>)
 8003966:	1b18      	subs	r0, r3, r4
 8003968:	1081      	asrs	r1, r0, #2
 800396a:	d018      	beq.n	800399e <__libc_fini_array+0x3e>
 800396c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8003970:	1e4e      	subs	r6, r1, #1
 8003972:	4635      	mov	r5, r6
 8003974:	f854 2d04 	ldr.w	r2, [r4, #-4]!
 8003978:	f006 0601 	and.w	r6, r6, #1
 800397c:	4790      	blx	r2
 800397e:	b175      	cbz	r5, 800399e <__libc_fini_array+0x3e>
 8003980:	b126      	cbz	r6, 800398c <__libc_fini_array+0x2c>
 8003982:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8003986:	4798      	blx	r3
 8003988:	3d01      	subs	r5, #1
 800398a:	d008      	beq.n	800399e <__libc_fini_array+0x3e>
 800398c:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 8003990:	4780      	blx	r0
 8003992:	3d01      	subs	r5, #1
 8003994:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8003998:	4788      	blx	r1
 800399a:	3d01      	subs	r5, #1
 800399c:	d1f6      	bne.n	800398c <__libc_fini_array+0x2c>
 800399e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80039a2:	f000 ba75 	b.w	8003e90 <_fini>
 80039a6:	bf00      	nop
	...

080039b0 <__libc_init_array>:
 80039b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b2:	4f20      	ldr	r7, [pc, #128]	; (8003a34 <__libc_init_array+0x84>)
 80039b4:	4c20      	ldr	r4, [pc, #128]	; (8003a38 <__libc_init_array+0x88>)
 80039b6:	1b38      	subs	r0, r7, r4
 80039b8:	1087      	asrs	r7, r0, #2
 80039ba:	d017      	beq.n	80039ec <__libc_init_array+0x3c>
 80039bc:	1e7a      	subs	r2, r7, #1
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	2501      	movs	r5, #1
 80039c2:	f002 0601 	and.w	r6, r2, #1
 80039c6:	4798      	blx	r3
 80039c8:	42af      	cmp	r7, r5
 80039ca:	d00f      	beq.n	80039ec <__libc_init_array+0x3c>
 80039cc:	b12e      	cbz	r6, 80039da <__libc_init_array+0x2a>
 80039ce:	f854 1f04 	ldr.w	r1, [r4, #4]!
 80039d2:	2502      	movs	r5, #2
 80039d4:	4788      	blx	r1
 80039d6:	42af      	cmp	r7, r5
 80039d8:	d008      	beq.n	80039ec <__libc_init_array+0x3c>
 80039da:	6860      	ldr	r0, [r4, #4]
 80039dc:	4780      	blx	r0
 80039de:	3502      	adds	r5, #2
 80039e0:	68a2      	ldr	r2, [r4, #8]
 80039e2:	1d26      	adds	r6, r4, #4
 80039e4:	4790      	blx	r2
 80039e6:	3408      	adds	r4, #8
 80039e8:	42af      	cmp	r7, r5
 80039ea:	d1f6      	bne.n	80039da <__libc_init_array+0x2a>
 80039ec:	4f13      	ldr	r7, [pc, #76]	; (8003a3c <__libc_init_array+0x8c>)
 80039ee:	4c14      	ldr	r4, [pc, #80]	; (8003a40 <__libc_init_array+0x90>)
 80039f0:	f000 fa48 	bl	8003e84 <_init>
 80039f4:	1b3b      	subs	r3, r7, r4
 80039f6:	109f      	asrs	r7, r3, #2
 80039f8:	d018      	beq.n	8003a2c <__libc_init_array+0x7c>
 80039fa:	1e7d      	subs	r5, r7, #1
 80039fc:	6821      	ldr	r1, [r4, #0]
 80039fe:	f005 0601 	and.w	r6, r5, #1
 8003a02:	2501      	movs	r5, #1
 8003a04:	4788      	blx	r1
 8003a06:	42af      	cmp	r7, r5
 8003a08:	d011      	beq.n	8003a2e <__libc_init_array+0x7e>
 8003a0a:	b12e      	cbz	r6, 8003a18 <__libc_init_array+0x68>
 8003a0c:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8003a10:	2502      	movs	r5, #2
 8003a12:	4780      	blx	r0
 8003a14:	42af      	cmp	r7, r5
 8003a16:	d00b      	beq.n	8003a30 <__libc_init_array+0x80>
 8003a18:	6862      	ldr	r2, [r4, #4]
 8003a1a:	4790      	blx	r2
 8003a1c:	3502      	adds	r5, #2
 8003a1e:	68a3      	ldr	r3, [r4, #8]
 8003a20:	1d26      	adds	r6, r4, #4
 8003a22:	4798      	blx	r3
 8003a24:	3408      	adds	r4, #8
 8003a26:	42af      	cmp	r7, r5
 8003a28:	d1f6      	bne.n	8003a18 <__libc_init_array+0x68>
 8003a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a32:	bf00      	nop
	...

08003a44 <memset>:
 8003a44:	b4f0      	push	{r4, r5, r6, r7}
 8003a46:	0784      	lsls	r4, r0, #30
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f000 808e 	beq.w	8003b6a <memset+0x126>
 8003a4e:	1e54      	subs	r4, r2, #1
 8003a50:	2a00      	cmp	r2, #0
 8003a52:	f000 8088 	beq.w	8003b66 <memset+0x122>
 8003a56:	07e5      	lsls	r5, r4, #31
 8003a58:	b2ce      	uxtb	r6, r1
 8003a5a:	d411      	bmi.n	8003a80 <memset+0x3c>
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	1e67      	subs	r7, r4, #1
 8003a60:	f802 6b01 	strb.w	r6, [r2], #1
 8003a64:	4613      	mov	r3, r2
 8003a66:	4615      	mov	r5, r2
 8003a68:	0792      	lsls	r2, r2, #30
 8003a6a:	d00f      	beq.n	8003a8c <memset+0x48>
 8003a6c:	2c00      	cmp	r4, #0
 8003a6e:	d07a      	beq.n	8003b66 <memset+0x122>
 8003a70:	f803 6b01 	strb.w	r6, [r3], #1
 8003a74:	079a      	lsls	r2, r3, #30
 8003a76:	463c      	mov	r4, r7
 8003a78:	461d      	mov	r5, r3
 8003a7a:	d007      	beq.n	8003a8c <memset+0x48>
 8003a7c:	3c01      	subs	r4, #1
 8003a7e:	e7ed      	b.n	8003a5c <memset+0x18>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f803 6b01 	strb.w	r6, [r3], #1
 8003a86:	079a      	lsls	r2, r3, #30
 8003a88:	461d      	mov	r5, r3
 8003a8a:	d1f7      	bne.n	8003a7c <memset+0x38>
 8003a8c:	2c03      	cmp	r4, #3
 8003a8e:	d952      	bls.n	8003b36 <memset+0xf2>
 8003a90:	b2ce      	uxtb	r6, r1
 8003a92:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 8003a96:	2c0f      	cmp	r4, #15
 8003a98:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 8003a9c:	d92d      	bls.n	8003afa <memset+0xb6>
 8003a9e:	f1a4 0210 	sub.w	r2, r4, #16
 8003aa2:	4617      	mov	r7, r2
 8003aa4:	2f0f      	cmp	r7, #15
 8003aa6:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8003aaa:	602b      	str	r3, [r5, #0]
 8003aac:	606b      	str	r3, [r5, #4]
 8003aae:	60ab      	str	r3, [r5, #8]
 8003ab0:	60eb      	str	r3, [r5, #12]
 8003ab2:	f105 0210 	add.w	r2, r5, #16
 8003ab6:	d916      	bls.n	8003ae6 <memset+0xa2>
 8003ab8:	b13e      	cbz	r6, 8003aca <memset+0x86>
 8003aba:	3f10      	subs	r7, #16
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	6053      	str	r3, [r2, #4]
 8003ac0:	6093      	str	r3, [r2, #8]
 8003ac2:	60d3      	str	r3, [r2, #12]
 8003ac4:	3210      	adds	r2, #16
 8003ac6:	2f0f      	cmp	r7, #15
 8003ac8:	d90d      	bls.n	8003ae6 <memset+0xa2>
 8003aca:	3f20      	subs	r7, #32
 8003acc:	f102 0610 	add.w	r6, r2, #16
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	6053      	str	r3, [r2, #4]
 8003ad4:	6093      	str	r3, [r2, #8]
 8003ad6:	60d3      	str	r3, [r2, #12]
 8003ad8:	6113      	str	r3, [r2, #16]
 8003ada:	6153      	str	r3, [r2, #20]
 8003adc:	6193      	str	r3, [r2, #24]
 8003ade:	61d3      	str	r3, [r2, #28]
 8003ae0:	3220      	adds	r2, #32
 8003ae2:	2f0f      	cmp	r7, #15
 8003ae4:	d8f1      	bhi.n	8003aca <memset+0x86>
 8003ae6:	f1a4 0210 	sub.w	r2, r4, #16
 8003aea:	f022 020f 	bic.w	r2, r2, #15
 8003aee:	f004 040f 	and.w	r4, r4, #15
 8003af2:	3210      	adds	r2, #16
 8003af4:	2c03      	cmp	r4, #3
 8003af6:	4415      	add	r5, r2
 8003af8:	d91d      	bls.n	8003b36 <memset+0xf2>
 8003afa:	1f27      	subs	r7, r4, #4
 8003afc:	463e      	mov	r6, r7
 8003afe:	462a      	mov	r2, r5
 8003b00:	2e03      	cmp	r6, #3
 8003b02:	f842 3b04 	str.w	r3, [r2], #4
 8003b06:	f3c7 0780 	ubfx	r7, r7, #2, #1
 8003b0a:	d90d      	bls.n	8003b28 <memset+0xe4>
 8003b0c:	b127      	cbz	r7, 8003b18 <memset+0xd4>
 8003b0e:	3e04      	subs	r6, #4
 8003b10:	2e03      	cmp	r6, #3
 8003b12:	f842 3b04 	str.w	r3, [r2], #4
 8003b16:	d907      	bls.n	8003b28 <memset+0xe4>
 8003b18:	4617      	mov	r7, r2
 8003b1a:	3e08      	subs	r6, #8
 8003b1c:	f847 3b04 	str.w	r3, [r7], #4
 8003b20:	6053      	str	r3, [r2, #4]
 8003b22:	1d3a      	adds	r2, r7, #4
 8003b24:	2e03      	cmp	r6, #3
 8003b26:	d8f7      	bhi.n	8003b18 <memset+0xd4>
 8003b28:	1f23      	subs	r3, r4, #4
 8003b2a:	f023 0203 	bic.w	r2, r3, #3
 8003b2e:	1d13      	adds	r3, r2, #4
 8003b30:	f004 0403 	and.w	r4, r4, #3
 8003b34:	18ed      	adds	r5, r5, r3
 8003b36:	b1b4      	cbz	r4, 8003b66 <memset+0x122>
 8003b38:	462b      	mov	r3, r5
 8003b3a:	b2c9      	uxtb	r1, r1
 8003b3c:	f803 1b01 	strb.w	r1, [r3], #1
 8003b40:	192c      	adds	r4, r5, r4
 8003b42:	43ed      	mvns	r5, r5
 8003b44:	1962      	adds	r2, r4, r5
 8003b46:	42a3      	cmp	r3, r4
 8003b48:	f002 0501 	and.w	r5, r2, #1
 8003b4c:	d00b      	beq.n	8003b66 <memset+0x122>
 8003b4e:	b11d      	cbz	r5, 8003b58 <memset+0x114>
 8003b50:	f803 1b01 	strb.w	r1, [r3], #1
 8003b54:	42a3      	cmp	r3, r4
 8003b56:	d006      	beq.n	8003b66 <memset+0x122>
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f802 1b01 	strb.w	r1, [r2], #1
 8003b5e:	7059      	strb	r1, [r3, #1]
 8003b60:	1c53      	adds	r3, r2, #1
 8003b62:	42a3      	cmp	r3, r4
 8003b64:	d1f8      	bne.n	8003b58 <memset+0x114>
 8003b66:	bcf0      	pop	{r4, r5, r6, r7}
 8003b68:	4770      	bx	lr
 8003b6a:	4605      	mov	r5, r0
 8003b6c:	4614      	mov	r4, r2
 8003b6e:	e78d      	b.n	8003a8c <memset+0x48>

08003b70 <register_fini>:
 8003b70:	4b02      	ldr	r3, [pc, #8]	; (8003b7c <register_fini+0xc>)
 8003b72:	b113      	cbz	r3, 8003b7a <register_fini+0xa>
 8003b74:	4802      	ldr	r0, [pc, #8]	; (8003b80 <register_fini+0x10>)
 8003b76:	f000 b949 	b.w	8003e0c <atexit>
 8003b7a:	4770      	bx	lr
 8003b7c:	00000000 	.word	0x00000000
 8003b80:	08003961 	.word	0x08003961

08003b84 <__call_exitprocs>:
 8003b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b88:	4b9f      	ldr	r3, [pc, #636]	; (8003e08 <__call_exitprocs+0x284>)
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	9004      	str	r0, [sp, #16]
 8003b90:	f502 70a4 	add.w	r0, r2, #328	; 0x148
 8003b94:	9203      	str	r2, [sp, #12]
 8003b96:	460d      	mov	r5, r1
 8003b98:	9005      	str	r0, [sp, #20]
 8003b9a:	f04f 0a01 	mov.w	sl, #1
 8003b9e:	9903      	ldr	r1, [sp, #12]
 8003ba0:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003ba4:	f8d1 4148 	ldr.w	r4, [r1, #328]	; 0x148
 8003ba8:	2c00      	cmp	r4, #0
 8003baa:	d043      	beq.n	8003c34 <__call_exitprocs+0xb0>
 8003bac:	6862      	ldr	r2, [r4, #4]
 8003bae:	f1b2 0801 	subs.w	r8, r2, #1
 8003bb2:	d438      	bmi.n	8003c26 <__call_exitprocs+0xa2>
 8003bb4:	f104 0b88 	add.w	fp, r4, #136	; 0x88
 8003bb8:	321f      	adds	r2, #31
 8003bba:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 8003bbe:	f008 0c01 	and.w	ip, r8, #1
 8003bc2:	2d00      	cmp	r5, #0
 8003bc4:	f000 808c 	beq.w	8003ce0 <__call_exitprocs+0x15c>
 8003bc8:	f85b 6022 	ldr.w	r6, [fp, r2, lsl #2]
 8003bcc:	42ae      	cmp	r6, r5
 8003bce:	f000 8087 	beq.w	8003ce0 <__call_exitprocs+0x15c>
 8003bd2:	1f1e      	subs	r6, r3, #4
 8003bd4:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8003bd8:	f1b8 0f00 	cmp.w	r8, #0
 8003bdc:	d023      	beq.n	8003c26 <__call_exitprocs+0xa2>
 8003bde:	f1bc 0f00 	cmp.w	ip, #0
 8003be2:	d00b      	beq.n	8003bfc <__call_exitprocs+0x78>
 8003be4:	2d00      	cmp	r5, #0
 8003be6:	f000 80a2 	beq.w	8003d2e <__call_exitprocs+0x1aa>
 8003bea:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8003bee:	42ab      	cmp	r3, r5
 8003bf0:	f000 809d 	beq.w	8003d2e <__call_exitprocs+0x1aa>
 8003bf4:	3f01      	subs	r7, #1
 8003bf6:	3e04      	subs	r6, #4
 8003bf8:	1c7b      	adds	r3, r7, #1
 8003bfa:	d014      	beq.n	8003c26 <__call_exitprocs+0xa2>
 8003bfc:	46b8      	mov	r8, r7
 8003bfe:	b1e5      	cbz	r5, 8003c3a <__call_exitprocs+0xb6>
 8003c00:	6837      	ldr	r7, [r6, #0]
 8003c02:	42af      	cmp	r7, r5
 8003c04:	d019      	beq.n	8003c3a <__call_exitprocs+0xb6>
 8003c06:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8003c0a:	f1a6 0804 	sub.w	r8, r6, #4
 8003c0e:	2d00      	cmp	r5, #0
 8003c10:	d03f      	beq.n	8003c92 <__call_exitprocs+0x10e>
 8003c12:	f856 6c04 	ldr.w	r6, [r6, #-4]
 8003c16:	42ae      	cmp	r6, r5
 8003c18:	d03b      	beq.n	8003c92 <__call_exitprocs+0x10e>
 8003c1a:	f1a8 0604 	sub.w	r6, r8, #4
 8003c1e:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 8003c22:	2f00      	cmp	r7, #0
 8003c24:	d1eb      	bne.n	8003bfe <__call_exitprocs+0x7a>
 8003c26:	f240 0200 	movw	r2, #0
 8003c2a:	f2c0 0200 	movt	r2, #0
 8003c2e:	2a00      	cmp	r2, #0
 8003c30:	f040 80da 	bne.w	8003de8 <__call_exitprocs+0x264>
 8003c34:	b007      	add	sp, #28
 8003c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c3a:	6861      	ldr	r1, [r4, #4]
 8003c3c:	ebcb 0206 	rsb	r2, fp, r6
 8003c40:	18a0      	adds	r0, r4, r2
 8003c42:	1e4f      	subs	r7, r1, #1
 8003c44:	4547      	cmp	r7, r8
 8003c46:	f850 3c78 	ldr.w	r3, [r0, #-120]
 8003c4a:	f000 8092 	beq.w	8003d72 <__call_exitprocs+0x1ee>
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f840 2c78 	str.w	r2, [r0, #-120]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0d6      	beq.n	8003c06 <__call_exitprocs+0x82>
 8003c58:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 8003c5c:	6867      	ldr	r7, [r4, #4]
 8003c5e:	fa0a f008 	lsl.w	r0, sl, r8
 8003c62:	4208      	tst	r0, r1
 8003c64:	d03a      	beq.n	8003cdc <__call_exitprocs+0x158>
 8003c66:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 8003c6a:	4210      	tst	r0, r2
 8003c6c:	f040 8097 	bne.w	8003d9e <__call_exitprocs+0x21a>
 8003c70:	9804      	ldr	r0, [sp, #16]
 8003c72:	f856 1c80 	ldr.w	r1, [r6, #-128]
 8003c76:	4798      	blx	r3
 8003c78:	6863      	ldr	r3, [r4, #4]
 8003c7a:	42bb      	cmp	r3, r7
 8003c7c:	d18f      	bne.n	8003b9e <__call_exitprocs+0x1a>
 8003c7e:	f8d9 1000 	ldr.w	r1, [r9]
 8003c82:	42a1      	cmp	r1, r4
 8003c84:	d18b      	bne.n	8003b9e <__call_exitprocs+0x1a>
 8003c86:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8003c8a:	f1a6 0804 	sub.w	r8, r6, #4
 8003c8e:	2d00      	cmp	r5, #0
 8003c90:	d1bf      	bne.n	8003c12 <__call_exitprocs+0x8e>
 8003c92:	6863      	ldr	r3, [r4, #4]
 8003c94:	ebcb 0008 	rsb	r0, fp, r8
 8003c98:	1e59      	subs	r1, r3, #1
 8003c9a:	1822      	adds	r2, r4, r0
 8003c9c:	42b9      	cmp	r1, r7
 8003c9e:	f852 3c78 	ldr.w	r3, [r2, #-120]
 8003ca2:	d069      	beq.n	8003d78 <__call_exitprocs+0x1f4>
 8003ca4:	2600      	movs	r6, #0
 8003ca6:	f842 6c78 	str.w	r6, [r2, #-120]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0b5      	beq.n	8003c1a <__call_exitprocs+0x96>
 8003cae:	f8d4 0188 	ldr.w	r0, [r4, #392]	; 0x188
 8003cb2:	6866      	ldr	r6, [r4, #4]
 8003cb4:	fa0a f207 	lsl.w	r2, sl, r7
 8003cb8:	4202      	tst	r2, r0
 8003cba:	d036      	beq.n	8003d2a <__call_exitprocs+0x1a6>
 8003cbc:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8003cc0:	420a      	tst	r2, r1
 8003cc2:	d070      	beq.n	8003da6 <__call_exitprocs+0x222>
 8003cc4:	f858 0c80 	ldr.w	r0, [r8, #-128]
 8003cc8:	4798      	blx	r3
 8003cca:	6863      	ldr	r3, [r4, #4]
 8003ccc:	42b3      	cmp	r3, r6
 8003cce:	f47f af66 	bne.w	8003b9e <__call_exitprocs+0x1a>
 8003cd2:	f8d9 0000 	ldr.w	r0, [r9]
 8003cd6:	42a0      	cmp	r0, r4
 8003cd8:	d09f      	beq.n	8003c1a <__call_exitprocs+0x96>
 8003cda:	e760      	b.n	8003b9e <__call_exitprocs+0x1a>
 8003cdc:	4798      	blx	r3
 8003cde:	e7cb      	b.n	8003c78 <__call_exitprocs+0xf4>
 8003ce0:	6862      	ldr	r2, [r4, #4]
 8003ce2:	ebcb 0003 	rsb	r0, fp, r3
 8003ce6:	1e56      	subs	r6, r2, #1
 8003ce8:	1821      	adds	r1, r4, r0
 8003cea:	4546      	cmp	r6, r8
 8003cec:	f851 2c78 	ldr.w	r2, [r1, #-120]
 8003cf0:	d070      	beq.n	8003dd4 <__call_exitprocs+0x250>
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	f841 0c78 	str.w	r0, [r1, #-120]
 8003cf8:	2a00      	cmp	r2, #0
 8003cfa:	f43f af6a 	beq.w	8003bd2 <__call_exitprocs+0x4e>
 8003cfe:	f8d4 0188 	ldr.w	r0, [r4, #392]	; 0x188
 8003d02:	6866      	ldr	r6, [r4, #4]
 8003d04:	fa0a f108 	lsl.w	r1, sl, r8
 8003d08:	4201      	tst	r1, r0
 8003d0a:	d037      	beq.n	8003d7c <__call_exitprocs+0x1f8>
 8003d0c:	f8d4 018c 	ldr.w	r0, [r4, #396]	; 0x18c
 8003d10:	4201      	tst	r1, r0
 8003d12:	d155      	bne.n	8003dc0 <__call_exitprocs+0x23c>
 8003d14:	f853 1c80 	ldr.w	r1, [r3, #-128]
 8003d18:	9804      	ldr	r0, [sp, #16]
 8003d1a:	9302      	str	r3, [sp, #8]
 8003d1c:	f8cd c004 	str.w	ip, [sp, #4]
 8003d20:	4790      	blx	r2
 8003d22:	9b02      	ldr	r3, [sp, #8]
 8003d24:	f8dd c004 	ldr.w	ip, [sp, #4]
 8003d28:	e02f      	b.n	8003d8a <__call_exitprocs+0x206>
 8003d2a:	4798      	blx	r3
 8003d2c:	e7cd      	b.n	8003cca <__call_exitprocs+0x146>
 8003d2e:	6861      	ldr	r1, [r4, #4]
 8003d30:	ebcb 0006 	rsb	r0, fp, r6
 8003d34:	1822      	adds	r2, r4, r0
 8003d36:	1e48      	subs	r0, r1, #1
 8003d38:	42b8      	cmp	r0, r7
 8003d3a:	f852 3c78 	ldr.w	r3, [r2, #-120]
 8003d3e:	d04c      	beq.n	8003dda <__call_exitprocs+0x256>
 8003d40:	2100      	movs	r1, #0
 8003d42:	f842 1c78 	str.w	r1, [r2, #-120]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f43f af54 	beq.w	8003bf4 <__call_exitprocs+0x70>
 8003d4c:	f8d4 0188 	ldr.w	r0, [r4, #392]	; 0x188
 8003d50:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8003d54:	fa0a f207 	lsl.w	r2, sl, r7
 8003d58:	4202      	tst	r2, r0
 8003d5a:	d129      	bne.n	8003db0 <__call_exitprocs+0x22c>
 8003d5c:	4798      	blx	r3
 8003d5e:	6863      	ldr	r3, [r4, #4]
 8003d60:	4543      	cmp	r3, r8
 8003d62:	f47f af1c 	bne.w	8003b9e <__call_exitprocs+0x1a>
 8003d66:	f8d9 0000 	ldr.w	r0, [r9]
 8003d6a:	42a0      	cmp	r0, r4
 8003d6c:	f43f af42 	beq.w	8003bf4 <__call_exitprocs+0x70>
 8003d70:	e715      	b.n	8003b9e <__call_exitprocs+0x1a>
 8003d72:	f8c4 8004 	str.w	r8, [r4, #4]
 8003d76:	e76d      	b.n	8003c54 <__call_exitprocs+0xd0>
 8003d78:	6067      	str	r7, [r4, #4]
 8003d7a:	e796      	b.n	8003caa <__call_exitprocs+0x126>
 8003d7c:	9302      	str	r3, [sp, #8]
 8003d7e:	f8cd c004 	str.w	ip, [sp, #4]
 8003d82:	4790      	blx	r2
 8003d84:	9b02      	ldr	r3, [sp, #8]
 8003d86:	f8dd c004 	ldr.w	ip, [sp, #4]
 8003d8a:	6862      	ldr	r2, [r4, #4]
 8003d8c:	42b2      	cmp	r2, r6
 8003d8e:	f47f af06 	bne.w	8003b9e <__call_exitprocs+0x1a>
 8003d92:	f8d9 1000 	ldr.w	r1, [r9]
 8003d96:	42a1      	cmp	r1, r4
 8003d98:	f43f af1b 	beq.w	8003bd2 <__call_exitprocs+0x4e>
 8003d9c:	e6ff      	b.n	8003b9e <__call_exitprocs+0x1a>
 8003d9e:	f856 0c80 	ldr.w	r0, [r6, #-128]
 8003da2:	4798      	blx	r3
 8003da4:	e768      	b.n	8003c78 <__call_exitprocs+0xf4>
 8003da6:	9804      	ldr	r0, [sp, #16]
 8003da8:	f858 1c80 	ldr.w	r1, [r8, #-128]
 8003dac:	4798      	blx	r3
 8003dae:	e78c      	b.n	8003cca <__call_exitprocs+0x146>
 8003db0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8003db4:	420a      	tst	r2, r1
 8003db6:	d012      	beq.n	8003dde <__call_exitprocs+0x25a>
 8003db8:	f856 0c80 	ldr.w	r0, [r6, #-128]
 8003dbc:	4798      	blx	r3
 8003dbe:	e7ce      	b.n	8003d5e <__call_exitprocs+0x1da>
 8003dc0:	f853 0c80 	ldr.w	r0, [r3, #-128]
 8003dc4:	9302      	str	r3, [sp, #8]
 8003dc6:	f8cd c004 	str.w	ip, [sp, #4]
 8003dca:	4790      	blx	r2
 8003dcc:	9b02      	ldr	r3, [sp, #8]
 8003dce:	f8dd c004 	ldr.w	ip, [sp, #4]
 8003dd2:	e7da      	b.n	8003d8a <__call_exitprocs+0x206>
 8003dd4:	f8c4 8004 	str.w	r8, [r4, #4]
 8003dd8:	e78e      	b.n	8003cf8 <__call_exitprocs+0x174>
 8003dda:	6067      	str	r7, [r4, #4]
 8003ddc:	e7b3      	b.n	8003d46 <__call_exitprocs+0x1c2>
 8003dde:	9804      	ldr	r0, [sp, #16]
 8003de0:	f856 1c80 	ldr.w	r1, [r6, #-128]
 8003de4:	4798      	blx	r3
 8003de6:	e7ba      	b.n	8003d5e <__call_exitprocs+0x1da>
 8003de8:	6861      	ldr	r1, [r4, #4]
 8003dea:	b949      	cbnz	r1, 8003e00 <__call_exitprocs+0x27c>
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	b143      	cbz	r3, 8003e02 <__call_exitprocs+0x27e>
 8003df0:	4620      	mov	r0, r4
 8003df2:	f8c9 3000 	str.w	r3, [r9]
 8003df6:	f3af 8000 	nop.w
 8003dfa:	f8d9 4000 	ldr.w	r4, [r9]
 8003dfe:	e6d3      	b.n	8003ba8 <__call_exitprocs+0x24>
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	46a1      	mov	r9, r4
 8003e04:	461c      	mov	r4, r3
 8003e06:	e6cf      	b.n	8003ba8 <__call_exitprocs+0x24>
 8003e08:	08003e80 	.word	0x08003e80

08003e0c <atexit>:
 8003e0c:	4601      	mov	r1, r0
 8003e0e:	2000      	movs	r0, #0
 8003e10:	4602      	mov	r2, r0
 8003e12:	4603      	mov	r3, r0
 8003e14:	f7ff bd3e 	b.w	8003894 <__register_exitproc>

08003e18 <_exit>:
 8003e18:	e7fe      	b.n	8003e18 <_exit>
 8003e1a:	bf00      	nop

08003e1c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function

Reset_Handler:  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003e1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003e1e:	f000 b804 	b.w	8003e2a <LoopCopyDataInit>

08003e22 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003e22:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <LoopFillZerobss+0x1e>)
  ldr  r3, [r3, r1]
 8003e24:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003e26:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003e28:	3104      	adds	r1, #4

08003e2a <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003e2a:	480e      	ldr	r0, [pc, #56]	; (8003e64 <LoopFillZerobss+0x22>)
  ldr  r3, =_edata
 8003e2c:	4b0e      	ldr	r3, [pc, #56]	; (8003e68 <LoopFillZerobss+0x26>)
  adds  r2, r0, r1
 8003e2e:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003e30:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003e32:	f4ff aff6 	bcc.w	8003e22 <CopyDataInit>
  ldr  r2, =_sbss
 8003e36:	4a0d      	ldr	r2, [pc, #52]	; (8003e6c <LoopFillZerobss+0x2a>)
  b  LoopFillZerobss
 8003e38:	f000 b803 	b.w	8003e42 <LoopFillZerobss>

08003e3c <FillZerobss>:

/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003e3c:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003e3e:	f842 3b04 	str.w	r3, [r2], #4

08003e42 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003e42:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <LoopFillZerobss+0x2e>)
  cmp  r2, r3
 8003e44:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003e46:	f4ff aff9 	bcc.w	8003e3c <FillZerobss>

/* FPU settings */
/* Enable CP10,CP11: Privileged and User mode access to coprocessor */
 ldr     r0, =0xE000ED88           
 8003e4a:	480a      	ldr	r0, [pc, #40]	; (8003e74 <LoopFillZerobss+0x32>)
 ldr     r1,[r0]
 8003e4c:	6801      	ldr	r1, [r0, #0]
 orr     r1,r1,#(0xF << 20)
 8003e4e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 str     r1,[r0]
 8003e52:	6001      	str	r1, [r0, #0]

/* TODO: Add stack painting here */

/* Call the clock system intitialization function.*/
  bl  low_level_init   
 8003e54:	f7fc fa3a 	bl	80002cc <low_level_init>

/* Call the application's entry point.*/
  bl  main  /* Enter the C/C++ code */
 8003e58:	f7fc fb70 	bl	800053c <main>
  bx  lr    
 8003e5c:	4770      	bx	lr
  swi 0x0  /* cause exception if main() ever returns */
 8003e5e:	df00      	svc	0
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8003e60:	08003e9c 	.word	0x08003e9c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003e64:	20000198 	.word	0x20000198
  ldr  r3, =_edata
 8003e68:	200005ec 	.word	0x200005ec
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8003e6c:	200005fc 	.word	0x200005fc
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003e70:	20000620 	.word	0x20000620
  cmp  r2, r3
  bcc  FillZerobss

/* FPU settings */
/* Enable CP10,CP11: Privileged and User mode access to coprocessor */
 ldr     r0, =0xE000ED88           
 8003e74:	e000ed88 	.word	0xe000ed88

08003e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e78:	f7ff bffe 	b.w	8003e78 <ADC_IRQHandler>
 8003e7c:	00000043 	.word	0x00000043

08003e80 <_global_impure_ptr>:
 8003e80:	200001c0                                ... 

Disassembly of section .init:

08003e84 <_init>:
 8003e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e86:	bf00      	nop
 8003e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8a:	bc08      	pop	{r3}
 8003e8c:	469e      	mov	lr, r3
 8003e8e:	4770      	bx	lr

Disassembly of section .fini:

08003e90 <_fini>:
 8003e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e92:	bf00      	nop
 8003e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e96:	bc08      	pop	{r3}
 8003e98:	469e      	mov	lr, r3
 8003e9a:	4770      	bx	lr
